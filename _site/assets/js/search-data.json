{"0": {
    "doc": "Strings Part 1",
    "title": "String Algorithms",
    "content": "Strings are the de facto way of storing text in a program. They are arrays (lists) of characters, usually enclosed in single or double quotes (or either) depending on the language. Examples: \"Hello World!\", 'Hello World!'. ",
    "url": "https://cs.dbuckley.dev/docs/algorithms/01/#string-algorithms",
    "relUrl": "/docs/algorithms/01/#string-algorithms"
  },"1": {
    "doc": "Strings Part 1",
    "title": "Basic String Operations",
    "content": "Some basic string operations will be defined below, followed by code examples for the language that you‚Äôve selected at the top of this page. 1. Get length of string . Code . my_str = \"hello\" # 1. Get length of string print(len(my_str)) . String myStr = \"hello\"; // 1. Get length of string System.out.println(myStr.length()) . const myStr = \"hello\"; // 1. Get length of string console.log(myStr.length) . Output . 5 . 2. Get character by index . Because strings are essentially arrays of characters, you can retrieve a single character by its index (position) in the string. The index starts at 0 on the leftmost character. string: hello index: 01234 length of string: 5 . Code . my_str = \"hello\" # 2. Get character by index print(my_str[0]) print(my_str[1]) print(my_str[2]) print(my_str[-2]) print(my_str[-1]) # alternative: my_str[len(my_str) - 1] . String myStr = \"hello\"; // 2. Get character by index System.out.println(myStr.charAt(0)); System.out.println(myStr.charAt(1)); System.out.println(myStr.charAt(2)); System.out.println(myStr.charAt(myStr.length() - 2)); System.out.println(myStr.charAt(myStr.length() - 1)); . const myStr = \"hello\" // 2. Get character by index console.log(myStr.charAt(0)) // alternative: myStr[0] console.log(myStr.charAt(1)) // alternative: myStr[1] console.log(myStr.charAt(2)) // etc. console.log(myStr.charAt(myStr.length - 2)) console.log(myStr.charAt(myStr.length - 1)) . Output . h e l l o . 3. Get a substring . my_str = \"hello\" # 3. Get a substring (aka a string slice) print(my_str[1:]) print(my_str[0:4]) print(my_str[1:2]) print(my_str[:2]) . String myStr = \"hello\"; // 3. Get a substring System.out.println(myStr.substring(1)); System.out.println(myStr.substring(0, 4)); System.out.println(myStr.substring(1, 2)); System.out.println(myStr.substring(0, 2)); . const myStr = \"hello\" // 3. Get a substring console.log(myStr.substring(1)) console.log(myStr.substring(0, 4)) console.log(myStr.substring(1, 2)) console.log(myStr.substring(0, 2)) . Output . ello hell e he . 4. Find index of substring . Code . my_str = \"hello\" # 4. Find index of substring print(my_str.index(\"l\")) print(my_str.index(\"l\", 3)) # the second parameter is what index we start searching from print(my_str.index(\"el\")) print(my_str.index(\"help\")) # not found, throws a runtime error . String myStr = \"hello\"; // 4. Find index of substring System.out.println(myStr.indexOf(\"l\")); System.out.println(myStr.indexOf(\"l\", 3)); // the second parameter is what index we start searching from System.out.println(myStr.indexOf(\"el\")); System.out.println(myStr.indexOf(\"help\")); . const myStr = \"hello\" // 4. Find index of substring console.log(myStr.indexOf(\"l\")) console.log(myStr.indexOf(\"l\", 3)) // the second parameter is what index we start searching from console.log(myStr.indexOf(\"el\")) console.log(myStr.indexOf(\"help\")) . 2 3 1 -1 # Java and JS return -1 for not found, Python throws a \"ValueError\" exception. ",
    "url": "https://cs.dbuckley.dev/docs/algorithms/01/#basic-string-operations",
    "relUrl": "/docs/algorithms/01/#basic-string-operations"
  },"2": {
    "doc": "Strings Part 1",
    "title": "Strings Part 1",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/algorithms/01/",
    "relUrl": "/docs/algorithms/01/"
  },"3": {
    "doc": "GitHub and Markdown",
    "title": "GitHub and Markdown",
    "content": "Coders are writers of code and technical documentation. They need to be able to share content and communicate quickly. These tools will help you do that. | GitHub is the #1 cloud platform for storing, sharing, and versioning code. Think of it like Google Drive for developers, with some extra CS-specific features. | Markdown is the language for writing documentation and other CS-related content. This page was written in Markdown! | . We will dive into Markdown first, which we will use to provide README.md files (containing instructions for usage and descriptions of functionality) to our code projects. ",
    "url": "https://cs.dbuckley.dev/docs/git/markdown/01/",
    "relUrl": "/docs/git/markdown/01/"
  },"4": {
    "doc": "GitHub and Markdown",
    "title": "Markdown",
    "content": "With Markdown, you can format plain text to look like headings, links, images, and more! . Show Markdown Example # Heading 1 ## Heading 2 ... ##### Heading 5 ###### Heading 6 This is a paragraph. [link text](https://example.com) ![image alt text](https://linktoimage.png) - Bulleted list 1 - Bulleted list 2 1. Numbered list 1 2. Numbered list 2 . Show Example Output ",
    "url": "https://cs.dbuckley.dev/docs/git/markdown/01/#markdown",
    "relUrl": "/docs/git/markdown/01/#markdown"
  },"5": {
    "doc": "GitHub and Markdown",
    "title": "Heading 1",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/git/markdown/01/#heading-1",
    "relUrl": "/docs/git/markdown/01/#heading-1"
  },"6": {
    "doc": "GitHub and Markdown",
    "title": "Heading 2",
    "content": "‚Ä¶ . Heading 5 . Heading 6 . This is a paragraph. link text . | Bulleted list 1 | Bulleted list 2 | . | Numbered list 1 | Numbered list 2 | . Try Markdown Yourself . | Markdown Cheat Sheet | Online Markdown Editor | . ",
    "url": "https://cs.dbuckley.dev/docs/git/markdown/01/#heading-2",
    "relUrl": "/docs/git/markdown/01/#heading-2"
  },"7": {
    "doc": "GitHub and Markdown",
    "title": "GitHub",
    "content": "If you haven‚Äôt already, create an account on github.com. Create Your First Git Repository . Once logged in, on the left side of the screen, click the green ‚ÄúNew‚Äù repository button. IMPORTANT: Name the repository the same name as your username. This will make this your GitHub profile README repository. Here, you can put information about yourself. Be sure to check the ‚ÄúAdd a README file‚Äù box (circled in red below). Then, click ‚ÄúCreate Repository‚Äù at the bottom of the page. You can then Edit the README.md file by clicking the pencil icon or the ‚ÄúEdit README‚Äù green button. Add your content here and toggle the ‚ÄúEdit file‚Äù and ‚ÄúPreview‚Äù tabs to add Markdown and see what it looks like. Resources . | üöÄ Add some colored emojis from Emojipedia | üìÉ Here‚Äôs that Markdown cheat sheet again | . Commit = Save . When finished, scroll down to commit your changes. In the git code management tool (used by GitHub), a ‚Äúcommit‚Äù is a savepoint. Commits require brief messages that describe what changes were made. Mr. Buckley‚Äôs README.md . ",
    "url": "https://cs.dbuckley.dev/docs/git/markdown/01/#github",
    "relUrl": "/docs/git/markdown/01/#github"
  },"8": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": "Create a beautiful landscape of snowflakes using Java Greenfoot. This is great fun and a great way to start learning how to code with Java. ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtle-snowflakes/01/",
    "relUrl": "/docs/java-greenfoot/turtle-snowflakes/01/"
  },"9": {
    "doc": "Introduction",
    "title": "What you will make",
    "content": "Digital snowflakes out of code, like this one: . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtle-snowflakes/01/#what-you-will-make",
    "relUrl": "/docs/java-greenfoot/turtle-snowflakes/01/#what-you-will-make"
  },"10": {
    "doc": "Introduction",
    "title": "What you will learn",
    "content": "By making snowflakes with code you will learn how to: . | Draw lines and make turns with Java Greenfoot | Change the pen color randomly | Use loops to repeat some instructions and create shapes | Use more loops to create spiral patterns | Create a function to draw a snowflake | . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtle-snowflakes/01/#what-you-will-learn",
    "relUrl": "/docs/java-greenfoot/turtle-snowflakes/01/#what-you-will-learn"
  },"11": {
    "doc": "Introduction",
    "title": "Starter Project",
    "content": "private void moveAndDraw(int distance) { final int X_VECTOR = (int)(getX() + distance * Math.cos(Math.toRadians(getRotation()))); final int Y_VECTOR = (int)(getY() + distance * Math.sin(Math.toRadians(getRotation()))); getWorld().getBackground().drawLine(getX(), getY(), X_VECTOR, Y_VECTOR); move(distance); } private void setColor(int r, int g, int b) { getWorld().getBackground().setColor(new Color(r, g, b)); } /** * Replace the act code in your program with this one. */ public void act() { int r = 1; int g = 100; int b = 5; int[][] colors = { {85, 211, 136}, {197, 196, 126}, {235, 233, 166}, {25, 135, 222}, {211, 64, 159}, {159, 165, 106}, {178, 160, 125}, {36, 192, 70}, {231, 184, 204}, {63, 203, 219} }; for (int i = 0; i &lt; 4; i++) { setColor(colors[i][0], colors[i][1], colors[i][2]); moveAndDraw(50); turn(90); } } . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtle-snowflakes/01/#starter-project",
    "relUrl": "/docs/java-greenfoot/turtle-snowflakes/01/#starter-project"
  },"12": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/01/",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/01/"
  },"13": {
    "doc": "Introduction",
    "title": "What you will make",
    "content": "In this resource you will take your first steps with the programming language Java to draw shapes, patterns, and spirals. You will use an environment named Greenfoot. Along the way you will learn how to think in sequences, and use loops to repeat a sequence. This is a great stepping stone from a visual programming language like Scratch to the text-based environment of Java. Also, if you have used Python‚Äôs Turtle module before, this is an adaptation of that workflow. ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/01/#what-you-will-make",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/01/#what-you-will-make"
  },"14": {
    "doc": "Introduction",
    "title": "What you will learn",
    "content": "By making patterns with Java code you will learn: . | To take your first steps with the Java programming language | How to draw lines with Java Greenfoot | How to make turns | How to change the line color | To use loops to repeat some instructions and create shapes | To use more loops to create spiral patterns | . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/01/#what-you-will-learn",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/01/#what-you-will-learn"
  },"15": {
    "doc": "Intro to Express.js",
    "title": "Intro to Express.js",
    "content": "Express.js is a web framework for Node.js server-side applications. Here‚Äôs a Hello World Express app. const express = require(\"express\") const app = express() const port = 3000 // When the path \"/\" is visited, send a page that says \"Hello World!\". app.get(\"/\", (req, res) =&gt; { res.send(\"Hello World!\") }) // Run the app. app.listen(port, () =&gt; { console.log(`API listening at http://localhost:${port}`) }) . Visiting http://localhost:3000/ would present a page like this: . Hello World! ",
    "url": "https://cs.dbuckley.dev/docs/javascript/api/01/",
    "relUrl": "/docs/javascript/api/01/"
  },"16": {
    "doc": "Intro to Express.js",
    "title": "Some Definitions",
    "content": ". | Backend Development: Has to do with working on server-side software, including databases, backend logic, application programming interfaces, architecture, and servers. | Database: A file or service that stores data for an application. | API: Application Programming Interface: A set of procedures enabling access to functionality and data. | REST API: A RESTful API allows for client-server communication over HTTP, where resources are accessed via endpoints. | . | Endpoints (URIs): Uniform Resource Identifiers. These are web addresses in an API that provide access to data. Endpoints can allow for different HTTP methods, such as GET, POST, PUT, PATCH, and DELETE, to perform operations on data (e.g. http://example.com/users/ could have an endpoint to GET all users). | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/api/01/#some-definitions",
    "relUrl": "/docs/javascript/api/01/#some-definitions"
  },"17": {
    "doc": "Intro to Express.js",
    "title": "Example CRUD API",
    "content": "This app contains methods for Creating, Reading, Updating, and Deleting users. This sort of app is called a CRUD App and is a very popular architecture for managing data. Scroll down to see the endpoints and try them out. Open in a new tab. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/api/01/#example-crud-api",
    "relUrl": "/docs/javascript/api/01/#example-crud-api"
  },"18": {
    "doc": "Intro to Express.js",
    "title": "Making a CRUD Express.js App",
    "content": "Fork the repl at https://replit.com/@buckldav/express-api-starter. This repl uses replit‚Äôs built-in Database to store data. All of the code below will be added in app.js. Types of Requests and Responses . These are common HTTP request and response methods and statuses. | Operation | HTTP Method | Successful Response | Failure Response | . | Create | POST | 201 Created | 400 Bad Request | . | Read | GET | 200 OK | 404 Not Found | . | Update | PUT | 200 OK | 404 Not Found | . | Delete | DELETE | 204 No Content | 204 No Content | . Create User . All of the comments that start with #swagger show up in the Swagger UI documentation (accessible at /docs). Swagger UI is based on the OpenAPI schema and is a popular API client. Post requests usually require a body (the data that you are creating on the database). The ‚Äúschema‚Äù in the comments below is what will show up in the docs, but does not provide any validation (you would need to do that yourself). In this API, users are unique by username, so there is a bit of logic to check if the user already exists. app.post(\"/users\", jsonParser, async (req, res) =&gt; { // #swagger.summary = \"User Create\" // #swagger.description = \"Create user route. Usernames must be unique.\" /* #swagger.parameters['body'] = { in: 'body', description: 'Create a user', schema: { username: 'icanhazcheezburger', age: 29, about: '' } } */ // if user name exists in db, reject new user const user = await db.get(req.body.username) if (user) { res.status(400).send(\"user already exists.\") } else { await db.set(req.body.username, req.body) res.status(201).send(\"user created.\") } }) . Read User . List all users . The list operation returns a list of all the keys. app.get(\"/users\", async (req, res) =&gt; { // #swagger.summary = \"User List\" // #swagger.description = \"List all users.\" const keys = await db.list() res.status(200).send(JSON.stringify(keys)) }) . Get one user by username . The :username in the path indicates that whatever you put in there when sending a request to that endpoint will be stored in req.params.username in the callback function. For example, if the request is sent to /users/david, then req.params.username = \"david\". app.get(\"/users/:username\", async (req, res) =&gt; { // #swagger.summary = \"User Get\" // #swagger.description = \"Get user by username.\" const user = await db.get(req.params.username) if (user) { res.status(200).send(JSON.stringify(user)) } else { res.status(404).send(\"user not found.\") } }) . Update User . Put requests are a complete update of an database entry. This means that the body for the Update operation is the same as the body for the Create operation. For a partial update, (i.e., just updating the username), you could use a patch request, but put requests are more common.[citation needed] . app.put(\"/users/:username\", async (req, res) =&gt; { // #swagger.summary = \"User Update\" // #swagger.description = \"Update user by username.\" /* #swagger.parameters['body'] = { in: 'body', description: 'Update a user', schema: { username: 'icanhazcheezburger', age: 29, about: '' } } */ // if user name exists in db, reject new user const user = await db.get(req.body.username) if (user) { await db.set(req.body.username, req.body) res.status(200).send(\"user created.\") } else { res.status(404).send(\"user doesn't exist.\") } }) . Delete User . app.delete(\"/users/:username\", async (req, res) =&gt; { // #swagger.summary = \"User Delete\" // #swagger.description = \"Delete user by username.\" const user = await db.delete(req.params.username) res.status(204).send(\"user deleted.\") }) . To delete all users (clear the database), in replit‚Äôs Shell tab, run npm run clear. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/api/01/#making-a-crud-expressjs-app",
    "relUrl": "/docs/javascript/api/01/#making-a-crud-expressjs-app"
  },"19": {
    "doc": "Intro to Express.js",
    "title": "Further Reading",
    "content": ". | Express.js Routing: https://expressjs.com/en/guide/routing.html | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/api/01/#further-reading",
    "relUrl": "/docs/javascript/api/01/#further-reading"
  },"20": {
    "doc": "Variables and Functions",
    "title": "Introduction: Variables and Functions",
    "content": "JavaScript is a versatile programming language primarly used in web applications. Before we build an app, let‚Äôs understand the basics. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/01/#introduction-variables-and-functions",
    "relUrl": "/docs/javascript/basics/01/#introduction-variables-and-functions"
  },"21": {
    "doc": "Variables and Functions",
    "title": "What is a Programming Language?",
    "content": "A programming language is a way for humans to describe algorithms to a computer in a human-readable way. Notably, programming languages can be used to do perform calculations, store data, and control data flow. Programming languages are compiled (translated) to binary or interpreted (executed) within another program. JavaScript is an interpreted language, meaning it needs a runtime environment to be executed. For our practice, we‚Äôre going to run JavaScript in a web browser by including our code in an HTML file. So, create an index.html file somewhere and open it in your browser to begin. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/01/#what-is-a-programming-language",
    "relUrl": "/docs/javascript/basics/01/#what-is-a-programming-language"
  },"22": {
    "doc": "Variables and Functions",
    "title": "Project Setup",
    "content": "There are two options for your project setup. Option 1: replit.com . Assuming you already have an account, create an HTML, CSS, JS project on replit.com. Once the project is running, open the script.js file. You will not need to modify the HTML file. script.js . // Code goes here . Option 2: Local Development . Create a text file called index.html on your computer. Open the file in a text editor and a browser. Start by adding a &lt;script&gt; element to your HTML. We will add our JavaScript code between the opening and closing tags. &lt;script&gt; // Code goes here &lt;/script&gt; . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/01/#project-setup",
    "relUrl": "/docs/javascript/basics/01/#project-setup"
  },"23": {
    "doc": "Variables and Functions",
    "title": "Outputting to the Console",
    "content": "The line that reads // Code goes here is a comment. Comments are inline documentation as to how your code works, they are not instructions to be executed by the computer. You will encounter comments throughout this tutorial and should use them document your own code. Commenting is a good habit and will increase the readability and understandability of your code (but don‚Äôt comment every line). We will be outputting our data and results to the console, which can be accessed in the Developer Tools of your browser. F12 and Ctrl+Shift+I are common shortcuts to open the console. Log data to the console by using console.log(data), where data is replaced with whatever you want to output. // Any text data you want to use must be wrapped in quotes. console.log(\"Hello!\") // You can do standard math operations and output the result. console.log(2 * 4) . Console Output: . Hello! 8 . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/01/#outputting-to-the-console",
    "relUrl": "/docs/javascript/basics/01/#outputting-to-the-console"
  },"24": {
    "doc": "Variables and Functions",
    "title": "Variables: Storing Data",
    "content": "Now that we can output data, it‚Äôs time to store, reuse, and manipulate data to build more complex programs. A variable is a label for stored data. Data could be text, numbers, or more complex objects like HTML elements. There are two ways to store data using variables. Variables with let . To make a variable, start the statement (line of code) with the keyword let, followed by a variable name. Then assign a value to the variable by using the assignment operator (=). let myName = \"David\" . Now whenever you reference the variable myName anywhere in the code, the value \"David\" will be used. console.log(myName) . David . Mutability . Variables declared with let are mutable, meaning that the value stored can be changed later. In other words, you can assign a new value to the variable as many times as you‚Äôd like. The most recently assigned item will be the one stored. // Only write `let` when you declare (create) the variable. let myName = \"David\" console.log(myName) // Do not include `let` for new assignments. myName = \"Jeff\" console.log(myName) myName = \"Fred\" console.log(myName) . David Jeff Fred . Variables with const . Immutability . If you do not want or need the variable to be reassigned, use const to declare it. This is an immutable (unchangeable) way to store data. const pi = 3.1415927 // TypeError: Assignment to constant variable. pi = 3 . Modifying objects declared with const: Arrays . Storing more complex data is usually done with const. For example, let‚Äôs say we have a list of names we want to store. We can use an Array object to store these names together. We can then modify our list as much as we want as long as we don‚Äôt use the assignment operator again. const names = [\"Alice\", \"Bob\", \"Charlie\"] // This adds the name \"David\" to the end of the array names.push(\"David\") // You can reassign individual items in the array names[0] = \"Ada\" // You just can't do this (TypeError) names = [\"New\", \"Names\"] // Output: [\"Ada\", \"Bob\", \"Charlie\", \"David\"] console.log(names) . Opinion: As a rule of thumb, use const for everything unless you need to reassign later. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/01/#variables-storing-data",
    "relUrl": "/docs/javascript/basics/01/#variables-storing-data"
  },"25": {
    "doc": "Variables and Functions",
    "title": "Functions: Storing Instructions",
    "content": "A function is a label for a group of instructions. We‚Äôve already used a function or two in this lesson, notably console.log(). A function has a name, ends with (), and can take in 0 or more parameters (inputs) within those parentheses. zeroParameters() oneParameter(p1) twoParameters(p1, p2) ... Defining Functions . Here is an example that defines a function that adds two numbers together and prints them. function add(x, y) { const sum = x + y console.log(sum) } . Once you have defined the function, you can call (use) it as many times as you‚Äôd like. Each time you call the function, the instructions defined between the {} are executed. add(2, 2) add(3, 4) add(-1, -2) . 4 7 -3 . Outputting From Functions: return . We previously established that you can input data into functions with parameters. To output data that you can use later, use return at the end of your function. In the visual explanation below, a function can take in inputs (parameters), do some processing, and return an output. function add(x, y) { const sum = x + y console.log(sum) return sum } let result = add(2, 2) result = add(result, -4) console.log(\"The final result is:\", result) . 4 0 The final result is: 0 . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/01/#functions-storing-instructions",
    "relUrl": "/docs/javascript/basics/01/#functions-storing-instructions"
  },"26": {
    "doc": "Variables and Functions",
    "title": "Practice Task: Calculator",
    "content": "Make a calculator that has four functions: add, subtract, multiply, and divide. The functions will each have two parameters and will return the result (sum, difference, product, and quotient). You do not need to console.log within your functions. If your program works with these test cases, you are good to go. // Result: 6 console.log(add(12, -6)) // Result: 6 console.log(subtract(12, 6)) // Result: 0 console.log(multiply(1, 0)) // Result: Infinity console.log(divide(1, 0)) // Result: 12 console.log(add(multiply(3, 3), divide(6, 2))) . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/01/#practice-task-calculator",
    "relUrl": "/docs/javascript/basics/01/#practice-task-calculator"
  },"27": {
    "doc": "Variables and Functions",
    "title": "Variables and Functions",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/01/",
    "relUrl": "/docs/javascript/basics/01/"
  },"28": {
    "doc": "Mobile App Project Setup",
    "title": "Project Setup",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/01/#project-setup",
    "relUrl": "/docs/mobile-apps/01/#project-setup"
  },"29": {
    "doc": "Mobile App Project Setup",
    "title": "Project Needs",
    "content": "Each mobile app project will have these things: . | A manifest, which describes all the components that comprise your app. When the app is installed, the manifest is referenced to ensure that all of the resources are assembled. (AndroidManifest.xml for Android Apps, manifest.json for PWAs). | Pages. In Android Apps, these are called Activities, which are made up of Java and XML files to define the functionality and layout, respectively. In PWAs, HTML, CSS, and JavaScript are used to define the content, layout/style, and functionality respectively. | . ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/01/#project-needs",
    "relUrl": "/docs/mobile-apps/01/#project-needs"
  },"30": {
    "doc": "Mobile App Project Setup",
    "title": "PWA Project Setup",
    "content": "If you don‚Äôt have Visual Studio Code yet, click here. You will also need the latest version of node.js . Start with this code from Mr. Buckley https://github.com/buckldav/pwa-ap. Click ‚ÄúUse This Template‚Äù to make a copy. ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/01/#pwa-project-setup",
    "relUrl": "/docs/mobile-apps/01/#pwa-project-setup"
  },"31": {
    "doc": "Mobile App Project Setup",
    "title": "Android Project Setup",
    "content": "If you don‚Äôt have Android Studio yet, click here to download. Follow the tutorial at https://developer.android.com/training/basics/firstapp. For your new project, start with an Empty Activity: . ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/01/#android-project-setup",
    "relUrl": "/docs/mobile-apps/01/#android-project-setup"
  },"32": {
    "doc": "Mobile App Project Setup",
    "title": "Mobile App Project Setup",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/01/",
    "relUrl": "/docs/mobile-apps/01/"
  },"33": {
    "doc": "What is a Programming Language?",
    "title": "What is a Programming Language?",
    "content": "Programming Languages are human-readable languages that can easily be translated into binary (computer-readable language; 0s and 1s). Here are a few characteristics of programming languages: . | Non-ambiguous. Every keyword in a programming language matches specifically to exactly one string of binary digits. There are no double meanings. | Four functions of a computer: Input, Output, Storage, and Processing are all capabilities of a programming language. | . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/01/",
    "relUrl": "/docs/processing/basics/01/"
  },"34": {
    "doc": "What is a Programming Language?",
    "title": "Pick a Language",
    "content": "Why are there different programming languages? Which one should I choose? . Like the codecademy video above mentioned, each programming language can be thought of as a different tool (hammer, saw, etc.). Some tools are better at certain tasks than others. Here is a table of a few programming languages and what they are primarily used for. | Language | Popular Uses | . | JavaScript | Web and Mobile Apps | . | Python | Web Servers and Data Science | . | Java | Enterprise Software and Android Apps | . | C | Operating and Embedded Systems | . | C++ | Enterprise Software and Game Programming (Unreal Engine) | . | C# | Windows Apps and Game Programming (Unity Engine) | . | Swift | MacOS and iOS Apps | . | SQL | Databases | . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/01/#pick-a-language",
    "relUrl": "/docs/processing/basics/01/#pick-a-language"
  },"35": {
    "doc": "What is a Programming Language?",
    "title": "Getting Started",
    "content": "Integrated Development Environments (IDEs) are text editors that can run your programs. We recommend Replit for an online IDE and Visual Studio Code for a more robust offline editor. Examples in this and other tutorials on this site will be accessible on Replit. It is easy to get started with most languages on Replit and we recommend it as you are trying out a language for the first time. VS Code is among the top editors for professional and amateur developers alike and has many tools that can enhance the development experience. As you build larger projects, VS Code will likely be the way to go. Continue with the ‚ÄúNext‚Äù button below to start coding using Processing. ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/01/#getting-started",
    "relUrl": "/docs/processing/basics/01/#getting-started"
  },"36": {
    "doc": "What are Data Structures?",
    "title": "What are Data Structures?",
    "content": "Data Structures are flexible and robust ways to store data. They are usually built out of several primitive types (e.g. string, number, boolean) and are grouped together in a certain way. ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/01/",
    "relUrl": "/docs/processing/data-structures/01/"
  },"37": {
    "doc": "What are Data Structures?",
    "title": "Arrays",
    "content": "Arrays are the basic collection data type in JavaScript. Arrays are lists of elements. // const can be used for declaring array variables // const is for data that doesn't get reassigned const fruits = [\"apple\", \"banana\", \"orange\"] . ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/01/#arrays",
    "relUrl": "/docs/processing/data-structures/01/#arrays"
  },"38": {
    "doc": "What are Data Structures?",
    "title": "Objects",
    "content": "Objects are a way to group variables and functions together. const banana = { name: \"banana\", calories: 100, vitamins: [\"B6\", \"C\", \"K\"], // you can nest arrays in objects and vice versa hasPeel: true, } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/01/#objects",
    "relUrl": "/docs/processing/data-structures/01/#objects"
  },"39": {
    "doc": "Physics Engine",
    "title": "Write a Platformer Physics Engine",
    "content": "We‚Äôre going to make a basic platforming game with floors and a player. Later, you can add on to the game with enemies, sprites, audio, etc. This lesson is solely to introduce you to some physics and object-oriented programming concepts while creating a platformer physics engine. Here‚Äôs what the game will end up looking like. ",
    "url": "https://cs.dbuckley.dev/docs/python/pyxel/01/#write-a-platformer-physics-engine",
    "relUrl": "/docs/python/pyxel/01/#write-a-platformer-physics-engine"
  },"40": {
    "doc": "Physics Engine",
    "title": "Create an Environment and Platforms",
    "content": "The first thing we are going to do is create some platforms (floors) for the player to land on. Consider what data/functions a floor could be made up of, like its dimensions, color, collision checking, and display (draw): . data: x: float y: float width: float height: float color: int functions: is_colliding_top() draw() . Let‚Äôs make a class for our objects. We‚Äôll call it Box because it can likely be used beyond just floors. The floor can either be filled in or not, depending on if filled is True or False (it has a default value of False). Make a file called engine.py where we can put all of our classes. # engine.py # we'll need these imports later import pyxel from typing import Optional, List, Callable from enum import Enum class Box: def __init__( self, x: float, y: float, w: float, h: float, col: int, filled=False ): self.x = x self.y = y self.w = w self.h = h self.col = col self.filled = filled def draw(self): if self.filled: pyxel.rect(self.x, self.y, self.w, self.h, self.col) else: pyxel.rectb(self.x, self.y, self.w, self.h, self.col) . To instantiate these floors, use this for your starting game code in main.py: . # main.py import pyxel from engine import * SKY_COLOR = 6 PLAYER_COLOR = 8 FLOOR_COLOR = 4 class App: def __init__(self): pyxel.init(400, 300, title=\"Platformer\", quit_key=pyxel.KEY_Q) self.floors = [ Box(0, pyxel.height - 20, pyxel.width, 20, FLOOR_COLOR, filled=True), Box(50, pyxel.height - 100, 40, 20, FLOOR_COLOR, filled=True), ] pyxel.run(self.update, self.draw) def update(self): pass def draw(self): pyxel.cls(SKY_COLOR) for floor in self.floors: floor.draw() App() . Output . On Your Own . Change the colors if you want and dimensions of the floors. Later, we‚Äôll add a camera so that you can make a bigger level. Colors: . ",
    "url": "https://cs.dbuckley.dev/docs/python/pyxel/01/#create-an-environment-and-platforms",
    "relUrl": "/docs/python/pyxel/01/#create-an-environment-and-platforms"
  },"41": {
    "doc": "Physics Engine",
    "title": "Make a Player",
    "content": "Our player will also be a Box, but it needs to have more code that a simple box to detect inputs and move around. We will use the principle of inheritance to extend the Box class in a Player class. # engine.py # imports are here # class Box: class Player(Box): def __init__( self, x: float, y: float, w: float, h: float, col: int, filled=False, keys_move_x_pos: List[int] = [], keys_move_x_neg: List[int] = [], keys_jump: List[int] = [], ): super().__init__(x, y, w, h, col, filled) self.keys_move_x_pos = keys_move_x_pos self.keys_move_x_neg = keys_move_x_neg self.keys_jump = keys_jump . super . Because the Player class inherits from Box, we can call the super() function in the __init__ function. This will call the __init__ function of Player‚Äôs parent (Box). Instantiate Player in Game . The + below show where new code has been added to your existing code. Do not copy the +‚Äôs. # main.py import pyxel from engine import * SKY_COLOR = 6 +PLAYER_COLOR = 8 FLOOR_COLOR = 4 class App: def __init__(self): pyxel.init(400, 300, title=\"Platformer\", quit_key=pyxel.KEY_Q) self.floors = [ Box(0, pyxel.height - 20, pyxel.width, 20, FLOOR_COLOR, filled=True), Box(50, pyxel.height - 100, 40, 20, FLOOR_COLOR, filled=True), ] + self.player = Player( + 20, + 20, + 20, + 20, + PLAYER_COLOR, + filled=True, + keys_move_x_pos=[pyxel.KEY_D, pyxel.KEY_RIGHT], + keys_move_x_neg=[pyxel.KEY_A, pyxel.KEY_LEFT], + keys_jump=[pyxel.KEY_W, pyxel.KEY_SPACE, pyxel.KEY_UP], + ) pyxel.run(self.update, self.draw) def update(self): pass def draw(self): pyxel.cls(SKY_COLOR) for floor in self.floors: floor.draw() + self.player.draw() App() . Output: . ",
    "url": "https://cs.dbuckley.dev/docs/python/pyxel/01/#make-a-player",
    "relUrl": "/docs/python/pyxel/01/#make-a-player"
  },"42": {
    "doc": "Physics Engine",
    "title": "Falling Player and States",
    "content": "To have the Player fall and keep track of if it‚Äôs falling (or jumping, moving, idle, etc.), let‚Äôs introduce a State Machine into our program. You can think of a state machine like a boolean with extra options; instead of true/false, you can have idle/falling/jumping, etc. This is done with an Enum in Python. Here‚Äôs an intro to state machines if you‚Äôre interested in knowing the motivation behind them. # engine.py # imports... class PhysicsStates(Enum): IDLE = 0 FALLING = 1 JUMPING = 2 RUNNING_LEFT = 3 RUNNING_RIGHT = 4 class PhysicsStateMachine: def __init__(self): self.state = PhysicsStates.IDLE # class Box... Physics Class . Now we‚Äôll have a Physics object that can be added to any Box and keep track of if an object is falling or grounded and how fast it is falling. Boxes having a Physics object is optional. You can think of this Physics object like a Rigidbody if you‚Äôve used Unity or other game engine before. # imports... GRAVITY = 0.5 TERMINAL_VELOCITY = 6 PLAYER_SPEED = 6 JUMP_STRENGTH = 10 # class PhysicsStates... # class PhysicsStateMachine... class Physics: def __init__(self): self.dy = 0 self.is_grounded = False self.is_falling = True self.state_machine = PhysicsStateMachine() def ground(self): self.dy = 0 self.is_grounded = True self.is_falling = False def fall(self, is_colliding=False): if self.is_grounded and not self.is_falling: self.ground() if self.dy &gt;= GRAVITY: self.is_grounded = False self.state_machine.state = PhysicsStates.FALLING elif self.dy &lt; 0: self.state_machine.state = PhysicsStates.JUMPING else: self.state_machine.state = PhysicsStates.IDLE if not is_colliding or not self.is_grounded: self.is_falling = True self.dy += GRAVITY if self.dy &gt; TERMINAL_VELOCITY: self.dy = TERMINAL_VELOCITY class Box: def __init__( + self, x: float, y: float, w: float, h: float, col: int, filled=False, phys=False ): self.x = x self.y = y self.w = w self.h = h self.col = col self.filled = filled + self.phys = Physics() if phys else None + def fall(self, collider: Callable[[any], bool]): + if self.phys: + # call the collider to see if the object can fall + self.phys.fall(collider(self)) + self.y += self.phys.dy + # call the collider a second time for knockback + collider(self) def draw(self): + if self.phys: + print(self.phys.state_machine.state) if self.filled: pyxel.rect(self.x, self.y, self.w, self.h, self.col) else: pyxel.rectb(self.x, self.y, self.w, self.h, self.col) . ",
    "url": "https://cs.dbuckley.dev/docs/python/pyxel/01/#falling-player-and-states",
    "relUrl": "/docs/python/pyxel/01/#falling-player-and-states"
  },"43": {
    "doc": "Physics Engine",
    "title": "Make the Player fall in the Game",
    "content": "# main.py def update(self): - pass + for floor in self.floors: + self.player.fall(lambda x: True) . This will cause the player to fall through the floor, because we haven‚Äôt implemented any collision (The lambda x: True is a placeholder function where True enables constant falling). ",
    "url": "https://cs.dbuckley.dev/docs/python/pyxel/01/#make-the-player-fall-in-the-game",
    "relUrl": "/docs/python/pyxel/01/#make-the-player-fall-in-the-game"
  },"44": {
    "doc": "Physics Engine",
    "title": "Collision with the top of the floor",
    "content": "Here‚Äôs the final Box class with a function for checking collision with the top. # engine.py class Box: def __init__( self, x: float, y: float, w: float, h: float, col: int, filled=False, phys=False ): self.x = x self.y = y self.w = w self.h = h self.col = col self.filled = filled self.phys = Physics() if phys else None def is_colliding_top(self, box): if ( (box.y + box.h &gt;= self.y and box.y &lt;= self.y) and box.phys and ( (self.x &lt;= box.x + box.w and self.x + self.w &gt;= box.x + box.w) or (self.x &lt;= box.x and self.x + self.w &gt;= box.x) ) ): if box.phys.dy &gt; 0: # knockback box.phys.ground() box.y = self.y - box.h - GRAVITY return True return False def fall(self, collider: Callable[[any], bool]): if self.phys: # call the collider to see if the object can fall self.phys.fall(collider(self)) self.y += self.phys.dy # call the collider a second time for knockback collider(self) def draw(self): if self.phys: print(self.phys.state_machine.state) if self.filled: pyxel.rect(self.x, self.y, self.w, self.h, self.col) else: pyxel.rectb(self.x, self.y, self.w, self.h, self.col) . Now that our floors have collision checking, we can modify the update function in main.py to use the collision checker. # main.py def update(self): for floor in self.floors: - self.player.fall(lambda x: True) + self.player.fall(floor.is_colliding_top) . ",
    "url": "https://cs.dbuckley.dev/docs/python/pyxel/01/#collision-with-the-top-of-the-floor",
    "relUrl": "/docs/python/pyxel/01/#collision-with-the-top-of-the-floor"
  },"45": {
    "doc": "Physics Engine",
    "title": "Player Movement",
    "content": "Finally, add player movement. Here‚Äôs the final Player class in engine.py. class Player(Box): def __init__( self, x: float, y: float, w: float, h: float, col: int, filled=False, keys_move_x_pos: List[int] = [], keys_move_x_neg: List[int] = [], keys_jump: List[int] = [], ): super().__init__(x, y, w, h, col, filled, True) self.keys_move_x_pos = keys_move_x_pos self.keys_move_x_neg = keys_move_x_neg self.keys_jump = keys_jump def inputs(self): x = self.x for key in self.keys_move_x_pos: # move x positive if pyxel.btn(key): self.x += PLAYER_SPEED break for key in self.keys_move_x_neg: # move x negative if pyxel.btn(key): self.x -= PLAYER_SPEED break for key in self.keys_jump: # jump if pyxel.btnp(key) and self.phys and self.phys.is_grounded: self.phys.is_grounded = False self.phys.dy = -JUMP_STRENGTH break if self.phys.state_machine.state == PhysicsStates.IDLE: if self.x &gt; x: self.phys.state_machine.state = PhysicsStates.RUNNING_RIGHT elif self.x &lt; x: self.phys.state_machine.state = PhysicsStates.RUNNING_LEFT . And here‚Äôs the update function in main.py. It gets the inputs and has the camera follow the player. # main.py def update(self): for floor in self.floors: self.player.fall(floor.is_colliding_top) + self.player.inputs() + pyxel.camera(self.player.x - 50, 0) . Make sure that your Player instantiation has the keybinding you want. # main.py self.player = Player( 20, 20, 20, 20, PLAYER_COLOR, filled=True, keys_move_x_pos=[pyxel.KEY_D, pyxel.KEY_RIGHT], keys_move_x_neg=[pyxel.KEY_A, pyxel.KEY_LEFT], keys_jump=[pyxel.KEY_W, pyxel.KEY_SPACE, pyxel.KEY_UP], ) . ",
    "url": "https://cs.dbuckley.dev/docs/python/pyxel/01/#player-movement",
    "relUrl": "/docs/python/pyxel/01/#player-movement"
  },"46": {
    "doc": "Physics Engine",
    "title": "Final Code",
    "content": "To check your code with final project, visit this: https://github.com/buckldav/pyxel-platformer. ",
    "url": "https://cs.dbuckley.dev/docs/python/pyxel/01/#final-code",
    "relUrl": "/docs/python/pyxel/01/#final-code"
  },"47": {
    "doc": "Physics Engine",
    "title": "Physics Engine",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/python/pyxel/01/",
    "relUrl": "/docs/python/pyxel/01/"
  },"48": {
    "doc": "React State and Props",
    "title": "React State and Props",
    "content": "This lesson will show you how to make a React application and manage the app‚Äôs data. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/01/",
    "relUrl": "/docs/react-js/basics/01/"
  },"49": {
    "doc": "React State and Props",
    "title": "Set Up React App",
    "content": "We will making React Apps using replit‚Äôs React Templates. For local development, here‚Äôs a quick guide on how to create a React app with Vite (the same build tool that replit uses). This is the project‚Äôs src directory, which is the only part of the project that we will concern ourselves with today. Visit App.css and delete everything there so we can add our own markup without it looking odd. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/01/#set-up-react-app",
    "relUrl": "/docs/react-js/basics/01/#set-up-react-app"
  },"50": {
    "doc": "React State and Props",
    "title": "Editing App.jsx and JSX Syntax",
    "content": "When you first open App.jsx in your project, you should see this: . import React from \"react\" import \"./App.css\" function App() { return &lt;main&gt;React‚öõÔ∏è + Vite‚ö° + ReplitüåÄ&lt;/main&gt; } export default App . Components . Let‚Äôs dissect the code. A React component is a class or function which renders a single element of HTML (and it‚Äôs children). Notice how our App function returns a &lt;main&gt; element. This ability to mix HTML and JavaScript together is thanks to the JSX syntax, unique to React. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/01/#editing-appjsx-and-jsx-syntax",
    "relUrl": "/docs/react-js/basics/01/#editing-appjsx-and-jsx-syntax"
  },"51": {
    "doc": "React State and Props",
    "title": "Component State and Props",
    "content": "State . Official Docs . A component can store information in its state. To ‚Äúhook‚Äù this functionality of storing information into a functional React component, we use the React Hook useState. Consider this example below: . import React, { useState } from \"react\" function App() { const [clicks, setClicks] = useState(0) return ( &lt;button onClick={(e) =&gt; setClicks(clicks + 1)}&gt;Clicks: {clicks}&lt;/button&gt; ) } . Clicks: 0 This App component is keeping track of how many times the button was clicked in the clicks state variable. An onClick event handler was bound to the button where the setClicks method was called, updating clicks by adding 1 to the most recent value and setting clicks to the result of that addition. Note that putting {} between tags (&lt;button&gt;Clicks {clicks}&lt;/button&gt;) allows you to render variables as part of an element‚Äôs content easily. Props . Official Docs . Component attributes are called props. Any component or HTML element can be given props in its opening tag. This includes user-defined components. Consider this example: . function HowMany(props) { return ( &lt;p&gt; You have {props.quantity} {props.things}. &lt;/p&gt; ) } function App() { return ( &lt;div&gt; &lt;HowMany things=\"apples\" quantity={3} /&gt; &lt;HowMany things=\"bananas\" quantity={10} /&gt; &lt;/div&gt; ) } . You have 3 apples. You have 10 bananas. In the above example, data was passed from the App component to its children HowMany components. The props were accessed in the HowMany component with the dot operator on the props object (props.quantity). Data Flow with State and Props . Official Docs . State goes in parent components and get passed as props to children components. If a child needs to modify the state of its parent, you need to pass in a function from parent to child that can accomplish that. We‚Äôll dive into this concept more later, but for now, check out this practice task below to see it in action. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/01/#component-state-and-props",
    "relUrl": "/docs/react-js/basics/01/#component-state-and-props"
  },"52": {
    "doc": "React State and Props",
    "title": "Practice Task: User Profile",
    "content": "Here is an app with a faux user profile interface. You can access and fork the starting code here. You will only need to modify App.jsx. If you scroll down, you can see the relevant code that you will be extending. So far, the app keeps track of the user‚Äôs name. In the return block, notice how there is a &lt;UserField&gt; component being used with three props. &lt;UserField field=\"Name\" value={name} editValue={setName} /&gt; . name and setName correspond with the state variable declared at the top of the App component. When you click the ‚ÄúEdit‚Äù button in the UI, the state updates with a new name. function App() { const [name, setName] = useState(\"Your Name Here\"); ... } . Assignment . | Add two more state variables under the name. (2 pts) . | Make the variables have to do with the user (i.e. username, email, age, favoriteColor, etc.) (1 pt) | . | Instantiate two more &lt;UserField&gt; components with the state variable being passed in as props (3 props total, field, value, and editValue). (2 pts) | . Starting Code . Full code: https://replit.com/@buckldav/StateAndProps#src/App.jsx. // App.jsx import React, { useState } from \"react\" import \"./App.css\" function UserField(props) { function buttonClick() { const newValue = window.prompt(\"New \" + props.field) props.editValue(newValue) } return ( &lt;p&gt; {props.field}: {props.value} &lt;button onClick={buttonClick}&gt;Edit&lt;/button&gt; &lt;/p&gt; ) } function App() { const [name, setName] = useState(\"Your Name Here\") // TODO: Add 2 more state variables return ( &lt;main&gt; &lt;UserField field=\"Name\" value={name} editValue={setName} /&gt; {/* TODO: 2 more UserFields */} &lt;/main&gt; ) } export default App . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/01/#practice-task-user-profile",
    "relUrl": "/docs/react-js/basics/01/#practice-task-user-profile"
  },"53": {
    "doc": "Part 1 - Next.js Project Setup",
    "title": "Next.js Blog Tutorial - Part 1",
    "content": "Set up a Next.js project and learn the basics. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/01/#nextjs-blog-tutorial---part-1",
    "relUrl": "/docs/react-js/next-blog-tutorial/01/#nextjs-blog-tutorial---part-1"
  },"54": {
    "doc": "Part 1 - Next.js Project Setup",
    "title": "What is Next.js?",
    "content": "Next.js is a React Framework that provides a positive and guided frontend developer experience. It (along with other React apps) uses jsx to combine JavaScript and HTML together into single files, allowing you to easily reuse code and components (like navigation) across your site. Other cool features include: . | Prefetching pages for faster load times. | Server-side rendering for better search engine optimization (SEO). | File/folder-based routing to make page creation and navigation easy to set up. | . Source: https://nextjs.org/learn/basics/create-nextjs-app. Consider visiting that page for a more in-depth Next.js tutorial after this one. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/01/#what-is-nextjs",
    "relUrl": "/docs/react-js/next-blog-tutorial/01/#what-is-nextjs"
  },"55": {
    "doc": "Part 1 - Next.js Project Setup",
    "title": "Project Scope and Structure",
    "content": "In this series of tutorials, we will take the replit Next.js template and make a simple blog. The goal of this project will be to learn to create reusable components and take advantage of Next‚Äôs SEO tools. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/01/#project-scope-and-structure",
    "relUrl": "/docs/react-js/next-blog-tutorial/01/#project-scope-and-structure"
  },"56": {
    "doc": "Part 1 - Next.js Project Setup",
    "title": "Creating a Project",
    "content": "Visit https://replit.com. Create an account if you haven‚Äôt already. Then, click the blue Create Repl button and select the Next.js Template. When your project is generated, the folder structure will look like this: . pages/ api/ public/ styles/ . Get to Know the Project Folders . public folder . This folder contains static files that need to be served (like the favicon, which can be accessed from /favicon.ico). pages and styles folders . The other folders are pretty self explanatory. pages/ contains each page of your site (one .js file per page). styles/ contains your CSS files. We won‚Äôt be bothering with the .next/ and pages/api/ folders in this project. Just know that the .next/ folder contains the built version of our project. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/01/#creating-a-project",
    "relUrl": "/docs/react-js/next-blog-tutorial/01/#creating-a-project"
  },"57": {
    "doc": "Part 1 - Next.js Project Setup",
    "title": "Pages",
    "content": "Modifying index.js . In Next.js, each page gets its own file. index.js is the page that is loaded when the site is visited with no path in the URL. Open index.js and modify it to only contain the following (you can replace everything with this): . import Head from \"next/head\" import Image from \"next/image\" export default function Home() { return ( &lt;main&gt; &lt;Head&gt; &lt;title&gt;My Next App | Home&lt;/title&gt; &lt;meta name=\"description\" content=\"Generated by create next app\" /&gt; &lt;link rel=\"icon\" href=\"/favicon.ico\" /&gt; &lt;/Head&gt; &lt;h1&gt;Home&lt;/h1&gt; &lt;/main&gt; ) } . What is a component? . A component is a group of HTML and JavaScript in a Next.js app. Sometimes it‚Äôs an entire page (like index.js), sometimes it‚Äôs a section of a page, like a navigation bar. Here‚Äôs the general format of a component: . export default function ComponentName() { // JavaScript Goes Here return &lt;h1&gt;HTML Goes Here&lt;/h1&gt; } . On line 4, you‚Äôll see export default function Home() {, declaring a Home component. Components‚Äô functions are named with PascalCase (in this case Home). You may have noticed the &lt;Head&gt; component. We can put our metadata in here and those tags will be put in the &lt;head&gt; of the HTML document that is generated when we visit this page. Note that components can only return one HTML element (in this case, &lt;main&gt;). The rest must be children of that element. Create about.js . Duplicate the index.js file and call the new file about.js. Make sure the files are at the same directory level. In about.js, change every instance of ‚ÄúHome‚Äù to ‚ÄúAbout‚Äù. Routing . In Next.js, the file names determine the URL paths (known as routes). That means that files in the pages/ directory should follow the kebab-case naming convention. Here‚Äôs what the pages we‚Äôve made look like in the browser. Notice that about.js is accessed from the path /about in the URL. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/01/#pages",
    "relUrl": "/docs/react-js/next-blog-tutorial/01/#pages"
  },"58": {
    "doc": "Part 1 - Next.js Project Setup",
    "title": "App-Wide Layout - Creating a Navigation Component",
    "content": "Let‚Äôs add a navigation bar at the top of each page. We could go to index.js, make our navigation bar, and copy it to about.js, but there is a better way. We will instead create a single ‚ÄúNav‚Äù component that can be reused on each page. Creating Files and Folders . At the root of our directory, add a components/ folder. Within that folder, create a file called Nav.js. In the styles/ folder, match that structure by creating a components/ folder and a Nav.module.css file within that folder. The structure should look like this: . components/ Nav.js pages/ public/ styles/ components/ Nav.module.css globals.css Home.module.css . components/Nav.js . Open components/Nav.js and add the following. Next.js uses its own special &lt;Link&gt; component instead of &lt;a&gt; tags for relative links (links within the site, see here for more). import Link from \"next/link\" import styles from \"../styles/components/Nav.module.css\" export default function Nav() { return ( &lt;nav className={styles.nav}&gt; &lt;Link href=\"/\"&gt;Home&lt;/Link&gt; &lt;Link href=\"/about\"&gt;About&lt;/Link&gt; &lt;/nav&gt; ) } . Also, notice the ../ in the line where styles are being imported. This means go up a folder. The ../ works when navigating any filesystem, not just repl‚Äôs. CSS Modules . CSS modules allow you to add component-specific CSS Classes. Let‚Äôs create a .nav class and add some basic styles to our styles/components/Nav.module.css file: .nav { display: flex; flex-direction: row; } .nav a { display: inline-block; color: #0070f3; padding: 1em; } . The CSS module can be imported as a JavaScript object and the class can be accessed with the . operator. (This code already exists for you in Nav.js, so you don‚Äôt need to change anything). // In components/Nav.js import styles from \"../styles/components/Nav.module.css\" ... &lt;nav className={styles.nav}&gt; . _app.js . So far, we have ignored pages/_app.js. All we need to know at this point is that this is the file that loads the current page as its Component. We can add our Nav component here to ensure that it appears on every page at the top. import Nav from \"../components/Nav.js\" import \"../styles/globals.css\" function MyApp({ Component, pageProps }) { return ( &lt;&gt; &lt;Nav /&gt; &lt;Component {...pageProps} /&gt; &lt;/&gt; ) } export default MyApp . You may notice the thing that looks like an empty tag (&lt;&gt;). This is a React Fragment, and is used because a function can only return a single element. Therefore, a Fragment is used to wrap the components in an ‚Äúempty element‚Äù. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/01/#app-wide-layout---creating-a-navigation-component",
    "relUrl": "/docs/react-js/next-blog-tutorial/01/#app-wide-layout---creating-a-navigation-component"
  },"59": {
    "doc": "Part 1 - Next.js Project Setup",
    "title": "Result",
    "content": "Now, your pages should look like this: . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/01/#result",
    "relUrl": "/docs/react-js/next-blog-tutorial/01/#result"
  },"60": {
    "doc": "Part 1 - Next.js Project Setup",
    "title": "Conclusion",
    "content": "Next.js is a great tool to create frontend applications. It allows you to organize your code and reuse layouts across different pages. Finished code: https://replit.com/@buckldav/next-tut-1. Learning Targets . Standard 2.2 . | File structure and naming. | . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/01/#conclusion",
    "relUrl": "/docs/react-js/next-blog-tutorial/01/#conclusion"
  },"61": {
    "doc": "Part 1 - Next.js Project Setup",
    "title": "Part 1 - Next.js Project Setup",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/01/",
    "relUrl": "/docs/react-js/next-blog-tutorial/01/"
  },"62": {
    "doc": "Creating a Unity Project",
    "title": "Unity 2D: Getting Started",
    "content": "Unity is one of the most popular game engines, especially among indie developers. You‚Äôll need to install a few things to get going: . | Unity Hub: Manages Unity versions, projects, and tutorials. Download here. | Unity Editor: Download editors via Unity Hub. I recommend using whatever version is LTS (Long-Term Support). | Visual Studio: For editing C#. Visual Studio Code is a lightweight text editor while Visual Studio is a heavyweight C# application maker. I use Visual Studio Code myself with the C# extension. | . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/01/#unity-2d-getting-started",
    "relUrl": "/docs/unity-and-cs/platformer-basics/01/#unity-2d-getting-started"
  },"63": {
    "doc": "Creating a Unity Project",
    "title": "Creating a 2D Project",
    "content": "Once you have everything downloaded, in Unity Hub‚Äôs Project tab select ‚ÄúNew Project‚Äù. That will take you to the screen below where you can select ‚Äú2D‚Äù, name your project, and choose what folder it will be made in. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/01/#creating-a-2d-project",
    "relUrl": "/docs/unity-and-cs/platformer-basics/01/#creating-a-2d-project"
  },"64": {
    "doc": "Creating a Unity Project",
    "title": "Scope of Project",
    "content": "This tutorial alone will not show you how to make a releasable game. Rather, you will learn the basics of how a Unity Project (specifically a platformer) works. Here‚Äôs what you will learn: . | GameObjects . | Making a player | Using a Rigidbody to add physics | Making a level with a Tilemap | Implementing collision | . | Scripts . | Physics and player control | . | . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/01/#scope-of-project",
    "relUrl": "/docs/unity-and-cs/platformer-basics/01/#scope-of-project"
  },"65": {
    "doc": "Creating a Unity Project",
    "title": "Creating a Unity Project",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/01/",
    "relUrl": "/docs/unity-and-cs/platformer-basics/01/"
  },"66": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/state-machines/01/",
    "relUrl": "/docs/unity-and-cs/state-machines/01/"
  },"67": {
    "doc": "Getting Started",
    "title": "Set up Git repository and clone project",
    "content": "Once logged in to GitHub, go to the repository at https://github.com/buckldav/unity-state-machine. Click on the ‚ÄúUse this template‚Äù ‚Üí ‚ÄúCreate a new repository‚Äù. Then, name your repository and click ‚ÄúCreate repository from template‚Äù. Finally, clone the repository with your preferred method. We recommend using either: . | git clone in a Git Bash terminal or | ‚ÄúOpen with GitHub Desktop‚Äù | . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/state-machines/01/#set-up-git-repository-and-clone-project",
    "relUrl": "/docs/unity-and-cs/state-machines/01/#set-up-git-repository-and-clone-project"
  },"68": {
    "doc": "Getting Started",
    "title": "Open project",
    "content": "Go to Unity Hub and click ‚ÄúOpen‚Äù to open the cloned project. Then, navigate in your filesystem to the folder where the project is located (in the picture below, the folder name is unity-state-machine-finished), select the folder, and click ‚ÄúOpen‚Äù. Open Scenes/SampleScene to ssee the game scene. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/state-machines/01/#open-project",
    "relUrl": "/docs/unity-and-cs/state-machines/01/#open-project"
  },"69": {
    "doc": "Getting Started",
    "title": "Explore files and GameObjects",
    "content": "The following features are already implemented: . | A Player GameObject with these states: Falling, Moving, and Jumping. Arrow keys enable movement (Left, Right, and Up). | Two Tilemaps, one for Ground (enables the Jumping state) and one for Walls (cannot be jumped off of). | A Enemy. When the Player collides with an Enemy, the Player respawns. | . The Player Controller and State Machine . In Scripts/PlayerController.cs, there is an enum that contains 3 different player states. The player starts in the falling state. enum PlayerState { Moving, Jumping, Falling, } private PlayerState currentState = PlayerState.Falling; . Here is a diagram that outlines the possible transitions between states. Take some time to read through the code and play the game to see when the states change. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/state-machines/01/#explore-files-and-gameobjects",
    "relUrl": "/docs/unity-and-cs/state-machines/01/#explore-files-and-gameobjects"
  },"70": {
    "doc": "Project Setup and Folders",
    "title": "Project Setup and Folders",
    "content": "Now that we are making a slightly larger project than our one-level platformer, we need to enhance the way we approach organizing our assets and writing our code. Create a new 2D Project via Unity Hub and open it in the Unity Editor. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/01/",
    "relUrl": "/docs/unity-and-cs/top-down-game/01/"
  },"71": {
    "doc": "Project Setup and Folders",
    "title": "Visual Studio Code Configuration",
    "content": "In our platformer project, we used Visual Studio Code to write our scripts. This time, we will install some VS Code extensions to enable IntelliSense (code completion) and manage our scripts better. Link to VS Code/Unity configuration . Video Tutorial . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/01/#visual-studio-code-configuration",
    "relUrl": "/docs/unity-and-cs/top-down-game/01/#visual-studio-code-configuration"
  },"72": {
    "doc": "Project Setup and Folders",
    "title": "Asset Folders",
    "content": "We will want to have a folder structure like this for our project: . You can create these folders manually or leverage the VS Code tools we just installed: . 1. Open the C# Project . Right-click in the Assets window and select Open C# Project. This will open VS Code. 2. VS Code + Unity Tools Extension . In VS Code, use Ctrl+Shift+P to open the Command Palette. Type in ‚Äúunity‚Äù and select ‚ÄúUnity Tools: Generate Organizational Folders‚Äù. Select the current workspace when prompted. This will generate these folders with your Assets folder: Audio, Materials, Prefabs, Scripts, and Scenes. . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/01/#asset-folders",
    "relUrl": "/docs/unity-and-cs/top-down-game/01/#asset-folders"
  },"73": {
    "doc": "Project Setup and Folders",
    "title": "Organize Assets Yourself",
    "content": "As we go through the project, put Scripts in the Scripts/ folder, Scenes in the Scenes/ folder, etc. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/01/#organize-assets-yourself",
    "relUrl": "/docs/unity-and-cs/top-down-game/01/#organize-assets-yourself"
  },"74": {
    "doc": "Replit and Markdown",
    "title": "Replit and Markdown",
    "content": "Coders are writers of code and technical documentation. They need to be able to share content and communicate quickly. These tools will help you do that. | Replit is a popular online Integrated Development Environment, where you can write, store, execute, and share programs. Think of it like Google Drive for developers, with some extra CS-specific features. | Markdown is the language for writing documentation and other CS-related content. This page was written in Markdown! | . We will dive into Markdown first, which we will use to provide README.md files (containing instructions for usage and descriptions of functionality) to our code projects. ",
    "url": "https://cs.dbuckley.dev/docs/git/markdown/02/",
    "relUrl": "/docs/git/markdown/02/"
  },"75": {
    "doc": "Replit and Markdown",
    "title": "Markdown",
    "content": "With Markdown, you can format plain text to look like headings, links, images, and more! . Show Markdown Example # Heading 1 ## Heading 2 ... ##### Heading 5 ###### Heading 6 This is a paragraph. [link text](https://example.com) ![image alt text](https://linktoimage.png) - Bulleted list 1 - Bulleted list 2 1. Numbered list 1 2. Numbered list 2 . Show Example Output ",
    "url": "https://cs.dbuckley.dev/docs/git/markdown/02/#markdown",
    "relUrl": "/docs/git/markdown/02/#markdown"
  },"76": {
    "doc": "Replit and Markdown",
    "title": "Heading 1",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/git/markdown/02/#heading-1",
    "relUrl": "/docs/git/markdown/02/#heading-1"
  },"77": {
    "doc": "Replit and Markdown",
    "title": "Heading 2",
    "content": "‚Ä¶ . Heading 5 . Heading 6 . This is a paragraph. link text . | Bulleted list 1 | Bulleted list 2 | . | Numbered list 1 | Numbered list 2 | . Try Markdown Yourself . | Markdown Cheat Sheet | Online Markdown Editor | . ",
    "url": "https://cs.dbuckley.dev/docs/git/markdown/02/#heading-2",
    "relUrl": "/docs/git/markdown/02/#heading-2"
  },"78": {
    "doc": "Replit and Markdown",
    "title": "Replit",
    "content": "If you haven‚Äôt already, create an account on replit.com. Use the ‚ÄúSign-In With Google‚Äù authentication option. Create Your First Markdown Repl . REPL is actually an acronym for Read-Eval-Print-Loop, which means it‚Äôs an enviroment for running programs. Find the blue ‚ÄúCreate‚Äù button in the left sidebar and click it to create repl. In the ‚ÄúTemplate‚Äù field, type in Markdown and select the ‚ÄúMarkdown‚Äù template. Then, name your project profile in the ‚ÄúTitle‚Äù field. Then click ‚ÄúCreate Repl‚Äù. You can then Edit the README.md file by selecting it from the Files panel on the left. Any changes you make can can viewed by clicking Open Preview. Resources . | üöÄ Add some colored emojis from Emojipedia | üìÉ Here‚Äôs that Markdown cheat sheet again | . Mr. Buckley‚Äôs README.md . ",
    "url": "https://cs.dbuckley.dev/docs/git/markdown/02/#replit",
    "relUrl": "/docs/git/markdown/02/#replit"
  },"79": {
    "doc": "GitHub Projects",
    "title": "GitHub Projects",
    "content": "GitHub project boards can be used to plan and keep track of tasks (also known as ‚ÄúIssues‚Äù) for individuals and teams. Projects can be linked to GitHub repositories to enahnce your workflow or stand alone. 1. Create a Project . Go to https://github.com/new/project. Create a ‚ÄúPublic‚Äù project with the ‚ÄúBasic kanban‚Äù template. You can link a repository as well if your final project is in GitHub. 2. Add and Move Cards . You should have three columns; To do, In progress, and Done. You can can add cards and move them from column to column as they get completed. 3. Add Collaborators (for Group Projects) . Click on the Menu icon on the right. Click on the 3 dots menu and select ‚ÄúSettings‚Äù. Find the ‚ÄúCollaborators‚Äù tab and then add your team members by email or GitHub username. ",
    "url": "https://cs.dbuckley.dev/docs/git/02/",
    "relUrl": "/docs/git/02/"
  },"80": {
    "doc": "Using Loops to Create Shapes",
    "title": "Using Loops to Create Shapes",
    "content": "To create a square, you have repeated some lines of code. This is not the most efficent way of doing it. Instead of typing out many lines of code, it‚Äôs easier to use a loop. Instead of code to create a square like this: . elsa.forward(100) elsa.right(90) elsa.forward(100) elsa.right(90) elsa.forward(100) elsa.right(90) elsa.forward(100) . You can type: . for i in range(4): elsa.forward(100) elsa.right(90) . Try it yourself, and see what happens when you save and run your code. ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtle-snowflakes/02/",
    "relUrl": "/docs/java-greenfoot/turtle-snowflakes/02/"
  },"81": {
    "doc": "Setup",
    "title": "Setup",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/02/",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/02/"
  },"82": {
    "doc": "Setup",
    "title": "Is it Art, Math, or Computer Science?",
    "content": "Have a look at the image below. How would you describe it? Is is art, math, or computer science? . It‚Äôs a computer-generated image, but making it requires an understanding of art, maths, and computer science. Let‚Äôs see how you too can make images just like this. ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/02/#is-it-art-math-or-computer-science",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/02/#is-it-art-math-or-computer-science"
  },"83": {
    "doc": "Setup",
    "title": "Download Greenfoot",
    "content": "To download the Greenfoot Java IDE, visit https://greenfoot.org/downloads and the select the appropriate package for your operating system. Greenfoot is already installed on Raspberry Pis if you happen to be using one, and can be accessed from the Programming menu. ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/02/#download-greenfoot",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/02/#download-greenfoot"
  },"84": {
    "doc": "Setup",
    "title": "Set Up Scenario",
    "content": "A Scenario is a Greenfoot project. To create one, click on the ‚ÄúScenario‚Äù tab and select ‚ÄúNew Scenario‚Äù. Name it turtley-amazing. You will see the World and Actor classes on the right. The World is the environment and Actors are objects that we can place in the environment. Create an Actor . We will create a child of the Actor class that can move around the screen and draw our pictures. Right click the Actor class and select New subclass. Name the class Turtle and for its image, select animals and find the tiny turtle picture. Then, click OK. This will create the Turtle class where we will put all of our code. When back on the Scenario, you should see our Turtle class inheriting from the Actor class. Right-click the Turtle class and select Open editor to open the code for editing. ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/02/#set-up-scenario",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/02/#set-up-scenario"
  },"85": {
    "doc": "Setup",
    "title": "Move the Turtle",
    "content": "In the code, you will see an act() method. This method is called (executed) every time you press the &gt; Act button on the main interface. We can use the move() method to move our Turtle across the screen like so (modify the act() method to include move()): . public void act() { // Add your action code here move(10); } . Your code will look something like this. Hit the compile button at the top of the screen to translate the Java into bytecode that the Greenfoot environment can execute. Then you can return to the main interface (the scenario) and do these two things to run your code: . | Instantiate a Turtle object (create an object from the Turtle class and put it in the World). Right-click on the Turtle class and select new Turtle(). Then click in the World where you want to place it. | Click &gt; Act to see the Turtle move 10 pixels, just as our code instructed it to. | . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/02/#move-the-turtle",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/02/#move-the-turtle"
  },"86": {
    "doc": "Data Types and Objects",
    "title": "Data Types",
    "content": "All data is represented as 0s and 1s in a computer. A sequence of 0s and 1s could represent an instruction, a number, some text, etc. This is where data types come into play, they allow the programmer to indicate what kind of data they want to represent. In JavaScript, there are a few basic data types: . | Data Type | Examples | Description | . | number | 5, -1, Infinity, 3.1415 | Any numeric quantity | . | string | \"A\", \"Hello World\", \"3\" | Any plain text within double or single quotes (\"\" or ''). | . | boolean | true, false | Often the result of a logical expression (e.g. x &lt; 5). | . Data types are inferred when you create variables. For example, in the statement let age = 15, age becomes a variable of type number because the number literal 15 was assigned to age. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/02/#data-types",
    "relUrl": "/docs/javascript/basics/02/#data-types"
  },"87": {
    "doc": "Data Types and Objects",
    "title": "Objects: A Group of Variables and Functions",
    "content": "Objects are more complex data types. They may have multiple variables and functions stored together in a group. Here‚Äôs a simple example of a object representation of a Pokemon with HP and one attack: . const pikachu = { hp: 40, spark: function (opponent) { const sparkDamage = 10 opponent.hp = opponent.hp - sparkDamage }, } . If we add another Pokemon, you can see how the objects can interact with each other. Try running the code yourself by putting it in a &lt;script&gt; element or pasting it in a browser‚Äôs developer console. // Remember, we can use const because we are only assigning // data to a variable once. const pikachu = { hp: 40, spark: function (opponent) { const damage = 10 opponent.hp = opponent.hp - damage }, } const bulbasaur = { hp: 40, tackle: function (opponent) { const damage = 10 opponent.hp = opponent.hp - damage }, } pikachu.spark(bulbasaur) // 30 console.log(bulbasaur.hp) . Let‚Äôs break down the code. | A variable that is a member of an object is called an field. | A function that is a member of an object is called a method. | To access fields and methods of an object, use the . operator. You‚Äôve already been doing this! | . // Accessing the spark method of the pikachu object pikachu.spark() // Accessing the hp field of the bulbasaur object bulbasaur.hp // Accessing the log method of the console object console.log() . | Creating an object is called instantiation. We were using an instance of the pikachu object, etc. | This way of defining an object is called JSON: JavaScript Object Notation. | . // Creating an instance of the pikachu object. // JSON starts and ends with curly braces {}. // Each field and method is defined with its name followed by a colon, the data, and a comma. const bulbasaur = { hp: 40, tackle: function (opponent) { const damage = 10 opponent.hp = opponent.hp - damage }, } . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/02/#objects-a-group-of-variables-and-functions",
    "relUrl": "/docs/javascript/basics/02/#objects-a-group-of-variables-and-functions"
  },"88": {
    "doc": "Data Types and Objects",
    "title": "The Math object",
    "content": "There are lots of built-in objects in JavaScript and the Math object is one of these. Here are some of its fields and methods (full list here). | Property | Description | . | Math.E | The constant &amp;ee;, approx. 2.718 | . | Math.PI | The constant œÄ, approx. 3.14159 | . | Math.pow(x, y) | Calculates x to the power y (xy) | . | Math.random() | Produces a random decimal number from 0 to 1 | . We‚Äôre going to use the Math.random() function to generate random numbers of different ranges in the practice task below, so let‚Äôs walk through how to do that. const zeroToOne = Math.random() const zeroToTen = zeroToOne * 10 const negFiveToFive = zeroToTen - 5 // Here's a one-liner to generate a number from -5 to 5. console.log(Math.random() * 10 - 5) // What is the range of this? console.log(Math.random() * 10 + 5) . The next section in this tutorial is about more of these built-in objects; for a full list, click here and here. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/02/#the-math-object",
    "relUrl": "/docs/javascript/basics/02/#the-math-object"
  },"89": {
    "doc": "Data Types and Objects",
    "title": "Practice Task: RPG Game Simulation",
    "content": "Be sure to get the starter JavaScript code from the bottom of the page. | Create two characters (Pokemon or otherwise) that each have an hp field, a speed field, and attack method. | The hp fields should be numbers. | The speeds should be numbers that are different for each player. The speeds determine who goes first. | The attack method should lower the other player‚Äôs hp by a random amount. It should also log a message to the console indicating which player is attacking which. | Every time you refresh the page with your code, Player 1 or Player 2 will randomly win. | . const player1 = { // TODO } const player2 = { // TODO } // This logic will run your game. // No need to modify anything below. while (player1.hp &gt; 0 &amp;&amp; player2.hp &gt; 0) { if (player1.speed &gt; player2.speed) { player1.attack(player2) player2.attack(player1) } else { player2.attack(player1) player1.attack(player2) } } if (player1.hp &lt;= 0) { console.log(\"Player 2 wins!\") } else { console.log(\"Player 1 wins!\") } . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/02/#practice-task-rpg-game-simulation",
    "relUrl": "/docs/javascript/basics/02/#practice-task-rpg-game-simulation"
  },"90": {
    "doc": "Data Types and Objects",
    "title": "Data Types and Objects",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/02/",
    "relUrl": "/docs/javascript/basics/02/"
  },"91": {
    "doc": "Markup Languages",
    "title": "Markup Languages",
    "content": "A lot of the information here is gleaned from this talk of the History of Markup Languages by Tony Ibbs and his slides. ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/02/",
    "relUrl": "/docs/mobile-apps/02/"
  },"92": {
    "doc": "Markup Languages",
    "title": "Introduction: Why We Need Markup Languages",
    "content": ". | Presentational use: Define how text should look. | Semantic use: Define the meaning of the text. | . ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/02/#introduction-why-we-need-markup-languages",
    "relUrl": "/docs/mobile-apps/02/#introduction-why-we-need-markup-languages"
  },"93": {
    "doc": "Markup Languages",
    "title": "Early Markup Languages",
    "content": "RUNOFF (1964) . Capable of pagination, alignment, abbreviation, etc. Used on IBM machines for documents and machine to machine messages. Example (source: Wikipedia): . When you're ready to order, call us at our toll free number: .BR .CENTER 1-800-555-xxxx .BR Your order will be processed within two working days and shipped . Render: . When you're ready to order, call us at our toll free number: 1-800-555-xxxx Your order will be processed within two working days and shipped . roff, nroff, troff, groff (1970s) . Evolved from RUNOFF. These variants can be used on terminals, typesetters, and other devices. Has macros. TeX (1978) and LaTeX (1983) . Donald Knuth was a computer scientist at Stanford who was sick of the current system for formatting his equations and paragraphs on his articles and books, so he made his own system called TeX. Example (source: Wikipedia): . The quadratic formula is $-b \\pm \\sqrt{b^2 - 4ac} \\over 2a$ \\bye . LaTeX, a superset of TeX developed by Leslie Lamport, is still used today in academia for typesetting scientific documents. ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/02/#early-markup-languages",
    "relUrl": "/docs/mobile-apps/02/#early-markup-languages"
  },"94": {
    "doc": "Markup Languages",
    "title": "The Introduction of Tags",
    "content": "(Standard) Generalized Markup Language (GML 1969, SGML 1986) . Also developed at IBM. In this language, you had a Document Type Definition (DTD) which declares the type of tags and what those tags require. Then you use those tags to structure the content. GML did not require closing tags all the time, it depended on the DTD. Example (source: Wikipedia): . &lt;!ELEMENT chapter - - (title, section+)&gt; &lt;!ELEMENT title o o (#PCDATA)&gt; &lt;!ELEMENT section - - (title, subsection+)&gt; &lt;chapter&gt;&lt;title&gt;Introduction to SGML&lt;/title&gt; &lt;section&gt;&lt;title&gt;The SGML Declaration&lt;/title&gt; &lt;subsection&gt; ... TEI (1987) . A purely semantic language, used largely for marking up prose and other poetic texts. Example (source: Wikipedia): . &lt;div type=\"sonnet\"&gt; &lt;lg type=\"quatrain\"&gt; &lt;l&gt;Les amoureux fervents et les savants aust√®res&lt;/l&gt; &lt;l&gt; Aiment √©galement, dans leur m√ªre saison,&lt;/l&gt; &lt;l&gt; Les chats puissants et doux, orgueil de la maison,&lt;/l&gt; &lt;l&gt; Qui comme eux sont frileux et comme eux s√©dentaires.&lt;/l&gt; &lt;/lg&gt; ... &lt;/div&gt; . HyperText Markup Language (HTML, 1991) . Evolved from SGML. Invented by Tim Berners-Lee at CERN as he was developing the World Wide Web. Instead of having the user define the DTD, HTML came with its own specifications, of which HTML5 is the standard used today on the web. Example (source: Wikipedia): . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;This is a title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;p&gt;Hello world!&lt;/p&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . DocBook (1991) . Another child of SGML. Originally used by the military and other technical institutions, it is still in use today because of its portability to other document types. The latest version uses XML (see below) as its foundation. Example (source: Wikipedia): . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;book xml:id=\"simple_book\" xmlns=\"http://docbook.org/ns/docbook\" version=\"5.0\"&gt; &lt;title&gt;Very simple book&lt;/title&gt; &lt;chapter xml:id=\"chapter_1\"&gt; &lt;title&gt;Chapter 1&lt;/title&gt; &lt;para&gt;Hello world!&lt;/para&gt; &lt;para&gt;I hope that your day is proceeding &lt;emphasis&gt;splendidly&lt;/emphasis&gt;!&lt;/para&gt; &lt;/chapter&gt; &lt;chapter xml:id=\"chapter_2\"&gt; &lt;title&gt;Chapter 2&lt;/title&gt; &lt;para&gt;Hello again, world!&lt;/para&gt; &lt;/chapter&gt; &lt;/book&gt; . Extensible Markup Language (XML, 1996) . ‚ÄúThe main purpose of XML is serialization, i.e. storing, transmitting, and reconstructing arbitrary data. For two disparate systems to exchange information, they need to agree upon a file format. XML standardizes this process. XML is analogous to a lingua franca for representing information.‚Äù (Wikipedia) . XML has replaced SGML. It can be used to define specific markup syntax for any user interface or document. Like the quote above mentions, it can also be used to structure data like JSON and send that data over HTTP (or other protocols) from application to application. There are many variants of XML (like DocBook), as XML supports DTD to define markup. Here are a few examples of documents/user interfaces that use variants of XML. | Android and iOS Apps | Windows Platform Apps (XAML) | Microsoft Office | Google Suite | . ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/02/#the-introduction-of-tags",
    "relUrl": "/docs/mobile-apps/02/#the-introduction-of-tags"
  },"95": {
    "doc": "Markup Languages",
    "title": "The Anti-Tag Movement",
    "content": "setext (1991) . A markup language originally for newsletters and Macintosh programs, then also for emails and other communications. Example (source: Wikipedia): . Title ===== Body text is indented 2 spaces **Bold Words** _Underlined_words_ `Backquoted words` are comments * Bulleted list . WikiWikiWeb (1995) . The first wiki, very simple, meant to support limited features like bold, italic, and lists. Example (source: Wikipedia): . * List Item ** Nested List Item This text is '''bold'''. reStructuredText and AsciiDoc (2002) . These are similar languages built with the intent to be easily readable without getting bogged down in tags. reStructuredText was invented to document Python, and AsciiDoc was invented as a terse analog to DocBook. Markdown (2004) . Markdown is John Gruber‚Äôs attempt at a way to write HTML more easily. Has lots of flavors/dialects (i.e. GitHub-flavored Markdown for documenting GitHub repositories, Jekyll Markdown was used to write this page, Discord, Reddit, etc.). Many flavors support HTML tags alongside Markdown syntax. Markdown is processed into HTML and then that HTML can be rendered. Example (source: Wikipedia) . Heading ======= Sub-heading ----------- # Alternative heading # Paragraphs are separated by a blank line. Two spaces at the end of a line produce a line break. Text attributes _italic_, **bold**, `monospace`. Horizontal rule: --- Bullet lists nested within numbered list: 1. fruits * apple * banana 2. vegetables - carrot - broccoli . ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/02/#the-anti-tag-movement",
    "relUrl": "/docs/mobile-apps/02/#the-anti-tag-movement"
  },"96": {
    "doc": "Markup Languages",
    "title": "Conclusion",
    "content": "As a developer, you‚Äôll probably only need to focus on these three: . | HTML for web-based interfaces | XML for other non-web interfaces or data serialization | Markdown for writing documentation | . Good luck! . ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/02/#conclusion",
    "relUrl": "/docs/mobile-apps/02/#conclusion"
  },"97": {
    "doc": "First Processing Program",
    "title": "Your First Processing Program: Drawing App",
    "content": "In this lesson, you will learn how to: . | Use variables to store and access data. | Use functions to store and execute instructions. | Use comments to add notes to your code. | . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/02/#your-first-processing-program-drawing-app",
    "relUrl": "/docs/processing/basics/02/#your-first-processing-program-drawing-app"
  },"98": {
    "doc": "First Processing Program",
    "title": "Getting Started",
    "content": "Visit and fork https://replit.com/@buckldav/DrawingAppStarter to get started. Below is a preview of the drawing app starter. Click and drag the mouse to draw using a red brush. ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/02/#getting-started",
    "relUrl": "/docs/processing/basics/02/#getting-started"
  },"99": {
    "doc": "First Processing Program",
    "title": "Variables: Storing Data",
    "content": "A variable is a label for stored data. Data could be text, numbers, or more complex objects like HTML elements. Creating Variables with let . To make a variable, start the statement (line of code) with the keyword let, followed by a variable name. Then assign a value to the variable by using the assignment operator (=). Let‚Äôs create two variables at the top of our program. fillColor will store the color that we‚Äôre using to fill our ellipse and brushSize will store the size of the brush. // This is a comment (words for the humans, not the computer). // Here are our variable declarations. let fillColor = \"red\" let brushSize = 25 function setup() { createCanvas(windowWidth, windowHeight) background(255) } function draw() { noStroke() // Use the fillColor variable here. fill(fillColor) if (mouseIsPressed) { // Use the brushSize variable here. ellipse(mouseX, mouseY, brushSize, brushSize) } } . Naming Variables: camelCase . Variables and other identifiers cannot have spaces or symbols in them. Therefore, naming conventions like camelCase are used for names that contain multiple words. Name the variable all lowercase, except for the first letter of each word (not counting the first). Example: aReallyLongVariableName. Visualizing Variables: Boxes . You can think of variables like labels on boxes in your computer‚Äôs memory. In the below version of the drawing app, each of the variables (including the built-in mouseIsPressed, mouseX, and mouseY variables) are shown on the canvas with their current value displayed in a box. Challenge . Visit Google‚Äôs Color Picker and copy a HEX code. Try storing it in your fillColor variable. Put quotes around the HEX string (e.g. \"#8634eb\"). ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/02/#variables-storing-data",
    "relUrl": "/docs/processing/basics/02/#variables-storing-data"
  },"100": {
    "doc": "First Processing Program",
    "title": "Functions: Storing Instructions",
    "content": "A function is a label for a group of instructions. We‚Äôve already used a several functions in this lesson; setup(), draw(), fill(color), ellipse(x, y, width, height) etc. A function has a name, ends with (), and can take in 0 or more parameters (inputs) within those parentheses. zeroParameters() oneParameter(p1) twoParameters(p1, p2) ... Defining Functions . Here is an example that defines a function that adds two numbers together and prints them. function add(x, y) { let sum = x + y console.log(sum) } . Calling Functions . Once you have defined the function, you can call (use) it as many times as you‚Äôd like. Each time you call the function, the instructions defined between the {} are executed. add(2, 2) add(3, 4) add(-1, -2) . 4 7 -3 . Outputting From Functions: return . We previously established that you can input data into functions with parameters. To output data that you can use later, use return at the end of your function. In the visual explanation below, a function can take in inputs (parameters), do some processing, and return an output. function add(x, y) { const sum = x + y console.log(sum) return sum } let result = add(2, 2) result = add(result, -4) console.log(\"The final result is:\", result) . 4 0 The final result is: 0 . Processing‚Äôs Functions . Processing has a few built-in functions. | setup() gets called once when the program starts. | draw() gets called every frame. By default the program runs at 30 frames per second. | keyPressed() gets called when a key is pressed. We‚Äôre going to add it to our program to enable us to change the brush color and size with the keyboard. | . // setup() and draw() functions here function keyPressed() { // Change color if (key === \"r\") { fillColor = \"red\" } else if (key === \"g\") { fillColor = \"green\" } else if (key === \"b\") { fillColor = \"blue\" } // Add some more colors yourself // Change brush size if (key === \"=\") { brushSize += 1 } else if (key === \"-\") { brushSize -= 1 } } . Challenge . Add more colors to your palette by adding more else if statements to your keyPressed() function definition. ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/02/#functions-storing-instructions",
    "relUrl": "/docs/processing/basics/02/#functions-storing-instructions"
  },"101": {
    "doc": "First Processing Program",
    "title": "Comments: Document Your Code",
    "content": "Comments are notes for the people reading the code. They are any line that begins with two slashes //. The computer does not read them when it executes the program. Comments are important so that when you read code for the first time or revisit code, you can quickly understand what it does. Challenge . Typically, a few comments per function are sufficient, but as an exercise, go through your entire program and comment each line. Example: . // Store \"red\" as the initial value of fillColor let fillColor = \"red\" // Store 25 as the initial brushSize let brushSize = 25 // etc. ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/02/#comments-document-your-code",
    "relUrl": "/docs/processing/basics/02/#comments-document-your-code"
  },"102": {
    "doc": "First Processing Program",
    "title": "Finished Code",
    "content": "Here‚Äôs a link to the final code (minus comments). ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/02/#finished-code",
    "relUrl": "/docs/processing/basics/02/#finished-code"
  },"103": {
    "doc": "First Processing Program",
    "title": "First Processing Program",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/02/",
    "relUrl": "/docs/processing/basics/02/"
  },"104": {
    "doc": "Pokemon Information Science",
    "title": "Pokemon Information Science",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/02/",
    "relUrl": "/docs/processing/data-structures/02/"
  },"105": {
    "doc": "Pokemon Information Science",
    "title": "What is Information Science?",
    "content": "Image Source: UA Little Rock . Information science (also known as information studies) is an academic field which is primarily concerned with analysis, collection, classification, manipulation, storage, retrieval, movement, dissemination, and protection of information. (Wikipedia) . ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/02/#what-is-information-science",
    "relUrl": "/docs/processing/data-structures/02/#what-is-information-science"
  },"106": {
    "doc": "Pokemon Information Science",
    "title": "How are Databases Accessed?",
    "content": "Databases are accessed via services called APIs (Application Programming Interfaces). Image Source: Medium . An API allows clients (like web apps) to access data by sending requests to URLs over HTTP (an internet connection). A collection of free APIs can be found at https://github.com/public-apis/public-apis. ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/02/#how-are-databases-accessed",
    "relUrl": "/docs/processing/data-structures/02/#how-are-databases-accessed"
  },"107": {
    "doc": "Pokemon Information Science",
    "title": "Access Pokemon Data Using the PokeAPI",
    "content": "Practice accessing Pokemon data using the free PokeAPI. Use the below form to get a Pokemon by ID. Get a Pokemon by ID . ID of Pokemon: Access data from the object . Try accessing part of the object (e.g. object.name). | ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/02/#access-pokemon-data-using-the-pokeapi",
    "relUrl": "/docs/processing/data-structures/02/#access-pokemon-data-using-the-pokeapi"
  },"108": {
    "doc": "React w/Fetch API",
    "title": "React with the Fetch API",
    "content": "This lesson will show you how to make a React application that GETs data from an API and displays it. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/02/#react-with-the-fetch-api",
    "relUrl": "/docs/react-js/basics/02/#react-with-the-fetch-api"
  },"109": {
    "doc": "React w/Fetch API",
    "title": "Set Up",
    "content": "Create a React App on replit.com or using npx create-react-app in the terminal. Get rid of any CSS in App.css. We will be modifying App.jsx. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/02/#set-up",
    "relUrl": "/docs/react-js/basics/02/#set-up"
  },"110": {
    "doc": "React w/Fetch API",
    "title": "useEffect hook",
    "content": "The useEffect hook allows you to run a function when‚Ä¶ . | The component initially loads. | A specific piece of data (a prop or member of state) changes. | . For our project, we will be running a function that gets data from a server via an API and displaying it. Replace the App.jsx in your project with the following: . import React, { useEffect, useState } from \"react\" import \"./App.css\" function App() { const [courses, setCourses] = useState([]) useEffect(() =&gt; { setCourses([\"CS\", \"IT\"]) }, []) return &lt;main&gt;{courses}&lt;/main&gt; } export default App . useEffect Parameters . The first parameter of useEffect is the function you want to run. The second parameter is the dependency array, which is empty if you want the function to be called when you load the component. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/02/#useeffect-hook",
    "relUrl": "/docs/react-js/basics/02/#useeffect-hook"
  },"111": {
    "doc": "React w/Fetch API",
    "title": "Displaying Courses with Array.map()",
    "content": "Right now, this code will just shove all the courses together like this: . Result: . CSIT To display each course separately, we can use JavaScript‚Äôs Array.map() method, which will return a different JSX element for each course in our courses array (replace the return &lt;main&gt;...&lt;/main&gt; in App.jsx with the below code). return ( &lt;ul&gt; {courses.map((course, i) =&gt; ( &lt;li key={i}&gt;{course}&lt;/li&gt; ))} &lt;/ul&gt; ) . Result: . | CS | IT | . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/02/#displaying-courses-with-arraymap",
    "relUrl": "/docs/react-js/basics/02/#displaying-courses-with-arraymap"
  },"112": {
    "doc": "React w/Fetch API",
    "title": "API: Application Programming Interface",
    "content": "An API (Application Programming Interface) is a layer in an application that allows a client to access data and features from a server. Instead of typing in course information to display ourselves, let‚Äôs get this data from Merit Academy‚Äôs API. In a separate tab, visit https://meritacademy.herokuapp.com/api/courses/?format=json to see the data related to Merit CS Courses. This data is represented as JSON (JavaScript Object Notation). All the courses are listed below in an array. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/02/#api-application-programming-interface",
    "relUrl": "/docs/react-js/basics/02/#api-application-programming-interface"
  },"113": {
    "doc": "React w/Fetch API",
    "title": "JavaScript Fetch API",
    "content": "In our useEffect hook, we can GET this course data and store it in our state. We will use the asynchronous Fetch API to get the information and store it. It is asynchronous because we don‚Äôt know how long it will take to get information from the server. I strongly recommend that you read this page: MDN async await. useEffect(() =&gt; { // We have to wrap fetch in an async function // because it's an asynchronous process that we // have to await for async function getCourses() { const response = await fetch( \"https://meritacademy.herokuapp.com/api/courses/?format=json\" ) // Get the json from the response const courses = await response.json() console.log(courses) setCourses(courses) } // Call the async function getCourses() }, []) . If you check the console, the data will all be there. It is not displaying in the browser yet because we need to modify what we return from our component. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/02/#javascript-fetch-api",
    "relUrl": "/docs/react-js/basics/02/#javascript-fetch-api"
  },"114": {
    "doc": "React w/Fetch API",
    "title": "Return Course Details",
    "content": "You can access fields from your JSON object with the . operator (e.g. course.slug) and display them in your JSX. return ( &lt;ul&gt; {courses.map((course, i) =&gt; ( &lt;li key={i}&gt; &lt;h4&gt;{course.name}&lt;/h4&gt; &lt;p&gt;Counts for {course.countsFor}&lt;/p&gt; &lt;/li&gt; ))} &lt;/ul&gt; ) . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/02/#return-course-details",
    "relUrl": "/docs/react-js/basics/02/#return-course-details"
  },"115": {
    "doc": "React w/Fetch API",
    "title": "Final Code for App.jsx",
    "content": "import React, { useEffect, useState } from \"react\" import \"./App.css\" function App() { const [courses, setCourses] = useState([]) useEffect(() =&gt; { async function getCourses() { const response = await fetch( \"https://meritacademy.herokuapp.com/api/courses/?format=json\" ) const courses = await response.json() setCourses(courses) } getCourses() }, []) return ( &lt;ul&gt; {courses.map((course, i) =&gt; ( &lt;li key={i}&gt; &lt;h4&gt;{course.name}&lt;/h4&gt; &lt;p&gt;Counts for {course.countsFor}&lt;/p&gt; &lt;/li&gt; ))} &lt;/ul&gt; ) } export default App . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/02/#final-code-for-appjsx",
    "relUrl": "/docs/react-js/basics/02/#final-code-for-appjsx"
  },"116": {
    "doc": "React w/Fetch API",
    "title": "Challenges",
    "content": ". | Display the course.description by using Array.map(). | Display the course.units by using Array.map(). | Display the course.tags by using Array.map(). | . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/02/#challenges",
    "relUrl": "/docs/react-js/basics/02/#challenges"
  },"117": {
    "doc": "React w/Fetch API",
    "title": "React w/Fetch API",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics/02/",
    "relUrl": "/docs/react-js/basics/02/"
  },"118": {
    "doc": "Part 2 - Blog Posts and CSS",
    "title": "Next.js Blog Tutorial - Part 2",
    "content": "Create blog posts and navigate to them with a dropdown menu. Starting code: https://replit.com/@buckldav/next-tut-1. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/02/#nextjs-blog-tutorial---part-2",
    "relUrl": "/docs/react-js/next-blog-tutorial/02/#nextjs-blog-tutorial---part-2"
  },"119": {
    "doc": "Part 2 - Blog Posts and CSS",
    "title": "Creating Blog Folder and Files",
    "content": "In the pages/ folder, create a blog/ folder with two files, post1.js and post2.js. pages/ blog/ post1.js post2.js . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/02/#creating-blog-folder-and-files",
    "relUrl": "/docs/react-js/next-blog-tutorial/02/#creating-blog-folder-and-files"
  },"120": {
    "doc": "Part 2 - Blog Posts and CSS",
    "title": "Creating Posts",
    "content": "Make Post 1 like the below markup. You can choose what text goes between the tags, but be sure to pick the same tags in this example for this tutorial. pages/blog/post1.js . import Head from \"next/head\" import Image from \"next/image\" export default function Post1() { return ( &lt;main&gt; &lt;Head&gt; &lt;title&gt;My Next App | Post 1&lt;/title&gt; &lt;meta name=\"description\" content=\"Generated by create next app\" /&gt; &lt;link rel=\"icon\" href=\"/favicon.ico\" /&gt; &lt;/Head&gt; &lt;article&gt; &lt;header&gt; &lt;h1&gt;Post 1&lt;/h1&gt; &lt;p&gt;October 14, 2021&lt;/p&gt; &lt;p&gt;by David Buckley&lt;/p&gt; &lt;/header&gt; &lt;div&gt; &lt;p&gt;This is some content for my first post.&lt;/p&gt; &lt;/div&gt; &lt;/article&gt; &lt;/main&gt; ) } . Once Post 1 is complete, copy + paste the markup and modify text for Post 2. You can navigate to /blog/post1 and /blog/post2 in your browser to see them. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/02/#creating-posts",
    "relUrl": "/docs/react-js/next-blog-tutorial/02/#creating-posts"
  },"121": {
    "doc": "Part 2 - Blog Posts and CSS",
    "title": "Interjection - ID selector",
    "content": "So far, we have been mostly using element and class selectors in CSS. Now it‚Äôs time to introduce the ID selector. ID‚Äôs can be used to identify and select a single element. Here‚Äôs an example. &lt;style&gt; #hello { font-size: 60px; color: green; font-weight: bold; font-style: italic; } &lt;/style&gt; &lt;p id=\"hello\"&gt;Hello&lt;/p&gt; &lt;p&gt;Normal Text&lt;/p&gt; . Writing inline style for this single element would look horrific and would be hard to maintain, so using an ID in this case is superior. &lt;p style=\"font-size: 60px; color: green; font-weight: bold; font-style: italic;\" &gt; Hello &lt;/p&gt; . In our project, we are using an ID as part of a dropdown menu to list our blog posts in the navigation. The ID will allow us to identify the element containing the dropdown in our JavaScript and then show and hide it as appropriate. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/02/#interjection---id-selector",
    "relUrl": "/docs/react-js/next-blog-tutorial/02/#interjection---id-selector"
  },"122": {
    "doc": "Part 2 - Blog Posts and CSS",
    "title": "Creating a Dropdown in our Navigation",
    "content": "We could list all of our blog posts horizontally in our navigation, but this would not scale well. Instead, we will make a dropdown menu where all blog posts are listed. Here‚Äôs what the final product will look like: . components/Nav.js . Remember how components can have interactivity (written in JavaScript)? We are going to add a dropdown() function that runs anytime the dropdown menu is toggled (shown/hidden). NOTE: This way of selecting the element using getElementById in the dropdown() function is not ‚ÄúReactive‚Äù, meaning that there are more idiomatic ways to do this in a React or Next project (check out useState in React‚Äôs docs). However, this way of toggling a CSS class will work in any frontend project, so that‚Äôs why it is presented. This is what your entire Nav.js file should look like: . import Link from \"next/link\" import styles from \"../styles/components/Nav.module.css\" export default function Nav() { function dropdown() { document.getElementById(\"blogDropdown\").classList.toggle(styles.show) } return ( &lt;nav className={styles.nav}&gt; &lt;Link href=\"/\"&gt;Home&lt;/Link&gt; &lt;Link href=\"/about\"&gt;About&lt;/Link&gt; &lt;div className={styles.dropdown}&gt; &lt;button className={styles.dropBtn} onClick={dropdown}&gt; Blog &lt;/button&gt; &lt;div id=\"blogDropdown\" className={styles.dropContent}&gt; &lt;Link href=\"/blog/post1\"&gt;Post 1&lt;/Link&gt; &lt;Link href=\"/blog/post2\"&gt;Post 2&lt;/Link&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; ) } . styles/components/Nav.module.css . We need to add some styles to our CSS module in order to make this work. Add the below code after the existing styles in our CSS file. /* The container &lt;div&gt; - needed to position the dropdown content */ .dropdown { position: relative; display: inline-block; } /* Dropdown Button */ .dropBtn { display: inline-block; color: #0070f3; padding: 1em; background-color: transparent; border: none; font-size: inherit; font-family: inherit; cursor: pointer; } /* Dropdown Content (Hidden by Default) */ .dropContent { display: none; position: absolute; background-color: #f1f1f1; min-width: 160px; box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2); z-index: 1; } /* Links inside the dropdown */ .dropContent a { display: block; } /* Show the dropdown menu (use JS to add this class to the .dropContent container when the user clicks on the dropdown button) */ .show { display: block; } . CSS Concepts . CSS Display . We‚Äôve already talked about CSS Display if you are in App &amp; Web Development class at Merit. display: block means the element takes up the full width of its parent. display: inline-block means the element is rendered inline with its adjacent elements, but can have Box Model styling applied to it. Note that .dropContent has display: none;, meaning that the element is not rendered. If the element has the classes dropContent and show, the display: block rule on the show class overrides the display: none, thus rendering the dropdown menu on the screen. That‚Äôs why the JavaScript function dropdown() in our Nav component toggles the show class. CSS Position . By default, elements have position: static, meaning they are rendered one after another. position: relative and position: absolute can be used together to render elements on top of the static flow (like our dropdown menu). &lt;parent style=\"position: relative\"&gt; &lt;child style=\"position: absolute\" /&gt; &lt;/parent&gt; . If these two position rules are used like in the example above, the child element will be rendered below the parent element but on top of the rest of the page. More Dropdown Examples . | Dropdown example that this is based off of. | Dropdown example CSS only. | . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/02/#creating-a-dropdown-in-our-navigation",
    "relUrl": "/docs/react-js/next-blog-tutorial/02/#creating-a-dropdown-in-our-navigation"
  },"123": {
    "doc": "Part 2 - Blog Posts and CSS",
    "title": "Pseudo Selectors",
    "content": "To finish things off, let‚Äôs add some pseudo selectors to our navigation CSS. Pseudo selectors allow for us to change the style depending on the state of the element. The :hover pseudo selector is triggered whenever the mouse hovers the element.nav a:hover, .nav button:hover { color: #0053b3; } . The :focus and :active pseudo selectors are for elements that have been clicked on (like our dropdown button).nav a:hover, .nav button:hover, .nav button:focus, .nav button:active { color: #0053b3; } . More: w3schools CSS Pseudo Classes . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/02/#pseudo-selectors",
    "relUrl": "/docs/react-js/next-blog-tutorial/02/#pseudo-selectors"
  },"124": {
    "doc": "Part 2 - Blog Posts and CSS",
    "title": "Summary",
    "content": "In this part, we created some blog post pages, add our first bit of JavaScript logic to a component, and learned some CSS tricks to help enhance our navigation. Finished code: https://replit.com/@buckldav/next-tut-2 . Extra: Make the blog dropdown menu hide on window click. This covers a concept outside of the scope of this tutorial page. // components/Nav.js import { useEffect } from \"react\" // other imports export default function Nav() { // dropdown function is above this useEffect(() =&gt; { window.onclick = function (e) { if (!e.target.classList.contains(styles.dropBtn)) document.getElementById(\"blogDropdown\").classList.remove(styles.show) } }, []) // return statement is below this } . Learning Targets . Standard 2.2 . | File structure and naming. | . Standard 3.3 . | Implement an id selector to modify a single element on the page. | Implement selectors a:link, a:visited, a:active, a:hover. | . Standard 3.4 . | Use absolute and static to position elements. | . Standard 4.2 . | Input Controls: Dropdown Lists. | Navigational Components. | . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/02/#summary",
    "relUrl": "/docs/react-js/next-blog-tutorial/02/#summary"
  },"125": {
    "doc": "Part 2 - Blog Posts and CSS",
    "title": "Part 2 - Blog Posts and CSS",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/02/",
    "relUrl": "/docs/react-js/next-blog-tutorial/02/"
  },"126": {
    "doc": "Creating a Player",
    "title": "Creating a Player",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/02/",
    "relUrl": "/docs/unity-and-cs/platformer-basics/02/"
  },"127": {
    "doc": "Creating a Player",
    "title": "What is a GameObject?",
    "content": "Once your 2D Unity Project is open, you will be taken to the Scene view. On the left is the Hierarchy where all of your GameObjects will be. GameObjects are items in your scene, and everything is a GameObject. Right now, all that‚Äôs there is the Main Camera. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/02/#what-is-a-gameobject",
    "relUrl": "/docs/unity-and-cs/platformer-basics/02/#what-is-a-gameobject"
  },"128": {
    "doc": "Creating a Player",
    "title": "Create Player GameObject",
    "content": "Right-click the ‚ÄúSampleScene‚Äù GameObject and select GameObject &gt; 2D Object &gt; Sprites &gt; Circle. Yes, our player will be a circle. We‚Äôll add graphics later in another project. With your circle selected in the Hierarchy, go over the right side of the screen to see the Inspector. Do the following: . | Rename your Circle to ‚ÄúPlayer‚Äù. | Click ‚ÄúAdd Component‚Äù and add a ‚ÄúRigidbody 2D‚Äù (see below). | . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/02/#create-player-gameobject",
    "relUrl": "/docs/unity-and-cs/platformer-basics/02/#create-player-gameobject"
  },"129": {
    "doc": "Creating a Player",
    "title": "Rigidbody: Add Physics",
    "content": "A Rigidbody 2D enables your GameObject to have physics, such as gravity, drag, and mass. | Check the ‚ÄúUse Auto Mass‚Äù flag because we will not need to worry about mass in our physics. | Check the ‚ÄúFreeze Rotation Z‚Äù so the circle doesn‚Äôt rotate in strange ways when it moves. | Click ‚ÄúAdd Component‚Äù to add a ‚ÄúCircle Collider 2D‚Äù. | . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/02/#rigidbody-add-physics",
    "relUrl": "/docs/unity-and-cs/platformer-basics/02/#rigidbody-add-physics"
  },"130": {
    "doc": "Creating a Player",
    "title": "Add Collider",
    "content": "A Collider enables your GameObject to collide with other GameObjects. We‚Äôll keep all the default settings for our Circle Collider 2D. Note that there are different shaped colliders for different jobs (Capsule Colliders are great for characters with textures, etc.). Falling Ball . Press ‚ÄúPlay‚Äù to see the ball fall. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/02/#add-collider",
    "relUrl": "/docs/unity-and-cs/platformer-basics/02/#add-collider"
  },"131": {
    "doc": "Creating a Player",
    "title": "Camera Track the Ball",
    "content": "Let‚Äôs make it so the camera tracks the player wherever they go. In the Hierarchy, simply drag the Main Camera to the Player GameObject. That will make the camera a ‚Äúchild‚Äù of the player, meaning that it will move along with it. It looks like the ball is not falling, but that‚Äôs because the camera is falling with it. Notice how the ‚ÄúY‚Äù position (yellow box) is decreasing as the ball and camera fall together. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/02/#camera-track-the-ball",
    "relUrl": "/docs/unity-and-cs/platformer-basics/02/#camera-track-the-ball"
  },"132": {
    "doc": "Enemy States",
    "title": "Enemy States",
    "content": "The states our enemy is going to have are Idle and Moving. The change between states will happen if the player is within sight of the enemy or not. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/state-machines/02/",
    "relUrl": "/docs/unity-and-cs/state-machines/02/"
  },"133": {
    "doc": "Enemy States",
    "title": "EnemyController Script",
    "content": "Add a script to the Enemy GameObject called EnemyController. Initially, we‚Äôll do some testing to find the ideal SIGHT_DISTANCE of the enemy, that is, the distance between the Player and the Enemy where the Enemy will start moving. using System.Collections; using System.Collections.Generic; using UnityEngine; public class EnemyController : MonoBehaviour { public GameObject player; // Start is called before the first frame update void Start() { } // Update is called once per frame void Update() { float distance = Vector3.Distance(player.transform.position, gameObject.transform.position); // Log the distance so that we can find the ideal sight range of the enemy Debug.Log(distance); } } . In the Unity Editor, drag your Player GameObject from the Hierarchy to the Player variable in the EnemyController. The code we‚Äôve written will log the distance between the Player and the Enemy. Run the program and navigate your Player towards the Enemy. In the Console, take note of the distance between them, and consider when you want the enemy to ‚Äúsee‚Äù the player. In my testing, I‚Äôve found that a distance of 8 seems pretty good. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/state-machines/02/#enemycontroller-script",
    "relUrl": "/docs/unity-and-cs/state-machines/02/#enemycontroller-script"
  },"134": {
    "doc": "Enemy States",
    "title": "EnemyController Script With States",
    "content": ". using System.Collections; using System.Collections.Generic; using UnityEngine; public class EnemyController : MonoBehaviour { enum EnemyState { Idle, Moving } private EnemyState currentState = EnemyState.Idle; private SpriteRenderer sr; // The value we found in Debug.Log above. private const float SIGHT_DISTANCE = 8.0f; // The two points that the Enemy will move between in the Moving state. private const float RIGHT_MAX = 27.5f; private const float LEFT_MAX = 22.5f; private int direction = -1; private float xSpeed = 0.02f; public GameObject player; void IdleState(float distance) { sr.color = Color.white; // switch to moving if in sight range if (distance &lt;= SIGHT_DISTANCE) { currentState = EnemyState.Moving; } } void MovingState(float distance) { sr.color = Color.yellow; // move back and forth if (transform.position.x &gt;= RIGHT_MAX) { direction = -1; } else if (transform.position.x &lt;= LEFT_MAX) { direction = 1; } transform.position = new Vector3(transform.position.x + direction * xSpeed, transform.position.y, transform.position.z); // switch to idle if out of sight range if (distance &gt; SIGHT_DISTANCE) { currentState = EnemyState.Idle; } } // Start is called before the first frame update void Start() { sr = GetComponent&lt;SpriteRenderer&gt;(); } // Update is called once per frame void Update() { float distance = Vector3.Distance(player.transform.position, transform.position); if (currentState == EnemyState.Idle) { IdleState(distance); } else if (currentState == EnemyState.Moving) { MovingState(distance); } } } . And that‚Äôs it! You now have a Player with a state machine and an Enemy with a state machine. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/state-machines/02/#enemycontroller-script-with-states",
    "relUrl": "/docs/unity-and-cs/state-machines/02/#enemycontroller-script-with-states"
  },"135": {
    "doc": "Creating a Player and Tilemap",
    "title": "Creating a Player and Tilemap",
    "content": "Let‚Äôs see how well you remember creating GameObjects in a Scene from the Platformer. If you need to review, visit the Platformer‚Äôs Creating a Player and Creating a Tilemap tutorials again. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/02/",
    "relUrl": "/docs/unity-and-cs/top-down-game/02/"
  },"136": {
    "doc": "Creating a Player and Tilemap",
    "title": "Tilemap",
    "content": "When creating the tilemap, be sure to add a Tilemap Collider 2D and a Composite Collider 2D. The Composite Collider will make it so that collision is applied to the tilemap as a whole instead of each tile individually, improving performance. To ensure that the tilemap remains in place, be sure that you change these properties on the Rigidbody 2D that was added with the Composite Collider. | Body Type Kinematic | Collision Detection Continuous. | . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/02/#tilemap",
    "relUrl": "/docs/unity-and-cs/top-down-game/02/#tilemap"
  },"137": {
    "doc": "Creating a Player and Tilemap",
    "title": "Player",
    "content": "Add a Player GameObject to the Scene. I used a Circle for mine with a Circle Collider 2D and Rigidbody 2D. Be sure to tag the Player as a Player tag and to add the Main Camera as a child of the player. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/02/#player",
    "relUrl": "/docs/unity-and-cs/top-down-game/02/#player"
  },"138": {
    "doc": "Creating a Player and Tilemap",
    "title": "Top-Down Player Controller Script",
    "content": "Update() vs. FixedUpdate() . This time (as opposed to our script in our platformer), we won‚Äôt be moving by adding forces to the Player‚Äôs Rigidbody in FixedUpdate(). Instead, we will directly mutate the position of the transform component, which can be done in Update(). Rigidbody code MUST go in FixedUpdate() while everything else can go in Update(). using UnityEngine; public class PlayerController : MonoBehaviour { private const int SPEED_UNIT = 1000; public float speed; // Start is called before the first frame update void Start() { } // FixedUpdate is called once per frame void FixedUpdate() { // +1 for right/up, -1 for left/down. // Example: Vector2(1, -1) = diagonal direction right and down. Vector2 direction = new Vector2( Input.GetAxis(\"Horizontal\"), Input.GetAxis(\"Vertical\") ).normalized; // Take the previous position and add any change to it // in the x and y directions. transform.position = new Vector2( transform.position.x + speed * direction.x / SPEED_UNIT, transform.position.y + speed * direction.y / SPEED_UNIT ); } } . We have are dividing by SPEED_UNIT because if we moved by speed every frame (60x a second), we would go too far too quickly. Set speed in the Inspector . I set my Speed to be 20 as well as the Gravity Scale of the Rigidbody to be 0 (because we do not have gravity in this game). Also, I set the collision of the Rigidbody to be Continuous. Draw some tiles and test out your game‚Äôs movement. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/02/#top-down-player-controller-script",
    "relUrl": "/docs/unity-and-cs/top-down-game/02/#top-down-player-controller-script"
  },"139": {
    "doc": "Drawing a Line",
    "title": "Drawing a Line",
    "content": "Now that you can move, let‚Äôs draw! The spiral image on the previous page is made up of lines and only lines! To start drawing, you need to know how to draw a line using a little bit of Java code in the Greenfoot environment. To get the drawing to work, we need to write a method that will move and draw a line at the same time. Here is that method along with the modification to the act() method. NOTE: You don‚Äôt need to worry about the details of the moveAndDraw() method below, just know that it does the same thing as the move() method before while drawing a line along the way. We are abstracting away the details. /** * MoveAndDraw ‚Äì This function draws a line while moving. */ private void moveAndDraw(int distance) { getWorld().getBackground().setColor(Color.BLACK); final int X_VECTOR = (int)(getX() + distance * Math.cos(Math.toRadians(getRotation()))); final int Y_VECTOR = (int)(getY() + distance * Math.sin(Math.toRadians(getRotation()))); getWorld().getBackground().drawLine(getX(), getY(), X_VECTOR, Y_VECTOR); move(distance); } /** * Act ‚Äì do whatever the Turtle wants to do. This method is called whenever * the ‚ÄòAct‚Äô or ‚ÄòRun‚Äô button gets pressed in the environment. */ public void act() { // Add your action code here moveAndDraw(50); } . | Don‚Äôt forget to ‚Äúcompile‚Äù your code in the editor before clicking &gt; Act in the scenario! | Note the increase in pixels from 10 to 50 in the act() method. Try changing the number in the line moveAndDraw(50), execute the code again, and see what happens. | . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/03/",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/03/"
  },"140": {
    "doc": "The Document and Window Objects",
    "title": "The document and window Objects",
    "content": "We are to the point where we can use JavaScript for its original purpose ‚Äì as a client-side scripting language to interact with HTML. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/03/#the-document-and-window-objects",
    "relUrl": "/docs/javascript/basics/03/#the-document-and-window-objects"
  },"141": {
    "doc": "The Document and Window Objects",
    "title": "PREREQUISITE: Build a multi-page HTML/CSS project",
    "content": "If you‚Äôve never built a HTML/CSS project, click here. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/03/#prerequisite-build-a-multi-page-htmlcss-project",
    "relUrl": "/docs/javascript/basics/03/#prerequisite-build-a-multi-page-htmlcss-project"
  },"142": {
    "doc": "The Document and Window Objects",
    "title": "The Document Object Model (DOM)",
    "content": "An HTML Document is comprised of HTML Elements. An element consists of an opening tag, content, and a closing tag. Frequently, the opening tag will have attributes, which are details that further define the look and behavior of the content. Source: https://en.wikipedia.org/wiki/HTML_element#Syntax . The Document Object Model (DOM) is an interface that contains an HTML document‚Äôs elements and their relationships. In JavaScript, this interface can be accessed with the built-in document object. Here‚Äôs an example HTML document and its corresponding DOM. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;A heading&lt;/h1&gt; &lt;a href=\"/\"&gt;Link text&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; . Source: https://en.wikipedia.org/wiki/Document_Object_Model . DOM Methods . There are methods associated with the document object that allow programs to access individual elements and collections of elements from the DOM. | Property | Description | . | document.getElementById(value) | Returns the element of that id. | . | document.getElementsByClassName(value) | Returns a collection of elements that have that class. | . | document.getElementsByTagName(value) | Returns a collection of elements of that tag. | . The query selector methods do similar tasks to the above, but leverage CSS selectors to select elements. The method you use to select elements comes down to personal preference. I like to use these querySelector methods because of their versatility, so in this series, I will just use querySelector for consistency. You should still know the other methods because of their ubiquity. | Property | Description | . | document.querySelector(selector) | Returns the first element that matches the selector. | . | document.querySelectorAll(selector) | Returns a collection of all the elements that match the selector. | . // Get an element: &lt;tag id=\"top\"&gt;content&lt;/tag&gt; // These two lines accomplish the same task const byId = document.getElementById(\"top\") const byIdQuery = document.querySelector(\"#top\") // Get all elements: &lt;tag class=\"blue\"&gt;content&lt;/tag&gt; const byClass = document.getElementsByClassName(\"blue\") const byClassQuery = document.querySelectorAll(\".blue\") // Just the first element that matches the selector const byClassQueryFirst = document.querySelector(\".blue\") // Get all elements: &lt;p&gt;content&lt;/p&gt; const byTag = document.getElementsByTagName(\"p\") const byTagQuery = document.querySelectorAll(\"p\") // Just the first element that matches the selector const byTagQueryFirst = document.querySelector(\"p\") . An HTML Element Object . Once you have an element selected and stored in a variable, you can perform operations on it by accessing and modifying its properties. | Property | Description | . | element.getAttribute(name) | Get attribute by name. | . | element.innerHTML | Get/set the inner HTML of the element. | . | element.innerText | Get/set the inner text of the element. | . | element.setAttribute(name, value) | Set attribute by name. | . | element.style.property | Set inline style. | . Example 1 . This example selects an anchor tag with an id and adds the following: an href attribute, the color green (inline style), and inner text with the site‚Äôs name. REMEMBER: You can only have one &lt;body&gt;, so put the code below within your existing body element. &lt;body&gt; &lt;a id=\"meritLink\"&gt;&lt;/a&gt; &lt;script&gt; const meritLink = document.querySelector(\"#meritLink\") meritLink.setAttribute(\"href\", \"https://meritacademy.tech\") meritLink.style.color = \"#00ff00\" meritLink.innerText = \"Merit Academy Tech\" &lt;/script&gt; &lt;/body&gt; . Result HTML . &lt;a id=\"meritLink\" href=\"https://meritacademy.tech\" style=\"color: #00ff00;\"&gt; Merit Academy Tech &lt;/a&gt; . Rendered Content . Merit Academy Tech . Example 2 . This example adds two items to a list by selecting the &lt;ul&gt; element and appending to its innerHTML. In JavaScript, you need to put your HTML in strings. &lt;body&gt; &lt;h1&gt;Favorite Foods&lt;/h1&gt; &lt;ul&gt;&lt;/ul&gt; &lt;script&gt; const ul = document.querySelector(\"ul\") ul.innerHTML += \"&lt;li&gt;Pizza&lt;/li&gt;\" ul.innerHTML += \"&lt;li&gt;Pineapple&lt;/li&gt;\" &lt;/script&gt; &lt;/body&gt; . Result HTML . &lt;body&gt; &lt;h1&gt;Favorite Foods&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Pizza&lt;/li&gt; &lt;li&gt;Pineapple&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; . Rendered Content . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/03/#the-document-object-model-dom",
    "relUrl": "/docs/javascript/basics/03/#the-document-object-model-dom"
  },"143": {
    "doc": "The Document and Window Objects",
    "title": "Favorite Foods",
    "content": ". | Pizza | Pineapple | . DOM Practice . Visit https://www.w3schools.com/js/js_htmldom_methods.asp to see another example of the above. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/03/",
    "relUrl": "/docs/javascript/basics/03/"
  },"144": {
    "doc": "The Document and Window Objects",
    "title": "The Window Object (Part 1)",
    "content": "The built-in window object contains information and actions related to the browser window. Here are some helpful properties, for a full list, click here. | Property | Description | . | window.close() | Closes the current page. | . | window.innerHeight | Returns the height of the viewport. | . | window.location.href | Returns the full URL to the current page. | . | window.location.reload() | Refreshes the current page. | . | window.scrollTo(x, y) | Scroll to a position in the document. | . Try these window properties out yourself in a project or the developer console. Example 3 - Use a template string to add lots of HTML to the body . This example makes use of a template string (Made with \\`, backticks, which are on the same key that ~ is). You can insert variables into a template string with ${}. Also, you can get the body of the HTML document with document.body. &lt;body&gt; &lt;script&gt; document.body.innerHTML = ` &lt;h1&gt;How tall are we?&lt;/h1&gt; &lt;p&gt;The height of this page is ${window.innerHeight}px.&lt;/p&gt; ` &lt;/script&gt; &lt;/body&gt; . Result (for a window of height 714px) HTML . &lt;body&gt; &lt;h1&gt;How tall are we?&lt;/h1&gt; &lt;p&gt;The height of this page is 714px.&lt;/p&gt; &lt;/body&gt; . Rendered Content . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/03/#the-window-object-part-1",
    "relUrl": "/docs/javascript/basics/03/#the-window-object-part-1"
  },"145": {
    "doc": "The Document and Window Objects",
    "title": "How tall are we?",
    "content": "The height of this page is 714px. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/03/",
    "relUrl": "/docs/javascript/basics/03/"
  },"146": {
    "doc": "The Document and Window Objects",
    "title": "Practice Task: Same Navigation",
    "content": "For multi-page projects that have the same navigation component on each page, it‚Äôs cumbersome to copy and paste the same navigation HTML to each page, let alone try to make a change later if needed. Proper web apps generate the navigation in some way (usually server-side) to keep the code DRY (Don‚Äôt Repeat Yourself). This project will have you generate the navigation for all pages client-side in a script.js file. Create a HTML5 project with the following file structure: . index.html page1.html page2.html script.js . Each HTML file should have the following for the &lt;body&gt;: . &lt;body&gt; &lt;nav id=\"topNav\"&gt;&lt;/nav&gt; &lt;p&gt;Here is a link to this page: &lt;a id=\"permalink\"&gt;&lt;/a&gt;&lt;/p&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt; &lt;/body&gt; . Here‚Äôs a example boilerplate for this project: https://replit.com/@buckldav/NavigationGenerationStarter. In script.js‚Ä¶ . | Select the #topNav and using it‚Äôs innerHTML attribute, add a working &lt;a&gt; element for each HTML file. | Select the #permalink and set to href attribute to link to whatever page it‚Äôs on (using the window object). Also, the innerText of the #permalink element should be the same as the href. | For example, on page1.html, the site should say (replacing yourdomain.com with whatever your project‚Äôs domain is) ‚Äì Here is a link to this page: https://yourdomain.com/page1.html. | . | . Hints Use window.location.href to get the URL to the current page. After selecting the #permalink, use element.setAttribute() to set the href of the link. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/03/#practice-task-same-navigation",
    "relUrl": "/docs/javascript/basics/03/#practice-task-same-navigation"
  },"147": {
    "doc": "The Document and Window Objects",
    "title": "The Document and Window Objects",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/03/",
    "relUrl": "/docs/javascript/basics/03/"
  },"148": {
    "doc": "Pizza Time!",
    "title": "Pizza Time!",
    "content": "In this lesson, you will learn: . | How to define and call a function with zero parameters. | How to define and call a function with several parameters. | . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/03/",
    "relUrl": "/docs/processing/basics/03/"
  },"149": {
    "doc": "Pizza Time!",
    "title": "Getting Started",
    "content": "Visit and fork https://replit.com/@buckldav/PizzaStarter to get started. You will be writing code to draw a pizza using p5.js. It will end up looking something like this: . What is a function? . Recall that a function is a named group of instructions. // function definition function functionName() { // function body // code goes here console.log(\"Hello!\") } // function call (execution) functionName() . In the function definition, we are simply assigning some code that displays \"Hello!\" to a function functionName(). \"Hello!\" does not get displayed until the function call (execution). What would happen if we called functionName() 3 times? . functionName() functionName() functionName() . Output: . Hello! Hello! Hello! . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/03/#getting-started",
    "relUrl": "/docs/processing/basics/03/#getting-started"
  },"150": {
    "doc": "Pizza Time!",
    "title": "Defining and Calling Functions for your Pizza",
    "content": "When you run the p5.js Pizza project that you forked, no pizza will have been drawn yet. You may notice that there are functions defined for making the crust() and the cheese(). function crust() { noStroke() fill(\"#fab005\") circle(canvasWidth / 2, canvasHeight / 2, canvasWidth - 10) } function cheese() { noStroke() fill(\"#fcd464\") circle(canvasWidth / 2, canvasHeight / 2, canvasWidth - 30) } . No crust or cheese will be drawn until we call these two functions within the setup() function. Type in the function names with the parentheses to call the functions in setup(). DO NOT WRITE A NEW SETUP FUNCTION, just add the crust and cheese function calls to the existing setup function. function setup() { createCanvas(canvasWidth, canvasHeight) background(255) // TODO: Call crust and cheese functions first crust() cheese() // TODO: Call topping functions (pepper(x, y) and the other two functions you write) // Call the functions multiple times to make multiple of the same topping } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/03/#defining-and-calling-functions-for-your-pizza",
    "relUrl": "/docs/processing/basics/03/#defining-and-calling-functions-for-your-pizza"
  },"151": {
    "doc": "Pizza Time!",
    "title": "Defining and Calling Functions with Parameters",
    "content": "Parameters are input variables to functions. They go between the parentheses in the function definition/call. There can be zero parameters to a function or many parameters, the amount expected is declared in the function definition. function functionName(parameter1, parameter2, ...) {} . Here‚Äôs an example of an add function that takes in two parameters as inputs and prints their sum. // definition function add(x, y) { console.log(x + y) } // call, with 2 for x and 4 for y add(2, 4) // output: 6 . Adding Toppings to Your Pizza . In your Pizza project, there is a pepper function defined that draws a pepper at position x, y. function pepper(x, y) { stroke(\"#264029\") strokeWeight(2) fill(\"#5c9b63\") // https://p5js.org/reference/#/p5/beginShape beginShape() vertex(x, y) vertex(x + 15, y + 15) vertex(x, y + 30) vertex(x + 8, y + 15) vertex(x, y) endShape(CLOSE) } . Call this pepper function in the setup function, inserting numbers for x and y to determine its position. function setup() { createCanvas(canvasWidth, canvasHeight) background(255) // TODO: Call crust and cheese functions first crust() cheese() // TODO: Call topping functions (pepper(x, y) and the other two functions you write) // Call the functions multiple times to make multiple of the same topping // Make a pepper at x = 100, y = 100 pepper(100, 100) } . Notice that the pepper‚Äôs positive x position is measured from the left and its positive y position is measured from the top. Here‚Äôs a graphic to show which direction positive x and y go on the canvas. Source: https://processing.org/tutorials/coordinatesystemandshapes. Try calling the pepper function a few more times with more different positions to add multiple peppers. function setup() { createCanvas(canvasWidth, canvasHeight) background(255) // TODO: Call crust and cheese functions first crust() cheese() // TODO: Call topping functions (pepper(x, y) and the other two functions you write) // Call the functions multiple times to make multiple of the same topping pepper(100, 100) pepper(180, 90) pepper(140, 200) } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/03/#defining-and-calling-functions-with-parameters",
    "relUrl": "/docs/processing/basics/03/#defining-and-calling-functions-with-parameters"
  },"152": {
    "doc": "Pizza Time!",
    "title": "Assignment: Add More Toppings",
    "content": "Define and call two more functions for toppings. At least one function you define should have at least one parameter. Try using the different shapes available in p5.js (circle for pepperoni, rect for onions, etc.). Draw your own shape with beginShape(). ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/03/#assignment-add-more-toppings",
    "relUrl": "/docs/processing/basics/03/#assignment-add-more-toppings"
  },"153": {
    "doc": "Dinosaur Game Clone",
    "title": "Dinosaur Game Clone",
    "content": "Fork this repl to begin: https://replit.com/@buckldav/DinoGameP5Starter#index.html. Here‚Äôs what we will be doing: . | Adding more enemies. | Enemies spawn in random positions. | Enemies speed up as the game goes along. | Enemies move across the screen. | If an enemy collides with the player, the game ends. | . | Adding game over functionality (i.e. end screen, message to player, etc.). | . ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/03/",
    "relUrl": "/docs/processing/data-structures/03/"
  },"154": {
    "doc": "Dinosaur Game Clone",
    "title": "How it Works",
    "content": "1. Multiple Script Files . In index.html, we have 5 different script files loaded. We could combine all of these scripts to one file, but it‚Äôs a good idea in large projects to organize and compartmentalize code. &lt;!-- Files are loaded from top to bottom. --&gt; &lt;script src=\"globals.js\"&gt;&lt;/script&gt; &lt;script src=\"enemy.js\"&gt;&lt;/script&gt; &lt;script src=\"environment.js\"&gt;&lt;/script&gt; &lt;script src=\"player.js\"&gt;&lt;/script&gt; &lt;script src=\"script.js\"&gt;&lt;/script&gt; . 2. Globals . Some data is needed throughout the whole program. It‚Äôs also convienent to keep similar data together in one spot (i.e. colors) so that if you want to change the color scheme of your entire app or game, you don‚Äôt need to comb through files to try to find what you need. In globals.js an object called GLOBALS contains colors and a few positions of other objects. // The const keyword is used instead of let if the data doesn't change const GLOBALS = { GRAVITY: 3, JUMP_STRENGTH: -30, DRAG: 3, GROUND_H: 90, PLAYER_H: 30, COLORS: { SKY: \"#87CEEB\", GROUND: \"gray\", PLAYER_FILL: \"red\", PLAYER_STROKE: \"black\", COLLISION_BOX: \"pink\", SCORE: \"black\", }, } . 3. Classes Make Objects . Also in the globals.js file is a class Box. Classes are templates for creating objects. Here‚Äôs how the Box class does that. class Box { constructor(x, y, w, h) { // Class variables start with 'this.' this.x = x this.y = y this.w = w this.h = h } } // Create a Box object // The Box's constructor takes in the parameters let box = new Box(0, 10, 20, 30) // box is a Box object console.log(box) { x: 0, y: 10, w: 20, h: 30, } console.log(box.y) 10 . Boxes keep track of position for the object and its collision in our game. 4. The Other JavaScript Files . | File | Description | . | enemy.js | The Enemy class. Enemies can have different pictures. Enemies also end the game if they collide with the player. | . | environment.js | The Environment class. Contains a ground box to prevent the player from falling forever. Add other background elements in addition to the sky if you‚Äôd like. | . | globals.js | Contains global constants and the functions updateScore(), showCollisionBox(), and gameOver(). | . | player.js | The Player class. Update the player‚Äôs position and check for collisions. | . | script.js | Contains the game logic, which is executed in p5.js‚Äô functions (setup(), draw(), keyPressed()). | . ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/03/#how-it-works",
    "relUrl": "/docs/processing/data-structures/03/#how-it-works"
  },"155": {
    "doc": "Dinosaur Game Clone",
    "title": "Make an Enemy Randomly Spawn and Move",
    "content": "To figure out how to move the enemy, perhaps we should reference the player‚Äôs update() function to see how the player moves. // Player.js update(env) { // gravity and jumping if (this.jumping || !this.isGrounded(env)) { this.box.y += this.velY this.velY += GLOBALS.GRAVITY this.jumping = false } } . The key part is this line: . this.box.y += this.velY . The velY (y velocity, can be +, -, or 0) of the player gets added to the y position of box. We can use this same idea in the Enemy class‚Äôs code to update its position and move it across the screen. Try to add an update() function to the Enemy class and call it in draw() in script.js for each enemy. Answer // Enemy.js class Enemy { constructor(img) { this.img = img this.box = new Box( 40, // x windowHeight - 250, // y GLOBALS.ENEMY_W, // w GLOBALS.ENEMY_H // h ) // Change the velocity. this.vel = 1 } draw() { // showCollisionBox(this.box) image(this.img, this.box.x, this.box.y, this.box.w, this.box.h) } // Add this function update() { // Move the box to the left this.box.x -= this.vel } } . Then, we need to call the update() function in the main script.js for each enemy. // script.js // in the draw() function's for loop: for (let i = 0; i &lt; enemies.length; i++) { enemies[i].draw() if (player.isBonk(enemies[i])) { // ends the program gameOver() } // Add this enemies[i].update() } . Code at this point: https://replit.com/@buckldav/DinoGameP5EnemyMove. ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/03/#make-an-enemy-randomly-spawn-and-move",
    "relUrl": "/docs/processing/data-structures/03/#make-an-enemy-randomly-spawn-and-move"
  },"156": {
    "doc": "Dinosaur Game Clone",
    "title": "Spawn the Enemy Off Screen",
    "content": "How could you change the Enemy.js constructor so that the Enemy spawns off screen to the right? . Answer Here‚Äôs one way to go about it: . // Enemy.js constructor(img) { this.img = img // The x position of the box needs to start off screen (windowWidth + GLOBALS.ENEMY_W). this.box = new Box( windowWidth + GLOBALS.ENEMY_W, windowHeight - 250, GLOBALS.ENEMY_W, GLOBALS.ENEMY_H ) // Try out other numbers for the velocity. this.vel = 3 } . How would you make the enemy spawn at a random y value? Recall the Snowflakes Project if needed. Answer Here‚Äôs one way to go about it: . // Enemy.js constructor(img) { this.img = img // Calculate the y with GROUND_Y or PLAYER_Y somehow to make it measure off of where those are. this.box = new Box( windowWidth + GLOBALS.ENEMY_W, windowHeight - random(GLOBALS.GROUND_H, GLOBALS.GROUND_H + 100), GLOBALS.ENEMY_W, GLOBALS.ENEMY_H ) this.vel = 3 } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/03/#spawn-the-enemy-off-screen",
    "relUrl": "/docs/processing/data-structures/03/#spawn-the-enemy-off-screen"
  },"157": {
    "doc": "Dinosaur Game Clone",
    "title": "Spawn More Enemies",
    "content": "Here are some questions that need to be answered. | How to make a lot of enemies quickly? | Should we make all the enemies at the beginning or make them along the way? | . Answer For question 2, there is no right answer here, both have merit. The answer to 2 influences the answer to 1. In this walkthrough, I‚Äôll show you the ‚Äúmake them along the way‚Äù approach. In script.js, check out the setup() function. Near the bottom, there is the line that spawns an enemy. // script.js // array.push adds an element to the array enemies.push(new Enemy(enemyImg1)) . If we use this line in the draw() function, enemies will spawn every frame. // script.js function draw() { env.draw() player.draw() for (let i = 0; i &lt; enemies.length; i++) { enemies[i].draw() if (player.isBonk(enemies[i])) { gameOver() } enemies[i].update() } // NEW CODE: spawn an enemy enemies.push(new Enemy(enemyImg1)) updateScore() player.update(env) } . This may create too many enemies. To solve this, let‚Äôs add an if statement that will only add an enemy if the current frame is a multiple of something. To do this, we can use the modulo operator which can get the remainder of division. If the remainder is zero, we can spawn an enemy. Also, our score variable is . // script.js function draw() { // ... // The for loop is right here // You'll need to make the variable GLOBALS.SPAWN_RATE in globals.js if (score % GLOBALS.SPAWN_RATE === 0) { enemies.push(new Enemy(enemyImg1)) } // updateScore() // ... } . // globals.js const GLOBALS = { // ... SPAWN_RATE: 50, // ... } . Here‚Äôs the code at this point: https://replit.com/@buckldav/DinoGameP5EnemySpawn. ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/03/#spawn-more-enemies",
    "relUrl": "/docs/processing/data-structures/03/#spawn-more-enemies"
  },"158": {
    "doc": "Dinosaur Game Clone",
    "title": "Speed Enemies Up",
    "content": "In Enemy.js, how could you use the score variable so that the velocity of new enemies increases as the score gets higher? . Answer Here‚Äôs one way to go about it: . // Enemy.js constructor(img) { this.img = img this.box = new Box( windowWidth + GLOBALS.ENEMY_W, windowHeight - random(GLOBALS.GROUND_H, GLOBALS.GROUND_H + 100), GLOBALS.ENEMY_W, GLOBALS.ENEMY_H ) // Just this line needs modified. The number \"1000\" can be whatever you want. this.vel = 3 + score / 1000 } . You might consider making that number 1000 a constant in your globals.js. This practice is called avoiding ‚Äúmagic numbers‚Äù (numbers that show up out of nowhere in your code). Same thing with the other numbers (250 and 3). Here‚Äôs mine: . // Enemy.js constructor(img) { this.img = img this.box = new Box( windowWidth + GLOBALS.ENEMY_W, random(GLOBALS.GROUND_Y - GLOBALS.ENEMY_RANGE, GLOBALS.GROUND_Y), GLOBALS.ENEMY_W, GLOBALS.ENEMY_H ) this.vel = GLOBALS.ENEMY_V + score * GLOBALS.ACCELERATION } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/03/#speed-enemies-up",
    "relUrl": "/docs/processing/data-structures/03/#speed-enemies-up"
  },"159": {
    "doc": "Dinosaur Game Clone",
    "title": "Game Over Screen",
    "content": "In globals.js, there is a gameOver() function where you can add background, text, etc. for when the game ends. Try adding everything yourself! . ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/03/#game-over-screen",
    "relUrl": "/docs/processing/data-structures/03/#game-over-screen"
  },"160": {
    "doc": "Dinosaur Game Clone",
    "title": "Final Code",
    "content": "The code below doesn‚Äôt have a game over screen, but everything else is there. Try adding your own enemy sprites. Change the jump strength and other globals. Get creative, and good luck! . https://replit.com/@buckldav/DinoGameP5EnemyFinal#enemy.js. ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/03/#final-code",
    "relUrl": "/docs/processing/data-structures/03/#final-code"
  },"161": {
    "doc": "Part 3 - Components and DRYness",
    "title": "Next.js Blog Tutorial - Part 3",
    "content": "Learn how to pass data as props and refactor duplicate code into DRY code. Starting Code: https://replit.com/@buckldav/next-tut-2. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/03/#nextjs-blog-tutorial---part-3",
    "relUrl": "/docs/react-js/next-blog-tutorial/03/#nextjs-blog-tutorial---part-3"
  },"162": {
    "doc": "Part 3 - Components and DRYness",
    "title": "Don‚Äôt Repeat Yourself (DRY)",
    "content": "When we created our blog posts, we copied and pasted the entire structure from one post to another. This is hard to maintain because if we wanted to change how a post was structured, we would have to change every file. DRY is a programming principle to create maintainable code. In our case, we will define our blog posts‚Äô structure once in as a Blog component and then reuse that component for each post page. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/03/#dont-repeat-yourself-dry",
    "relUrl": "/docs/react-js/next-blog-tutorial/03/#dont-repeat-yourself-dry"
  },"163": {
    "doc": "Part 3 - Components and DRYness",
    "title": "Components with Data - Blog Component",
    "content": "When creating a component, you can pass a parameter into the function known as props. export default function Component(props) {} . props can contain data related to your component. The data is accessed with the . operator. Make a new file at components/Blog.js and add the following code (you can also copy + paste post1.js and modify it). Notice the props we will require. components/Blog.js . import Head from \"next/head\" export default function Blog(props) { return ( &lt;main&gt; &lt;Head&gt; &lt;title&gt;My Next App | {props.title}&lt;/title&gt; &lt;meta name=\"description\" content=\"Generated by create next app\" /&gt; &lt;link rel=\"icon\" href=\"/favicon.ico\" /&gt; &lt;/Head&gt; &lt;article&gt; &lt;header&gt; &lt;h1&gt;{props.title}&lt;/h1&gt; &lt;p&gt;{props.date}&lt;/p&gt; &lt;p&gt;by {props.author}&lt;/p&gt; &lt;/header&gt; &lt;div&gt;{props.children}&lt;/div&gt; &lt;/article&gt; &lt;/main&gt; ) } . Now, in pages/blog/post1.js, we can use this Blog component and pass props as attributes in its tag. // pages/blog/post1.js import Blog from \"../../components/Blog\" export default function Post1() { return ( &lt;Blog author=\"David Buckley\" date=\"October 14, 2021\" title=\"Post 1\"&gt; {/* Content between the tags becomes \"props.children\" in the component */} &lt;p&gt;This is some content for my first post.&lt;/p&gt; &lt;/Blog&gt; ) } . Do the same for post2.js. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/03/#components-with-data---blog-component",
    "relUrl": "/docs/react-js/next-blog-tutorial/03/#components-with-data---blog-component"
  },"164": {
    "doc": "Part 3 - Components and DRYness",
    "title": "Summary",
    "content": "We created a Blog component and used props to pass the unique data for each post into the component. Finished code: https://replit.com/@buckldav/next-tut-3. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/03/#summary",
    "relUrl": "/docs/react-js/next-blog-tutorial/03/#summary"
  },"165": {
    "doc": "Part 3 - Components and DRYness",
    "title": "Part 3 - Components and DRYness",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/03/",
    "relUrl": "/docs/react-js/next-blog-tutorial/03/"
  },"166": {
    "doc": "Creating a Tilemap",
    "title": "Tilemaps",
    "content": "A Tilemap is a way to build a static background environment. Tilemaps can have collision as well. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/03/#tilemaps",
    "relUrl": "/docs/unity-and-cs/platformer-basics/03/#tilemaps"
  },"167": {
    "doc": "Creating a Tilemap",
    "title": "Creating a Tilemap",
    "content": "To create a tilemap, right-click on the SampleScene and select GameObject &gt; 2D Object &gt; Tilemap &gt; Rectangular. In the Inspector, you will need to add a ‚ÄúTilemap Collider 2D‚Äù (1.). Then, click on the ‚ÄúOpen Tile Palette‚Äù button (2.). ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/03/",
    "relUrl": "/docs/unity-and-cs/platformer-basics/03/"
  },"168": {
    "doc": "Creating a Tilemap",
    "title": "Creating a Tile Palette",
    "content": "A Tile Palette is a way to store the tiles that you will use to create your background. | Select ‚ÄúCreate New Palette‚Äù and a dropdown will show. | Name it ‚ÄúGround Palette‚Äù. | Click ‚ÄúCreate‚Äù. | . A dialog will open prompting you to select what folder you want to put the palette into and for our small project, just hit ‚ÄúSelect Folder‚Äù. In larger projects, you‚Äôll want to organize Prefabs, Tilemaps, etc. in folders. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/03/#creating-a-tile-palette",
    "relUrl": "/docs/unity-and-cs/platformer-basics/03/#creating-a-tile-palette"
  },"169": {
    "doc": "Creating a Tilemap",
    "title": "Tagging the Tilemap as Ground",
    "content": "Later, we will be checking if our Player is colliding with the ground. To do this, we need to add a Tag (label) to the Tilemap. Select the Tilemap from the Hierarchy and add a ‚ÄúGround‚Äù Tag. After pressing ‚ÄúSave‚Äù above, you will be redirected to the Inspector for the Tilemap. Select ‚ÄúGround‚Äù from the Tag dropdown menu. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/03/#tagging-the-tilemap-as-ground",
    "relUrl": "/docs/unity-and-cs/platformer-basics/03/#tagging-the-tilemap-as-ground"
  },"170": {
    "doc": "States and Animation",
    "title": "States and Animation",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/state-machines/03/",
    "relUrl": "/docs/unity-and-cs/state-machines/03/"
  },"171": {
    "doc": "States and Animation",
    "title": "Setup",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/state-machines/03/#setup",
    "relUrl": "/docs/unity-and-cs/state-machines/03/#setup"
  },"172": {
    "doc": "States and Animation",
    "title": "Scripting",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/state-machines/03/#scripting",
    "relUrl": "/docs/unity-and-cs/state-machines/03/#scripting"
  },"173": {
    "doc": "Heads-Up Display",
    "title": "Heads-Up Display (HUD)",
    "content": "A HUD is an overlay in a Scene where you can add information relevant to the player like health, score, and lives Wikipedia. We are going to add one to our game so we can display a score to the player. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/03/#heads-up-display-hud",
    "relUrl": "/docs/unity-and-cs/top-down-game/03/#heads-up-display-hud"
  },"174": {
    "doc": "Heads-Up Display",
    "title": "Add a Canvas",
    "content": "In Unity, a Canvas is a GameObject that allows you to add HUD components like overlaid text. In the Hierarchy, right-click on your SampleScene add navigate to GameObject &gt; UI &gt; Canvas. Any UI components can be added as children to this Canvas. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/03/#add-a-canvas",
    "relUrl": "/docs/unity-and-cs/top-down-game/03/#add-a-canvas"
  },"175": {
    "doc": "Heads-Up Display",
    "title": "Add Text objects for a score",
    "content": "Add two Text UI GameObjects to the Canvas (GameObject &gt; UI &gt; Text) and name them ‚ÄúScoreLabel‚Äù and ‚ÄúScore‚Äù. Score . The ‚ÄúScore‚Äù text object will be used to display the numeric score value that changes when the player performs actions in the game. In the Inspector, set the Text to 0. ScoreLabel . The ScoreLabel‚Äôs job will be to just display the text Score:. Place the label to the left of your Score in the Canvas so that together, they read Score: 0. Don‚Äôt be alarmed that the Canvas is so big relative to the Main Camera in the Scene view, it will look fine when you press play. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/03/#add-text-objects-for-a-score",
    "relUrl": "/docs/unity-and-cs/top-down-game/03/#add-text-objects-for-a-score"
  },"176": {
    "doc": "Heads-Up Display",
    "title": "Game with HUD",
    "content": "At this point your game should look something like this when you press ‚Äúplay‚Äù. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/03/#game-with-hud",
    "relUrl": "/docs/unity-and-cs/top-down-game/03/#game-with-hud"
  },"177": {
    "doc": "Heads-Up Display",
    "title": "Score Script",
    "content": "We need to add a script to our Score GameObject to make sure that the score is reset every time we start the game. Call it Score. using UnityEngine; public class Score : MonoBehaviour { // Reset the score at the start of the game void Start() { // if it's the zeroth scene (buildIndex == 0) if (UnityEngine.SceneManagement.SceneManager.GetActiveScene().buildIndex == 0) { // reset the score PlayerPrefs.SetInt(\"score\", 0); } GetComponent&lt;UnityEngine.UI.Text&gt;().text = PlayerPrefs.GetInt(\"score\").ToString(); } } . NOTE: If you use TextMeshPro instead of the legacy Text option, you should use this code instead: . - GetComponent&lt;UnityEngine.UI.Text&gt;().text = PlayerPrefs.GetInt(\"score\").ToString(); + GetComponent&lt;TMPro.TextMeshProUGUI&gt;().text = PlayerPrefs.GetInt(\"score\").ToString(); . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/03/#score-script",
    "relUrl": "/docs/unity-and-cs/top-down-game/03/#score-script"
  },"178": {
    "doc": "Heads-Up Display",
    "title": "Heads-Up Display",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/03/",
    "relUrl": "/docs/unity-and-cs/top-down-game/03/"
  },"179": {
    "doc": "Turning",
    "title": "Turning",
    "content": "You‚Äôve used code to draw a line. Good work! Now let‚Äôs try making the turtle turn around. To do this you need to instruct the turtle not only to move forward, but also to turn right or left. // Add your action code here moveAndDraw(50); turn(90); moveAndDraw(50); . | What do you think will happen in the code above? Click on &gt; Act to see if you were right. | turn(90) turns the cursor 90 degrees right. You can also turn left with turn(-90). To change the amount that the cursor turns, simply change the value of the degrees. | Complete the square shape you‚Äôve started by adding the next lines of code and press Run. Keep trying until you get it right. | . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/04/",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/04/"
  },"180": {
    "doc": "Turning",
    "title": "Challenge",
    "content": "Try to complete each of the challenges below. | Draw a rectangle: two of the four sides need to be longer. | Draw a triangle: how many degrees do you need to turn? | Draw a cross: backwards and forwards work well together. | Draw a circle: what happens if you turn lots? | . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/04/#challenge",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/04/#challenge"
  },"181": {
    "doc": "Logic and Control Flow",
    "title": "Logic and Control Flow",
    "content": "Now that we understand the basics of storing data and interacting with the document and window, we can dive into how to implement logic and decision making in our programs. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/04/",
    "relUrl": "/docs/javascript/basics/04/"
  },"182": {
    "doc": "Logic and Control Flow",
    "title": "The Window Object (Part 2)",
    "content": "Here are two methods associated with the window object that can used to get and display data to the user. | Property | Description | . | window.alert(message) | Opens a popup with the message. | . | window.prompt(message) | Opens a popup with the message and a input box for the user. | . For example, here‚Äôs a short program that would allow a user to input their username to a site. The site would then give them a message. const username = window.prompt(\"What is your username?\") // You can combine strings and variables with the \"+\" operator window.alert(\"Welcome, \" + username) . Result: . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/04/#the-window-object-part-2",
    "relUrl": "/docs/javascript/basics/04/#the-window-object-part-2"
  },"183": {
    "doc": "Logic and Control Flow",
    "title": "Conditionals",
    "content": "A conditional is an if-then statement. In code, they are made up of two main parts: the condition and the body. if (condition is true) { // do the body } . A JavaScript if statement requires the parentheses () around the condition. The curly braces {} for the body are always required for when the body is multiple lines of code and optional if the body is a single line. If there are two options, you can have an if/else statement: . if (condition) { // do this if condition is true } else { // otherwise, do this } . Conditions and Boolean Expressions . Here‚Äôs an example of how an if/else statement can extend our username getting program to a username validator, giving the user a different message depending on if they type in \"steve\" or not. const username = window.prompt(\"What is your username?\") if (username === \"steve\") { window.alert(\"Welcome, \" + username) } else { window.alert(\"Invalid username.\") } . Notice the condition: username === \"steve\". This is a boolean expression, or a statement that evaluates to true or false. Here are some common boolean operators used in boolean expressions to make comparisons. | Operator(s) | Description | . | ! | Not, flips the boolean (i.e. !true equals false). | . | &gt;, &lt; | Greater than, Less than. | . | &gt;=, &lt;= | Greater than or equal to, Less than or equal to. | . | == | Check equivalence without worrying about the type. (2 == '2' is true). | . | === | Check equivalence including type. (2 === '2' is false). | . | != | Not equal (no type checking). | . | !== | Not equal (with type checking). | . | &amp;&amp; | Logical AND, used to combine multiple boolean expressions. | . || | Logical OR, used to combine multiple boolean expressions. | . NOTE: For now, just always use === instead of ==. Same goes for using !== instead of !=. It‚Äôs safer to always check the type along with the value of the data. Example with else if and || (OR). Note that if one condition is satisfied, the rest of the else ifs and elses are skipped. const direction = window.prompt(\"Choose N, S, E, or W.\") // If the user typed in \"N\" or \"S\", the body of this if will run. if (direction === \"N\" || direction === \"S\") { window.alert(\"You can't go that way.\") } else if (direction === \"W\") { window.alert(\"You are in the inner sanctum.\") } else if (direction === \"E\") { window.alert(\"You are in the outer sanctum.\") } else { // else is usually used as a catch-all window.alert(\"Invalid direction\") } . Extra Practice . | w3schools Booleans | w3schools Comparisons | w3schools Conditionals | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/04/#conditionals",
    "relUrl": "/docs/javascript/basics/04/#conditionals"
  },"184": {
    "doc": "Logic and Control Flow",
    "title": "Practice Task: Quiz Game",
    "content": "Make a Quiz Game where you ask the user questions and they get points for correct answers. Your game must have the following features: . | Have a variable at the top of the program keeping track of score. 2 pts | Use window.prompt() for user input, asking the user a multiple-choice question. 2 pts | Have at least 3 conditionals (if/else or if/else if/else statements). Each condition handles user input and adds points to the score if they choose correctly. 6 pts | Print the score to the player at the end either in the HTML of the document or with an alert. 2 pts | Provide at least one visual surprise for the player if they win or lose by modifying the DOM. This could be changing the background color, dynamically adding an image, etc. 3 pts | . Example . let score = 0 const answer1 = window.prompt( \"What is my favorite color? 'blue', 'red', 'yellow', or 'green'?\" ) if (answer1 === \"blue\") { score += 1 window.alert(\"Correct!\") } else { window.alert(\"Incorrect.\") } . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/04/#practice-task-quiz-game",
    "relUrl": "/docs/javascript/basics/04/#practice-task-quiz-game"
  },"185": {
    "doc": "Quiz Game - Logic and Control Flow",
    "title": "Quiz Game - Logic and Control Flow",
    "content": "Make an HTML, CSS, JS repl and add code to the script.js as you go along. ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/04/",
    "relUrl": "/docs/processing/basics/04/"
  },"186": {
    "doc": "Quiz Game - Logic and Control Flow",
    "title": "Input/Output with Alert and Prompt",
    "content": "Here are two functions associated with the browser window that can be used to get and display data to the user. | Property | Description | . | alert(message) | Opens a popup with the message. | . | prompt(message) | Opens a popup with the message and a input box for the user. | . For example, here‚Äôs a short program that would allow a user to input their username to a site. The site would then give them a message. let username = prompt(\"What is your username?\") // You can combine strings and variables with the \"+\" operator alert(\"Welcome, \" + username) . Result: . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/04/#inputoutput-with-alert-and-prompt",
    "relUrl": "/docs/processing/basics/04/#inputoutput-with-alert-and-prompt"
  },"187": {
    "doc": "Quiz Game - Logic and Control Flow",
    "title": "Conditionals",
    "content": "A conditional is an if-then statement. In code, they are made up of two main parts: the condition and the body. if (condition is true) { // do the body } . A JavaScript if statement requires the parentheses () around the condition. The curly braces {} for the body are always required for when the body is multiple lines of code and optional if the body is a single line. If there are two options, you can have an if/else statement: . if (condition) { // do this if condition is true } else { // otherwise, do this } . Conditions and Boolean Expressions . Here‚Äôs an example of how an if/else statement can extend our username getting program to a username validator, giving the user a different message depending on if they type in \"steve\" or not. let username = prompt(\"What is your username?\") if (username === \"steve\") { alert(\"Welcome, \" + username) } else { alert(\"Invalid username.\") } . Notice the condition: username === \"steve\". This is a boolean expression, or a statement that evaluates to true or false. Here are some common boolean operators used in boolean expressions to make comparisons. | Operator(s) | Description | . | ! | Not, flips the boolean (i.e. !true equals false). | . | &gt;, &lt; | Greater than, Less than. | . | &gt;=, &lt;= | Greater than or equal to, Less than or equal to. | . | == | Check equivalence without worrying about the type. (2 == '2' is true). | . | === | Check equivalence including type. (2 === '2' is false). | . | != | Not equal (no type checking). | . | !== | Not equal (with type checking). | . | &amp;&amp; | Logical AND, used to combine multiple boolean expressions. | . || | Logical OR, used to combine multiple boolean expressions. | . NOTE: For now, just always use === instead of ==. Same goes for using !== instead of !=. It‚Äôs safer to always check the type along with the value of the data. Example with else if and || (OR). Note that if one condition is satisfied, the rest of the else ifs and elses are skipped. let direction = prompt(\"Choose N, S, E, or W.\") // If the user typed in \"N\" or \"S\", the body of this if will run. if (direction === \"N\" || direction === \"S\") { alert(\"You can't go that way.\") } else if (direction === \"W\") { alert(\"You are in the inner sanctum.\") } else if (direction === \"E\") { alert(\"You are in the outer sanctum.\") } else { // else is usually used as a catch-all alert(\"Invalid direction\") } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/04/#conditionals",
    "relUrl": "/docs/processing/basics/04/#conditionals"
  },"188": {
    "doc": "Quiz Game - Logic and Control Flow",
    "title": "Use Functions to Ask Questions Again",
    "content": "You can use the else block of if/else to ask the question again. // Call the question function at the top or bottom of the file question1() function question1() { let direction = prompt(\"Choose N, S, E, or W.\") if (direction === \"N\" || direction === \"S\") { alert(\"You can't go that way.\") } else if (direction === \"W\") { alert(\"You are in the inner sanctum.\") } else if (direction === \"E\") { alert(\"You are in the outer sanctum.\") } else { alert(\"Invalid direction\") // Ask the question again question1() } } . Extra Practice . | w3schools Booleans | w3schools Comparisons | w3schools Conditionals | . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/04/#use-functions-to-ask-questions-again",
    "relUrl": "/docs/processing/basics/04/#use-functions-to-ask-questions-again"
  },"189": {
    "doc": "Quiz Game - Logic and Control Flow",
    "title": "Practice Task: Quiz Game",
    "content": "Make a p5.js (or Vanilla JavaScript) Quiz Game where you ask the user questions and they get points for correct answers. If using p5.js, call your question function in the setup() function. Your game must have the following features: . | Have a variable at the top of the program keeping track of score. 2 pts | Have 3 questions, each with its own function. 3 pts | Use prompt() for user input, asking the user a multiple-choice question. 2 pts | Have at least 3 conditionals (if/else or if/else if/else statements). Each condition handles user input and adds points to the score if they choose correctly. If the user types in an option that doesn‚Äôt exist, the question gets asked again. 6 pts | Print the score to the player at the end with a alert(). 2 pts | . Example . Here‚Äôs a single question example. let score = 0 question1() function question1() { let ans = prompt(\"What is my favorite color? 'blue' or 'red'?\") if (ans === \"blue\") { score += 1 alert(\"Correct!\") } else if (ans === \"red\") { score -= 1 alert(\"Incorrect\") } else { alert(\"Not an option, noob!\") question1() } } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/04/#practice-task-quiz-game",
    "relUrl": "/docs/processing/basics/04/#practice-task-quiz-game"
  },"190": {
    "doc": "Part 4 - Search Engine Optimization",
    "title": "Next.js Blog Tutorial - Part 4",
    "content": "Search Engine Optimization (SEO) including metadata and microdata. Starting code: https://replit.com/@buckldav/next-tut-3. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/04/#nextjs-blog-tutorial---part-4",
    "relUrl": "/docs/react-js/next-blog-tutorial/04/#nextjs-blog-tutorial---part-4"
  },"191": {
    "doc": "Part 4 - Search Engine Optimization",
    "title": "Search Engine Optimization",
    "content": "Search Engine Optimization (SEO) is the process of making a site more accessible to web crawlers. If you are thinking about how your content is organized and following best practices, you are likely already doing many things that make a site search engine optimized. Some of search engine optimization is enigmatic and can only be discovered through trial and error. Some SEO strategies are outside the scope of this tutorial (like having a domain name). However the following strategies are implementable for any site. | Adding metadata in the head. | Adding microdata in the markup. | Adding a robots.txt file at the project root. | . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/04/#search-engine-optimization",
    "relUrl": "/docs/react-js/next-blog-tutorial/04/#search-engine-optimization"
  },"192": {
    "doc": "Part 4 - Search Engine Optimization",
    "title": "What is metadata?",
    "content": "In an HTML file, there are two main sections, the &lt;head&gt; and the &lt;body&gt;. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;!-- Metadata goes here --&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Content goes here --&gt; &lt;/body&gt; &lt;/html&gt; . Metadata is the background data of a site including the &lt;title&gt;, character set, viewport, description, author, and more. Some metadata ensures that the site operates correctly (like using a &lt;link&gt; tag to load a stylesheet) and some metadata is just text describing the page. Web crawlers can read the metadata (in addition to reading the content in the body) to determine what the site is about. Adding Metadata to the Blog Component . Next.js provides us with many features to help us write metadata. We will employ two of them. (You can apply meta tags in any HTML &lt;head&gt;, of course, not just in Next apps). First, we will use the &lt;Head&gt; component (notice the capital ‚ÄúH‚Äù) to add markup to be put in the &lt;head&gt; of the compiled HTML document. We will leverage the props that we‚Äôve passed to the component to populate our metadata. components/Blog.js . &lt;Head&gt; &lt;title&gt;My Next App | {props.title}&lt;/title&gt; &lt;meta name=\"description\" content={`${props.title}, written by ${props.author}.`} /&gt; &lt;meta name=\"author\" content={props.author} /&gt; &lt;link rel=\"icon\" href=\"/favicon.ico\" /&gt; &lt;/Head&gt; . Second, observe the &lt;meta&gt; tags generated by Next.js when we visit a blog post and inspect the resultant HTML. Here‚Äôs a brief explanation of each meta tag: . &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt; Ensures the site is sized to the device (desktop, tablet, phone, etc.). &lt;meta charset=\"utf-8\" /&gt; Tells the browser what character set we are using (utf-8 is by far the most common, contains all common letters and symbols). &lt;meta name=\"description\" content=\"Post 1, written by David Buckley\" /&gt; The most important meta tag for the page's SEO. The more descriptive, the better. Often shows up in a site's preview in search results. &lt;meta name=\"author\" content=\"David Buckley\" /&gt; Indicates who the author is. Here‚Äôs how that data might be displayed in search results: . Next.js Prerendering . Another SEO feature that Next.js has is prerendering, meaning that the HTML pages are generated on the server, thus making them more readable by web crawlers and increasing load times (increasing page ranking). Most other JavaScript apps lack this feature by default. Meta Keywords (deprecated) . There is a meta tag called keywords that is an archaic way of trying to boost site rankings (example: &lt;meta name=\"keywords\" content=\"instagram facebook tiktok\"&gt;). You can see how this could get abused by people spamming popular brand names and phrases in an effort to get noticed. Google‚Äôs famous Page Rank algorithm was revolutionary in that it largely ignored this meta tag and instead looked at a site holistically to determine its category and ranking. Source: https://en.wikipedia.org/wiki/Meta_element#The_keywords_attribute. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/04/#what-is-metadata",
    "relUrl": "/docs/react-js/next-blog-tutorial/04/#what-is-metadata"
  },"193": {
    "doc": "Part 4 - Search Engine Optimization",
    "title": "What is Microdata?",
    "content": "Microdata is metadata that we can add to our content tags. This can help further organize content and even create rich results in search engines. _Source: https://en.wikipedia.org/wiki/Microdata_(HTML)._ . Here‚Äôs an example of a hotel with rich results. Notice the information displayed on the right (address, phone, etc.). Here is a link with suggested microdata for hotels. Our blog will not have rich results, but the microdata is still helpful for Google‚Äôs web crawlers to index our site and understand what‚Äôs going on. Google does have a tool to preview rich results for a page that you can use in the future if you‚Äôd like. Schema.org Microdata for Blog Posts . Schema.org contains definitions for many types of content, from Airlines to Vehicles. We will be using Schema‚Äôs article definition for our blog. Visit https://schema.org/Article#examples and Click on ‚ÄúMicrodata‚Äù for Example 1. Notice the itemscope, itemtype, and itemprop attributes. &lt;div itemscope itemtype=\"https://schema.org/Article\"&gt; &lt;span itemprop=\"name\"&gt;How to Tie a Reef Knot&lt;/span&gt; by &lt;span itemprop=\"author\"&gt;John Doe&lt;/span&gt; ... &lt;/div&gt; . In our Blog Component . Add the following microdata to the Blog component. components/Blog.js . &lt;article itemscope itemtype=\"https://schema.org/Article\"&gt; &lt;header&gt; &lt;h1 itemprop=\"name\"&gt;{props.title}&lt;/h1&gt; &lt;p itemprop=\"datePublished\"&gt;{props.date}&lt;/p&gt; &lt;p&gt; by &lt;span itemprop=\"author\"&gt;{props.author}&lt;/span&gt; &lt;/p&gt; &lt;/header&gt; &lt;div itemprop=\"articleBody\"&gt;{props.children}&lt;/div&gt; &lt;/article&gt; . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/04/#what-is-microdata",
    "relUrl": "/docs/react-js/next-blog-tutorial/04/#what-is-microdata"
  },"194": {
    "doc": "Part 4 - Search Engine Optimization",
    "title": "robots.txt",
    "content": "This is a file that defines rules for web crawlers. We won‚Äôt add any rules, but we do need the file. Add it to your public/ folder. public/ favicon.ico robots.txt . Read more about robots.txt here. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/04/#robotstxt",
    "relUrl": "/docs/react-js/next-blog-tutorial/04/#robotstxt"
  },"195": {
    "doc": "Part 4 - Search Engine Optimization",
    "title": "Lighthouse Audit",
    "content": "There are several tools to check our site‚Äôs SEO, one of which is the Lighthouse Audit in Chrome DevTools. While at /blog/post1 in a tab, open DevTools with F12 or Ctrl + Shift + I and navigate to the ‚ÄúLighthouse‚Äù tab. Check the ‚ÄúSEO‚Äù box and the ‚ÄúDesktop‚Äù radio button. When you generate the report and if you have done everything, we should see a score of 100! . Other Essential SEO Tools . | Google Search Console | w3 Validator | Schema Validator | . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/04/#lighthouse-audit",
    "relUrl": "/docs/react-js/next-blog-tutorial/04/#lighthouse-audit"
  },"196": {
    "doc": "Part 4 - Search Engine Optimization",
    "title": "Summary",
    "content": "We have learned basics of SEO including metadata and microdata. We also learned how to perform a lighthouse audit in Chrome DevTools to check our site‚Äôs SEO. Finished code: https://replit.com/@buckldav/next-tut-4. Learning Targets . Standard 4.6 - Use meta tags for page documentation and search engine optimization (SEO) . | Specify page description, keywords, viewport, and author using meta tags. | Declare encoding using meta tags. | Understand principles of search engine optimization. | . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/04/#summary",
    "relUrl": "/docs/react-js/next-blog-tutorial/04/#summary"
  },"197": {
    "doc": "Part 4 - Search Engine Optimization",
    "title": "Part 4 - Search Engine Optimization",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/04/",
    "relUrl": "/docs/react-js/next-blog-tutorial/04/"
  },"198": {
    "doc": "Adding Tiles",
    "title": "Creating Tiles",
    "content": "To create a Tile that you can draw on the Tilemap, select the ‚ÄúAssets‚Äù menu from the top and select Create &gt; 2D &gt; Sprites &gt; Square. The Square will get added to the Assets menu below. Make sure you have the ‚ÄúProject‚Äù window selected. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/04/#creating-tiles",
    "relUrl": "/docs/unity-and-cs/platformer-basics/04/#creating-tiles"
  },"199": {
    "doc": "Adding Tiles",
    "title": "Add Tile to Tile Palette",
    "content": "Click and drag the Square Tile you just made to Tile Palette (see video below). Once the tile is added to the palette, you can select it from the tile palette and draw on the scene. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/04/#add-tile-to-tile-palette",
    "relUrl": "/docs/unity-and-cs/platformer-basics/04/#add-tile-to-tile-palette"
  },"200": {
    "doc": "Adding Tiles",
    "title": "Creating and Testing Your Level",
    "content": "Here‚Äôs the small level I‚Äôve created. Don‚Äôt worry about making a giant level yet, just make something where you can test basic movement. If everything is working correctly, when you hit ‚ÄúPlay‚Äù, the Player should fall and land on your Tilemap because of the collider. On the next page, we will add a Script so we can control the player. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/04/#creating-and-testing-your-level",
    "relUrl": "/docs/unity-and-cs/platformer-basics/04/#creating-and-testing-your-level"
  },"201": {
    "doc": "Adding Tiles",
    "title": "Adding Tiles",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/04/",
    "relUrl": "/docs/unity-and-cs/platformer-basics/04/"
  },"202": {
    "doc": "Collectibles",
    "title": "Collectibles",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/04/",
    "relUrl": "/docs/unity-and-cs/top-down-game/04/"
  },"203": {
    "doc": "Collectibles",
    "title": "Adding Collectibles",
    "content": "For collectibles, we can add any Sprite we‚Äôd like; in this tutorial, we will just make a GameObject that is a ‚ÄúHexagon Flat-Top‚Äù in our Scene. Call the GameObject Collectible and add a Polygon Collider 2D. Creating A Hexagon: . Notice that we‚Äôve selected ‚ÄúIs Trigger‚Äù in the Polygon Collider 2D. A trigger allows you to detect collisions with objects while also being able to pass through them. This ensures that there is no unintended knockback from collecting. Asset Organization . In the Assets window, go ahead and move all of your Sprites into the Materials folder. Collectible Script . Add a script to the Collectible GameObject called Collectible. This script will check if the Player collided with a Collectible and will update the score text. using System; using UnityEngine; using UnityEngine.UI; public class Collectible : MonoBehaviour { // A reference to your score text GameObject public Text score; // How much this particular collectible is worth (score) public int scoreAmount; // OnTriggerEnter2D instead of OnCollider2D because we checked \"Is Trigger\" private void OnTriggerEnter2D(Collider2D other) { if (other.gameObject.tag == \"Player\") { // Get the current score int newScore = Int32.Parse(score.text) + scoreAmount; // Save the current score to be used across multiple scenes. PlayerPrefs.SetInt(\"score\", newScore); // Display the newScore in the UI score.text = newScore.ToString(); // Make the Collectible disappear Destroy(gameObject); } } } . NOTE: If you use TextMeshPro instead of the legacy Text option, you should use this code instead: . - public Text score; + public TMPro.TextMeshProUGUI&gt; score; . Connect the Text GameObject to the Collectible Script . | Drag the Score Text GameObject from the Hierarchy to the Collectible Script. | Set the Score Amount to however much the collectible is worth. | Test it out to see if it works. | . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/04/#adding-collectibles",
    "relUrl": "/docs/unity-and-cs/top-down-game/04/#adding-collectibles"
  },"204": {
    "doc": "Changing Colors",
    "title": "Changing Colors",
    "content": "The default color for the line we drew is black, as we indicated in our code. You can change the colors to make your shapes look even better. Look at the code below. It contains three integer variables called r, g, and b. public void act() { // Add your action code here. int r = 255; int g = 0; int b = 124; setColor(r, g, b); moveAndDraw(50); turn(90); moveAndDraw(50); } . Variables are a way of storing a value and giving it a name. For instance, there is a variable name r with a value of 255. Run the code and see what happens. The code doesn‚Äôt work because there is no setColor method defined! We need to define it and also remove our default coloring in moveAndDraw. // New method to add private void setColor(int r, int g, int b) { getWorld().getBackground().setColor(new Color(r, g, b)); } // Modify existing moveAndDraw method; comment out the line that sets the color to be black. private void moveAndDraw(int distance) { // getWorld().getBackground().setColor(Color.BLACK); ... } . Try changing the values of the three variables, and see what happens. (Note: the maximum value is 255, and after this there will be no effect.) What do you think r, g, and b represent? . Answer r, g, and b represent how much red, green, and blue will be used in the color. Each can have any value from 0 up to 255. So to make yellow, you could try the following: . int r = 255; int g = 255; int b = 0; . RGB Colors When we want to represent a color in a computer program, we can do this by defining the amounts of red, blue, and green that make up that color. These amounts are usually stored as a single byte and therefore as a number between 0 and 255. Here‚Äôs a table showing some color values: . Red Green Blue Color 255 0 0 Red 0 255 0 Green 0 0 255 Blue 255 255 0 Yellow 255 0 255 Magenta 0 255 255 Cyan . You can find a nice color picker to play with at w3schools. You can change the value of your variables either by setting them to a new value, or by increasing and decreasing them. You can change the colour of the turtle as well. Run the code below to see what happens: . public void act() { // Add your action code here. int r = 255; int g = 0; int b = 124; setColor(r, g, b); moveAndDraw(50); turn(90); moveAndDraw(50); } . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/05/",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/05/"
  },"205": {
    "doc": "Changing Colors",
    "title": "Challenge",
    "content": "Try to complete each of the challenges below. | Complete the triangle above with a colour of your choice. | Draw a square with sides which are four different shades of red. | Draw a cross made of four different colors. | . Hint 1 To change a color, you can just keep adding or subtracting values from the original variables. Hint 2 So you could alter colors by doing the following: . // Add your action code here. int r = 255; int g = 0; int b = 0; setColor(r, g, b); moveAndDraw(50); turn(120); r -= 20; g += 20; b += 5; setColor(r, g, b); moveAndDraw(50); turn(120); . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/05/#challenge",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/05/#challenge"
  },"206": {
    "doc": "Events",
    "title": "Events",
    "content": "Events occur when the page loads, a button is click, a form is submitted, etc. In short, they allow code to be executed when the user or browser performs or completes an action. Here‚Äôs a short list of common events and when they are triggered. | Event | Trigger | . | change | When an input, textarea, or select element‚Äôs data changes. | . | click | When an element is clicked. Usually reserved for buttons. | . | keydown | When a key on the keyboard is pressed. | . | load | When an element like a picture loads. | . | submit | When form data is submitted. | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/05/",
    "relUrl": "/docs/javascript/basics/05/"
  },"207": {
    "doc": "Events",
    "title": "Window Events",
    "content": "Events can be triggered by the window. onload, onkeydown, onscroll are common events. Example 1: Two Ways to Add an Event . Here are two ways that you could assign a function to the onload event of the window. The code below will trigger an alert when the page is loaded. window.onload = function (event) { window.alert(\"The page loaded.\") } // This code is equivalent to the code above. // This is the way we will add events in this tutorial. window.addEventListener(\"load\", function (event) { window.alert(\"The page loaded.\") }) . Example 2: Play an audio clip that says ‚ÄúE‚Äù when the user types an ‚ÄúE‚Äù . window.addEventListener(\"keydown\", function (event) { // The event object contains information related to the user's action if (event.key === \"e\") { const synth = window.speechSynthesis const e = new SpeechSynthesisUtterance(\"E\") e.voice = synth.getVoices()[0] synth.speak(e) } }) . Try pressing ‚Äúe‚Äù on the keyboard and see what happens! (sound on) . If you‚Äôre interested in how the Web Speech API used above works, check here: https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/05/#window-events",
    "relUrl": "/docs/javascript/basics/05/#window-events"
  },"208": {
    "doc": "Events",
    "title": "Element Events",
    "content": "You can detect when a specific element is having an action done to it. Here are some examples. Example 1: Add a CSS class to an image when it loads . Given that a CSS class .fade-in will perform a fade animation on an element, fade the image in when the source loads. &lt;img src=\"https://www.w3schools.com/html/img_girl.jpg\" width=\"300\" height=\"300\" /&gt; &lt;script&gt; const img = document.querySelector(\"img\") img.addEventListener(\"load\", function (event) { img.classList.add(\"fade-in\") }) &lt;/script&gt; . Result HTML . &lt;img src=\"https://www.w3schools.com/html/img_girl.jpg\" width=\"300\" height=\"300\" class=\"fade-in\" /&gt; . Rendered Content . Example 2: Have a button that triggers an alert on click . &lt;button id=\"alert\"&gt;Alert!&lt;/button&gt; &lt;script&gt; const button = document.querySelector(\"#alert\") button.addEventListener(\"click\", function (event) { window.alert(\"Button!\") }) &lt;/script&gt; . Result Rendered Content . Alert! . Resources - Big ‚Äòol list of events . | https://www.w3schools.com/js/js_htmldom_events.asp | https://www.w3schools.com/js/js_htmldom_eventlistener.asp | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/05/#element-events",
    "relUrl": "/docs/javascript/basics/05/#element-events"
  },"209": {
    "doc": "Events",
    "title": "Practice Task: HTML Toggle Button",
    "content": "Make a toggle button that shows and hides HTML content. This is a common functionality needed for mobile navigation drawers, modals (popups), and collapsible accordions. See an example here: https://drawerexample.buckldav.repl.co/. | The button should handle both actions with a single on click event listener. (5 pts) . | Hint: you will likely need an if/else statement in your listener function. | . | The HTML content should show if it‚Äôs hidden and hide if its shown. (5 pts) | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/05/#practice-task-html-toggle-button",
    "relUrl": "/docs/javascript/basics/05/#practice-task-html-toggle-button"
  },"210": {
    "doc": "Snowflake App",
    "title": "Snowflake App",
    "content": "We‚Äôre going to use for loops to draw some patterns. Fork this replit project to begin: https://replit.com/@buckldav/SnowflakeStarter#script.js. The two functions that we will be modifying are: . function snowflake(x, y, radius, branches) { // TODO } function drawSnowflakes() { // TODO } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/05/",
    "relUrl": "/docs/processing/basics/05/"
  },"211": {
    "doc": "Snowflake App",
    "title": "Loop the Branches",
    "content": "Here is code to draw a single branch of a snowflake. function snowflake(x, y, radius, branches) { branch(x, y, radius, branches) } function drawSnowflakes() { fill(\"cyan\") stroke(\"blue\") strokeWeight(5) snowflake(150, 150, 60, 6) } . We need to modify snowflake() to call branch() branches times. To repeat the call of branch(), we can use a for loop. For Loop . A for loop repeats a certain number of times. It is made of 4 parts: . for (initialization; condition; increment) { // body } . | The initialization is where we declare a variable i to count up as we loop. let i = 0; | The condition specifies when we stop the loop. i &lt; 3; | The increment specifies how much to increase i by each time through the loop. i++ | . // i++ means increment or increase i by 1 each time for (let i = 0; i &lt; 3; i++) { console.log(i) } . Output: . 0 1 2 . There is no 3 printed because once i = 3, the condition becomes false (3 &lt; 3) and the loop stops. Snowflake For Loop . Here‚Äôs how we could apply a for loop to snowflake() to draw a branch branches amount of times. function snowflake(x, y, radius, branches) { for (let i = 0; i &lt; branches; i++) { branch(x, y, radius, branches) } } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/05/#loop-the-branches",
    "relUrl": "/docs/processing/basics/05/#loop-the-branches"
  },"212": {
    "doc": "Snowflake App",
    "title": "Add Some Randomness",
    "content": "When we call snowflake() in drawSnowflake(), we could use p5‚Äôs random function to randomize each parameter. function drawSnowflakes() { fill(\"cyan\") stroke(\"blue\") strokeWeight(5) snowflake(random(100, 400), random(100, 400), random(40, 80), random(4, 6)) } . Floating Point vs. Integer Numbers . You‚Äôll notice that your snowflake probably looks a little off. This is because random() produces a floating-point (decimal) number instead of an integer (whole number). This only affects us significantly for the branches parameter. To convert that floating-point number to the nearest integer, we can use p5‚Äôs int() function. // Cast the branches random number to an int snowflake(random(100, 400), random(100, 400), random(40, 80), int(random(4, 6))) . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/05/#add-some-randomness",
    "relUrl": "/docs/processing/basics/05/#add-some-randomness"
  },"213": {
    "doc": "Snowflake App",
    "title": "Draw Lots of Snowflakes",
    "content": "You can copy and paste your snowflake function calls like so‚Ä¶ . function drawSnowflakes() { fill(\"cyan\") stroke(\"blue\") strokeWeight(5) snowflake(random(100, 400), random(100, 400), random(40, 80), int(random(4, 6))) snowflake(random(100, 400), random(100, 400), random(40, 80), int(random(4, 6))) snowflake(random(100, 400), random(100, 400), random(40, 80), int(random(4, 6))) } . But now we have loops so there‚Äôs a better way! Remove the copy and pasted function calls and replace them with a for loop. Try it on your own, and if you can‚Äôt figure it out, check the answer. Answer The number in the for loop condition determines how many times the loop runs. function drawSnowflakes() { fill(\"cyan\") stroke(\"blue\") strokeWeight(5) // draw 3 snowflakes for (let i = 0; i &lt; 3; i++) { snowflake(random(100, 400), random(100, 400), random(40, 80), int(random(4, 6))) } } . Result: . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/05/#draw-lots-of-snowflakes",
    "relUrl": "/docs/processing/basics/05/#draw-lots-of-snowflakes"
  },"214": {
    "doc": "Part 5 - APIs and Databases",
    "title": "Next.js Blog Tutorial - Part 5",
    "content": "Learn how to store and retrieve comments using an API and a database. Starting code: https://replit.com/@buckldav/next-tut-4. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/05/#nextjs-blog-tutorial---part-5",
    "relUrl": "/docs/react-js/next-blog-tutorial/05/#nextjs-blog-tutorial---part-5"
  },"215": {
    "doc": "Part 5 - APIs and Databases",
    "title": "Comments on a Blog",
    "content": "Databases . Most blogs have the ability for visitors to leave comments on posts. These comments are stored in a database on the website‚Äôs server. Databases are used in websites whenever there is information that‚Ä¶ . | Can be changed. | Can be accessed by specfic users or the public. | . Some popular traditional (SQL) databases include SQLite, MySQL, PostgreSQL, Microsoft SQL Server. Some popular noSQL databases (which are sometimes used by newer technologies) include Google Firebase, Amazon DynamoDB, mongoDB, GraphQL. If you want to learn more about databases, I would suggest trying a SQL database first like SQLite. Learn more at https://www.w3schools.com/sql/. Repl‚Äôs Database . Repl has a built-in database we can use for our blog. We have to first add it to our project by clicking on ‚ÄúPackages‚Äù in repl‚Äôs left sidebar and searching for @replit/database. Click the + to add the package. If you click on the database icon in repl‚Äôs sidebar, you will see the JavaScript code that can allow you to access the database. We will add some of this code to our project soon. Accessing Data with an API . An API (Application Programming Interface) is a layer in an application that allows a client to access data and features from a server. In our program, we will create and retrieve comments on the database through an API. Source: https://welldoneby.com/blog/what-is-api-testing-a-quick-guide-for-beginners/ . In Next.js, there is an API layer in the pages/ folder. Rename the pages/api/hello.js file to comments.js. Now, whenever you visit the URL /api/comments, you will see a JSON object like this: {name: \"John Doe\"}. Recall that file names determine URL paths (api/comments.js becomes /api/comments). We will modify our code so that we can retrieve and add comments instead. Creating a Comment . In components/Blog.js, add this &lt;form&gt; to the bottom of the &lt;main&gt; component (under the &lt;article&gt;). &lt;main&gt; &lt;article&gt;...&lt;/article&gt; &lt;form method=\"POST\" action=\"/api/comments\"&gt; &lt;fieldset&gt; &lt;legend&gt;Leave a Comment&lt;/legend&gt; &lt;input name=\"name\" placeholder=\"Anonymous\" /&gt; &lt;textarea name=\"content\" rows=\"3\" /&gt; &lt;/fieldset&gt; &lt;input type=\"submit\" value=\"Submit\" /&gt; &lt;/form&gt; &lt;/main&gt; . The method=\"POST\" attribute on the form means that the form is for sending data (POSTing data). The action=\"/api/comments\" means that the data will be sent to that URL. In pages/api/comments.js, we need to add some code so that we can store the data sent from the user interface in our database. export default async (req, res) =&gt; { if (req.method == \"POST\") { // POST request const res = await fetch( \"https://meritacademy.herokuapp.com/api/comments/\", { method: \"post\", headers: { \"Content-Type\": \"application/json\", Authorization: `Api-Key ${process.env.APIKEY}`, }, body: req.body, } ) console.log(await res.json()) } } . Prevent Redirect to /api/comments on Submit . In components/Blog.js, replace the form‚Äôs opening tag with this to prevent the page from redirecting on submit (done with the onSubmit prop). &lt;form method=\"POST\" action=\"/api/comments\" onSubmit={e =&gt; e.preventDefault()}&gt; . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/05/#comments-on-a-blog",
    "relUrl": "/docs/react-js/next-blog-tutorial/05/#comments-on-a-blog"
  },"216": {
    "doc": "Part 5 - APIs and Databases",
    "title": "Part 5 - APIs and Databases",
    "content": "NOTE: If you are in the App and Web Development class at Merit, this page is extra. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial/05/",
    "relUrl": "/docs/react-js/next-blog-tutorial/05/"
  },"217": {
    "doc": "Scripting",
    "title": "Scripting: Finishing our Platformer",
    "content": "Let‚Äôs add some code to control our player. Select the Player from the Hierarchy and Add a Script Component called ‚ÄúPlayerController‚Äù. The script will be placed in the Assets folder. Double-click on it to open it in your C# code editor. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/05/#scripting-finishing-our-platformer",
    "relUrl": "/docs/unity-and-cs/platformer-basics/05/#scripting-finishing-our-platformer"
  },"218": {
    "doc": "Scripting",
    "title": "Default Script",
    "content": "Start() and Update() . For code that you want to run once, put it in the Start() method. For code that you want to run every frame (like animations), put it in the Update() frame. using System.Collections; using System.Collections.Generic; using UnityEngine; public class PlayerController : MonoBehaviour { // Start is called before the first frame update void Start() { } // Update is called once per frame void Update() { } } . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/05/#default-script",
    "relUrl": "/docs/unity-and-cs/platformer-basics/05/#default-script"
  },"219": {
    "doc": "Scripting",
    "title": "Variables and FixedUpdate",
    "content": "We will need some variables to reference the data that we will be using. For example, the Rigidbody2D rb will be a reference to the Rigidbody2D attached to our Player. Variables should be private unless you want to be able to set them in the Unity Inspector later. Additionally, we will replace void Update() with void FixedUpdate(), which gets called every frame like Update() but is used for physics. public class PlayerController : MonoBehaviour { private bool isGrounded; private Rigidbody2D rb; // Public variables are set in the Unity Inspector public float xSpeed; public float jumpStrength; // Initialize all private variables in Start void Start() { isGrounded = false; rb = GetComponent&lt;Rigidbody2D&gt;(); } // FixedUpdate is used for physics (Rigidbody2D) void FixedUpdate() { } } . Add horizontal movement . Here‚Äôs the code for horizontal movement. I‚Äôll walk through it step by step below. void FixedUpdate() { float xHat = new Vector2(Input.GetAxis(\"Horizontal\"), 0).normalized.x; float vx = xHat * xSpeed; rb.AddForce(transform.right * vx); } . float xHat = new Vector2(Input.GetAxis(\"Horizontal\"), 0).normalized.x; . | float is a data type for decimals. | Vector2 is a object that can store an x and y value. new creates that object. | Input.GetAxis(\"Horizontal\") gets the input from the keyboard (Left/Right Arrows, A/D by default). | .normalized.x makes it so that we get 1 for pushing left (positive x) and -1 for pushing right (negative x). | . float vx = xHat * xSpeed; rb.AddForce(transform.right * vx); . Because xHat is just a positive or negative 1, multiplying it by xSpeed will create a value for the velocity vx that sends the player left or right when added as a force to the Rigidbody. Add vertical movement . void FixedUpdate() { float xHat = new Vector2(Input.GetAxis(\"Horizontal\"), 0).normalized.x; float vx = xHat * xSpeed; rb.AddForce(transform.right * vx); float yHat = new Vector2(0, Input.GetAxis(\"Vertical\")).normalized.y; if (isGrounded &amp;&amp; yHat == 1) { float vy = yHat * jumpStrength; isGrounded = false; rb.AddForce(transform.up * vy); } } void OnCollisionEnter2D(Collision2D collision) { // You can get rid of the Debug.Log when you want Debug.Log(collision.gameObject.tag); isGrounded = collision.gameObject.tag == \"Ground\"; } . if (isGrounded &amp;&amp; yHat == 1) { float vy = yHat * jumpStrength; isGrounded = false; rb.AddForce(transform.up * vy); } . We only want to move vertical (jump) if we are touching the ground AND the player‚Äôs input is up. If both of those conditions are true, we will add a vertical force to the Rigidbody. void OnCollisionEnter2D(Collision2D collision) . This method executes whenever the player collides with something. We can check to see if the collision object‚Äôs tag is ‚ÄúGround‚Äù and enable/disable jumping accordingly. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/05/#variables-and-fixedupdate",
    "relUrl": "/docs/unity-and-cs/platformer-basics/05/#variables-and-fixedupdate"
  },"220": {
    "doc": "Scripting",
    "title": "Final Code",
    "content": "using System.Collections; using System.Collections.Generic; using UnityEngine; public class PlayerController : MonoBehaviour { private bool isGrounded; private Rigidbody2D rb; // OPTIONAL: include if you want to limit x velocity private float maxVelX = 10; public float xSpeed; public float jumpStrength; void Start() { isGrounded = false; rb = GetComponent&lt;Rigidbody2D&gt;(); } void FixedUpdate() { float xHat = new Vector2(Input.GetAxis(\"Horizontal\"), 0).normalized.x; float vx = xHat * xSpeed; rb.AddForce(transform.right * vx); float yHat = new Vector2(0, Input.GetAxis(\"Vertical\")).normalized.y; if (isGrounded &amp;&amp; yHat == 1) { float vy = yHat * jumpStrength; isGrounded = false; rb.AddForce(transform.up * vy); } // OPTIONAL: include if you want to limit x velocity rb.velocity = new Vector2(Vector2.ClampMagnitude(rb.velocity, maxVelX).x, rb.velocity.y); } void OnCollisionEnter2D(Collision2D collision) { isGrounded = collision.gameObject.tag == \"Ground\"; } } . Setting Your Public Variables in the Inspector . In the Unity Inspector, you‚Äôll see X Speed and Jump Strength from your public variables in your script. Test out different values unitl you like them. You might also consider adjusting drag and gravity in the Rigidbody. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/05/#final-code",
    "relUrl": "/docs/unity-and-cs/platformer-basics/05/#final-code"
  },"221": {
    "doc": "Scripting",
    "title": "Final Game",
    "content": "Here‚Äôs an example of the final game. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/05/#final-game",
    "relUrl": "/docs/unity-and-cs/platformer-basics/05/#final-game"
  },"222": {
    "doc": "Scripting",
    "title": "Scripting",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/05/",
    "relUrl": "/docs/unity-and-cs/platformer-basics/05/"
  },"223": {
    "doc": "Prefabs and Scenes",
    "title": "Prefabs and Scenes",
    "content": "Now that we have a scene working with movement, collectibles, and a score, we need to have a way to quickly reuse these GameObjects so that we can make multiple scenes (levels). To do this, we will use Prefabs (read this page in the Unity docs about Prefabs for more). ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/05/",
    "relUrl": "/docs/unity-and-cs/top-down-game/05/"
  },"224": {
    "doc": "Prefabs and Scenes",
    "title": "Create Prefabs from GameObjects",
    "content": ". | Drag each of your GameObjects from the Hierarchy to the Assets/Prefabs window. You should see their names turn blue in your Hierarchy. | Rename your Scene to ‚ÄúScene1‚Äù because we will have multiple scenes. | . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/05/#create-prefabs-from-gameobjects",
    "relUrl": "/docs/unity-and-cs/top-down-game/05/#create-prefabs-from-gameobjects"
  },"225": {
    "doc": "Prefabs and Scenes",
    "title": "Create a New Scene and Add Prefabs",
    "content": "1. Create a New Scene . Use Ctrl+N or open File &gt; New Scene to create a new scene. Select ‚ÄúBasic 2D (Built-in)‚Äù and click ‚ÄúCreate‚Äù. 2. Save the Scene . Once the scene is created, right-click on it in the Hierarchy and click ‚ÄúSave Scene As‚Äù . Select your Scenes Folder &lt;projectname&gt;/Assets/Scenes and save the scene as ‚ÄúScene2‚Äù. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/05/#create-a-new-scene-and-add-prefabs",
    "relUrl": "/docs/unity-and-cs/top-down-game/05/#create-a-new-scene-and-add-prefabs"
  },"226": {
    "doc": "Prefabs and Scenes",
    "title": "3. Include the Scene in Your Build Settings",
    "content": "We need to include the scene in the build settings even if you are not planning on releasing this game. Open Build Settings with Ctrl+Shift+B or from the File menu. Check the boxes next to your each of your scenes. If you do plan on releasing this game to make it playable on the web, select ‚ÄúWebGL‚Äù for the Platform while you are here. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/05/#3-include-the-scene-in-your-build-settings",
    "relUrl": "/docs/unity-and-cs/top-down-game/05/#3-include-the-scene-in-your-build-settings"
  },"227": {
    "doc": "Prefabs and Scenes",
    "title": "4. Add Prefabs to your Scene",
    "content": "If it‚Äôs not already open, open Scene2 from your Assets/Scenes folder in the Project window. Navigate to your Prefabs folder in the Project window and drag any prefabs that you want to include into your Scene‚Äôs Hierarchy. Set any variables as needed (i.e. the Player speed, the Collectible‚Äôs score text). When you press play, the current scene (in this case, Scene2) will be what loads. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/05/#4-add-prefabs-to-your-scene",
    "relUrl": "/docs/unity-and-cs/top-down-game/05/#4-add-prefabs-to-your-scene"
  },"228": {
    "doc": "Repetition",
    "title": "Repetition",
    "content": "Repeating lines of code is one of the fastest ways to get something done. Quite often in computer science, it makes more sense to repeat lines of code rather than write out another set of instructions. For example, the square you created earlier uses the same two instructions four times. Rather than writing them out four times, you could write them out once but add an instruction to repeat them. In Java there are two types of loops that you are likely to use: a while loop and a for loop. If you want a section of code to repeat forever, or until a condition is set, then a while loop might be best. If you want to loop for a set number of times, then a for loop is preferable. Here, we have used a while true loop. This means that the code inside the loop (i.e. the code which is indented) will repeat forever. If you try to run it, Greenfoot will actually get stuck in a execution loop and freeze. DO NOT TRY TO RUN IT! . // while true loop, this doesn‚Äôt work in Greenfoot because the act function is in its own event loop public void act() { // Add your action code here. int r = 255; int g = 0; int b = 124; setColor(r, g, b); while (true) { moveAndDraw(50); turn(90); moveAndDraw(50); } } . This type of loop is not going to be very useful for drawing shapes with Turtle where you want to be more precise. In this example, a for loop has been used. Press Run to see what happens. public void act() { // Add your action code here. int r = 255; int g = 0; int b = 124; setColor(r, g, b); for (int i = 0; i &lt; 8; i++) { // Print out i to the terminal window. System.out.println(i); moveAndDraw(50); turn(45); } } . A for loop repeats instructions a set number of times, in this case 8 times. A for loop has an associated variable (called i here). In this example, i starts from 0 and increases by 1 each time. Let‚Äôs apply this to the code to draw a square: . for (int j = 0; j &lt; 4; j++) { moveAndDraw(50); turn(90); } . Copy and paste this code into the Greenfoot editor above and run it. The turtle has been asked to repeat two instructions four times to make a square. Once you have created one shape using a loop, you can repeat the shape again and again by putting it inside another loop. This is a great way to draw spirals. Adapt your code by making it look like this: . for (int i = 0; i &lt; 30; i++) { for (int j = 0; j &lt; 4; j++) { moveAndDraw(50); turn(90); } turn(25); } . A spiral can be made by turning a small degree and then moving forward a small amount. The section of code for making a square is inside another for loop that repeats it 30 times, each time turning the cursor 25 degress to make a pleasing spiral shape. ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/06/",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/06/"
  },"229": {
    "doc": "Repetition",
    "title": "Challenge",
    "content": "Try to complete each of the challenges below. | Can you alter the for loop so that it draws a more interesting spiral using one of the shapes you made earlier, like a triangle or circle? | Adding a few extra lines where you alter the variables r, g, and b would allow you to make a multicoloured spiral. Have a go at creating a rainbow spiral. | . Hint 1 Just like in the previous exercise, you can add to or subtract from the r, g, and b variables. Hint 2 Just alter the variables within the for loop: . for (int i = 0; i &lt; 30; i++) { setColor(r, g, b); for (int j = 0; j &lt; 4; j++) { moveAndDraw(50); turn(90); // ADD SOMETHING HERE } turn(25); } . Hint 3 Try this to get started: . for (int i = 0; i &lt; 30; i++) { setColor(r, g, b); for (int j = 0; j &lt; 4; j++) { moveAndDraw(50); turn(90); r -= 1; g += 1; } turn(25); } . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/06/#challenge",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/06/#challenge"
  },"230": {
    "doc": "String, Number, and Array Methods",
    "title": "String, Number, and Array Methods",
    "content": "So far, we have seen two basic data types, string and number. We have also seen how objects allow us to store a group of data and functions together. These structures are great for storing individual pieces of data. To store collections of the same data type together (i.e. a list of numbers), we use arrays. In this section, we will explore how to work with string, numbers, and arrays to store and modify data. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/06/",
    "relUrl": "/docs/javascript/basics/06/"
  },"231": {
    "doc": "String, Number, and Array Methods",
    "title": "String Methods",
    "content": "Strings can be treated as objects in their own right due to the fact that they store data and have methods natively associated with each string instance. This means that you can modify any string data with these same built-in methods. Example: Make All Characters in a String Lowercase . Let‚Äôs say you have an application where usernames are stored all lowercase. However, people might still include capitals when logging in. To ensure that the data is all lowercase, we can take the user‚Äôs input and force casing with the toLowerCase() string method. let username = window.prompt(\"What is your username?\") // You can make any string lowercase with the toLowerCase() method. username = username.toLowerCase() document.body.innerHTML = \"Welcome, \" + username . Example Program Flow . | User types in \"BobJohnson\" for their username. | Program forces casing, storing \"bobjohnson\" in the username variable. | User sees Welcome, bobjohnson on the screen. | . Popular String Methods and Fields . | Property | Description | . | length | Gets the length of the string (e.g. varName.length). | . | replace(old, new) | Replace a portion of a string with another. | . | slice(start, end) | Returns a segment of the string. | . | toLowerCase() | Returns a lowercase version of the string. | . | toUpperCase() | Returns an uppercase version of the string. | . More Practice and Resources . | w3schools Strings | w3schools String Methods | w3schools String Search | w3schools String Templates | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/06/#string-methods",
    "relUrl": "/docs/javascript/basics/06/#string-methods"
  },"232": {
    "doc": "String, Number, and Array Methods",
    "title": "Number Methods",
    "content": "Like strings, numbers have properties and methods associated with them. Example: Get a Money Value From a User . Let‚Äôs say you have an awesome app where users just give you money all the time. Here‚Äôs how we could ensure that the money they input is formatted correctly; as a number with two decimal points. let money = window.prompt(\"How much money are you going to give me today?\") // Convert the users input string to a float (decimal number) money = parseFloat(money) // Ensure that there are two decimal places money = money.toFixed(2) document.body.innerHTML = `Thank you for sending me $${money}.` . Example Program Flow . | User types in \"$25\" and that is stored as a string in money. | After parseFloat, the value of money is 25 (number). | After toFixed(2) the value of money is 25.00. | User sees Thank you for sending me $25.00. on the screen. | . Popular Number Methods and Fields . | Property | Description | . | Number.MAX_VALUE | The maximum value that can be stored with the number data type. | . | Number.parseInt(value) | Converts a data type like a string to a number (no decimals). | . | Number.parseFloat(value) | Converts a data type like a string to a number (with decimals). | . | Number.toFixed(decimalPlaces) | Represents data as a fixed-point number with a certain number of decimal places. | . | Number.toPrecision(decimalPlaces) | Like toFixed but returns a string instead. | . More Practice and Resources . | w3schools Numbers | w3schools Number Methods | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/06/#number-methods",
    "relUrl": "/docs/javascript/basics/06/#number-methods"
  },"233": {
    "doc": "String, Number, and Array Methods",
    "title": "Arrays",
    "content": "An array is a list of values in JavaScript. Arrays are especially powerful for working with a collection of elements in the DOM. Example 1: Creating and Accessing Values From an Array . // Initialize an array of names. // Notice the use of const, this is common practice (instead of using let). const names = [\"Jeff\", \"Katie\", \"Lisa\", \"Mike\"] // Access the 0th element in the list. console.log(names[0]) // Access the 3rd element in the list. console.log(names[3]) // How many items are in the list? console.log(names.length) . Jeff Mike 4 . The position of each element in the array is known as the index. Notice that arrays are indexed starting with the number 0 for the leftmost element. The brackets [] are the array accessor operator and allow you to get an element by index. Example 2: Setting a Value in the Array . You can also use the array accessor operator for changing values in an array. const names = [\"Jeff\", \"Katie\", \"Lisa\", \"Mike\"] // Change the name at index 0 to \"Joe\" names[0] = \"Jeff\" console.log(names) . [\"Joe\", \"Katie\", \"Lisa\", \"Mike\"] . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/06/#arrays",
    "relUrl": "/docs/javascript/basics/06/#arrays"
  },"234": {
    "doc": "String, Number, and Array Methods",
    "title": "Array Methods",
    "content": "Here are some methods that allow you to perform more complex operations with arrays. Example 1: Adding Elements to an Array with push . const names = [\"Jeff\", \"Katie\", \"Lisa\", \"Mike\"] // Add Norman to the end of the array. names.push(\"Norman\") console.log(names) . [\"Joe\", \"Katie\", \"Lisa\", \"Mike\", \"Norman\"] . Example 2: Iteration with forEach . In this example, we are getting all the p elements from the DOM and changing the text color to green. &lt;body&gt; &lt;div&gt; &lt;p&gt;Here's some text.&lt;/p&gt; &lt;p&gt;Here's some more text.&lt;/p&gt; &lt;p&gt;Here's even more text.&lt;/p&gt; &lt;/div&gt; &lt;script&gt; // Array.from() is needed to convert from an HTMLCollection object to an array const paragraphs = Array.from(document.querySelectorAll(\"p\")) // forEach executes a callback function for each element in the array paragraphs.forEach(function (el, i) { el.style.color = \"green\" }) &lt;/script&gt; &lt;/body&gt; . Here's some text. Here's some more text. Here's even more text. Arrow Functions . Here‚Äôs a more concise way to write the same JavaScript above, by replacing the function with an arrow function. Arrow functions are typically used as a parameter to another function (in this case, as a parameter to the forEach function). For more on arrow functions, visit w3schools. const paragraphs = Array.from(document.querySelectorAll()) paragraphs.forEach((el, i) =&gt; { el.style.color = \"green\" }) . Example 3: Item Removal with splice . &lt;body&gt; &lt;div&gt; &lt;p&gt;Here's some text.&lt;/p&gt; &lt;p&gt;Here's some more text.&lt;/p&gt; &lt;p&gt;Here's even more text.&lt;/p&gt; &lt;/div&gt; &lt;script&gt; let paragraphs = Array.from(document.querySelectorAll(\"p\")) // clear the div of its paragraphs const div = document.querySelector(\"div\") div.innerHTML = \"\" // remove the second paragraph (index 1) from the paragraphs array paragraphs.splice(1, 1) // add each paragraph back to the div paragraphs.forEach((el, i) =&gt; { div.innerHTML += `&lt;p&gt;${el.innerText}&lt;/p&gt;` }) &lt;/script&gt; &lt;/body&gt; . Here's some text. Here's even more text. Popular Array Methods . | Method | Description | . | forEach(callbackFn) | Executes a callback function for each element in the array. | . | pop() | Removes the last item of the array. | . | push(item) | Appends an item to the end of the array. | . | sort(compareFn) | Given a compare function, sorts the array. | . | splice(index, amount) | Removes a certain amount of element(s) from the array by index. You can also use splice to insert elements at a specific index. | . More Practice and Resources . | w3schools Arrays | w3schools Array Methods | w3schools Array Sort | w3schools Array Iteration | w3schools Array Const | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/06/#array-methods",
    "relUrl": "/docs/javascript/basics/06/#array-methods"
  },"235": {
    "doc": "String, Number, and Array Methods",
    "title": "Practice Task: Remove Items From List",
    "content": "Make an app that allows you to remove items from a list with the click of a button. Here‚Äôs some example starting HTML: . &lt;h1&gt;Favorite Sports&lt;/h1&gt; &lt;button&gt;Remove Item&lt;/button&gt; &lt;ul&gt; &lt;li&gt;Ultimate Frisbee&lt;/li&gt; &lt;li&gt;Basketball&lt;/li&gt; &lt;li&gt;Running&lt;/li&gt; &lt;/ul&gt; . | Have a list of at least 3 items in HTML. Use a &lt;ol&gt; or &lt;ul&gt; element for the list wrapper element and &lt;li&gt; elements for the list items. (2 pts) | Have a button that removes one item from the list at a time. (6 pts) . | Which item the button removes is up to you. | If there are no items, do nothing. | After an item is removed, the updated list should be shown in the HTML. | . | Use at least one of the following array methods: forEach, splice. (2 pts) | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/06/#practice-task-remove-items-from-list",
    "relUrl": "/docs/javascript/basics/06/#practice-task-remove-items-from-list"
  },"236": {
    "doc": "Input Validator",
    "title": "Input Validator",
    "content": "We will explore for loops vs. while loops in this project. We will also learn how to debug three different types of errors. Fork this replit project to begin: https://replit.com/@buckldav/InputValidatorStarter. ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/06/#input-validator",
    "relUrl": "/docs/processing/basics/06/#input-validator"
  },"237": {
    "doc": "Input Validator",
    "title": "Syntax Errors",
    "content": "Our Input Validator must meet the following requirements: . | Check that the password is 8 letters or longer. | Continually reprompt until that condition is met. | . Syntax Errors occur when there is a spelling or grammar error in the code. Consider the code you‚Äôve started with: . let input = \"\" function setup() { for (let i = 0; i &lt; 3; i++) { input = prompt(\"Enter a password\") if (input.length &lt; 8) { alert(\"Too Short\") } alert(\"Valid password!\") } . Console output: . SyntaxError: Unexpected end of input at /script.js:9:2 . This error message indicates that there is something wrong around line 9. The ‚Äúend of input‚Äù indicates that we are likely missing a {} or a (). One thing that can help us debug this is indenting code blocks (making sure each {} lines up). Select lines of code and use Tab to indent to the right and Shift+Tab to unindent to the left. Code after tabbing: . let input = \"\" function setup() { for (let i = 0; i &lt; 3; i++) { input = prompt(\"Enter a password\") if (input.length &lt; 8) { alert(\"Too Short\") } alert(\"Valid password!\") } . We are missing one }. We only want the \"Valid password!\" message to appear after the loop. Let‚Äôs make sure that we add the } before the validity message. let input = \"\" function setup() { for (let i = 0; i &lt; 3; i++) { input = prompt(\"Enter a password\") if (input.length &lt; 8) { alert(\"Too Short\") } } alert(\"Valid password!\") } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/06/#syntax-errors",
    "relUrl": "/docs/processing/basics/06/#syntax-errors"
  },"238": {
    "doc": "Input Validator",
    "title": "Logic Errors",
    "content": "Logic Errors occur when the program runs fine but gives an undesired output. Currently the program correctly checks for the length of the password but asks the user for a password 3 times no matter what. We need to modify our code so the loop continues until the password is valid and then stops. While Loops . As opposed to for loops which execute for a certain number of times, while loops execute while a condition is true. while (condition is true) { // execute this } . We can modify our code to have a loop where the user is prompted for a password until they get it right. Replace the for loop with a while loop. let input = \"\" function setup() { while (input.length &lt; 8) { input = prompt(\"Enter a password\") if (input.length &lt; 8) { alert(\"Too Short\") } } alert(\"Valid password!\") } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/06/#logic-errors",
    "relUrl": "/docs/processing/basics/06/#logic-errors"
  },"239": {
    "doc": "Input Validator",
    "title": "Runtime Errors",
    "content": "Runtime Errors occur while the program is running; usually the user does something which causes the program to crash. To demonstrate, we can crash the program if the user types in something too short. Add the line throw \"SHORT\" in your if statement to throw an error to the console and crash the program. let input = \"\" function setup() { while (input.length &lt; 8) { input = prompt(\"Enter a password\") if (input.length &lt; 8) { alert(\"Too Short\") // Throws an error with the message \"SHORT\" // Crashes the program if unhandled throw \"SHORT\" } } alert(\"Valid password!\") } . Console output (for short input): . Uncaught (in promise) SHORT . Notice how the program crashed when the password was too short? You can now get rid of the throw \"SHORT\" line. ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/06/#runtime-errors",
    "relUrl": "/docs/processing/basics/06/#runtime-errors"
  },"240": {
    "doc": "Input Validator",
    "title": "Final Code:",
    "content": "https://replit.com/@buckldav/InputValidator . let input = \"\" function setup() { while (input.length &lt; 8) { input = prompt(\"Enter a password\") if (input.length &lt; 8) { alert(\"Too Short\") } } alert(\"Valid password!\") } . ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/06/#final-code",
    "relUrl": "/docs/processing/basics/06/#final-code"
  },"241": {
    "doc": "Input Validator",
    "title": "Input Validator",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/06/",
    "relUrl": "/docs/processing/basics/06/"
  },"242": {
    "doc": "Platformer Extras",
    "title": "Platformer Extras",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/06/",
    "relUrl": "/docs/unity-and-cs/platformer-basics/06/"
  },"243": {
    "doc": "Platformer Extras",
    "title": "Adding Graphics to Your Game",
    "content": "Try adding your own graphics to your Assets folder (bottom window in Unity) and then adding them to the ‚ÄúSprite‚Äù property of your Player or to your Ground Tilemap. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/06/#adding-graphics-to-your-game",
    "relUrl": "/docs/unity-and-cs/platformer-basics/06/#adding-graphics-to-your-game"
  },"244": {
    "doc": "Platformer Extras",
    "title": "Falling to Death + Respawn",
    "content": "In your PlayerController.cs script, try adding an if statement to your void FixedUpdate() method. The if statement will reload the Scene if the player falls below a certain y position. // Add this to the top of your file using UnityEngine.SceneManagement; // Add this to the bottom of your FixedUpdate method if (transform.position.y &lt; -5) { // Reload the Scene if you get below -5 (or whatever y position you determine) SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex); } . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/06/#falling-to-death--respawn",
    "relUrl": "/docs/unity-and-cs/platformer-basics/06/#falling-to-death--respawn"
  },"245": {
    "doc": "Platformer Extras",
    "title": "Die on Collision + Respawn",
    "content": ". | Add a GameObject that represents an enemy. | Give it an ‚ÄúEnemy‚Äù tag. | Add this to your void OnCollisionEnter2D(Collision2D collision) method in your PlayerController.cs script. | . if (collision.gameObject.tag == \"Enemy\") { SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex); } . ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/06/#die-on-collision--respawn",
    "relUrl": "/docs/unity-and-cs/platformer-basics/06/#die-on-collision--respawn"
  },"246": {
    "doc": "Platformer Extras",
    "title": "Timer",
    "content": "Visit this page for a tutorial on how to make an in-game timer for your platformer. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/06/#timer",
    "relUrl": "/docs/unity-and-cs/platformer-basics/06/#timer"
  },"247": {
    "doc": "Platformer Extras",
    "title": "Add another Tilemap",
    "content": "Add another tilemap that either doesn‚Äôt have collision or is tagged as ‚ÄúWall‚Äù instead of Ground so that your Player can‚Äôt jump off it. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/06/#add-another-tilemap",
    "relUrl": "/docs/unity-and-cs/platformer-basics/06/#add-another-tilemap"
  },"248": {
    "doc": "Platformer Extras",
    "title": "Make it Bouncier",
    "content": "Prevents wall jumping a little better. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/platformer-basics/06/#make-it-bouncier",
    "relUrl": "/docs/unity-and-cs/platformer-basics/06/#make-it-bouncier"
  },"249": {
    "doc": "Traverse Through Scenes and Doors",
    "title": "Traverse Through Scenes and Doors",
    "content": "Now that we have two levels, we need to make a way for a player to get from one to the other. In this tutorial, we will create a Door GameObject that, when collided with, will load the next scene. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/06/",
    "relUrl": "/docs/unity-and-cs/top-down-game/06/"
  },"250": {
    "doc": "Traverse Through Scenes and Doors",
    "title": "Create Door GameObject",
    "content": "In Scene1, Create a Door GameObject in the Hierarchy that has the following properties: . | A name and tag of ‚ÄúDoor‚Äù | A script called ‚ÄúDoor‚Äù | A Polygon Collider 2D | . When you have created it and placed it in your scene, drag the GameObject from the Hierarchy to the prefabs folder. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/06/#create-door-gameobject",
    "relUrl": "/docs/unity-and-cs/top-down-game/06/#create-door-gameobject"
  },"251": {
    "doc": "Traverse Through Scenes and Doors",
    "title": "Door Script",
    "content": "Open the Door.cs script and add the following: . using UnityEngine; using UnityEngine.SceneManagement; public class Door : MonoBehaviour { private void OnCollisionEnter2D(Collision2D other) { // If the player collided with the door if (other.gameObject.tag == \"Player\") { // Load the next scene // The buildIndex is from the Build Settings int currentScene = SceneManager.GetActiveScene().buildIndex; int nextScene = currentScene + 1; SceneManager.LoadScene(nextScene, LoadSceneMode.Single); } } } . The buildIndex in the code is from the Build Settings (see below, Ctrl+Shift+B to open). You can load any scene by index. The buildIndex for Scenes/Scene1 in this case is 0. So, when the Player collides with a Door, the next Scene in the Build Settings will be loaded. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/06/#door-script",
    "relUrl": "/docs/unity-and-cs/top-down-game/06/#door-script"
  },"252": {
    "doc": "Traverse Through Scenes and Doors",
    "title": "Testing",
    "content": "Test out your game. Add multiple scenes. Add collectibles that take away from your score. Keep track of something else in addition to score on the HUD. Get creative! . See the result of this Unity tutorial at https://github.com/buckldav/top-down-unity. Play the result at https://td.dbuckley.dev. ",
    "url": "https://cs.dbuckley.dev/docs/unity-and-cs/top-down-game/06/#testing",
    "relUrl": "/docs/unity-and-cs/top-down-game/06/#testing"
  },"253": {
    "doc": "Better Spirals",
    "title": "Better Spirals",
    "content": "Have a go at reading over the code below and guessing what it does. Then run it to see if you were correct. // Add your action code here. int r = 255; int g = 0; int b = 0; for (int i = 0; i &lt; 1000; i++) { g += 1; b += 1; r -= 1; setColor(r, g, b); moveAndDraw(i); turn(98); } . Our code has made a multicoloured spiral by changing the r, g, and b variables. The colours are a little one-dimensional, though. Can you do a better job? . Additionally, your code likely stopped early because of this error: . java.lang.IllegalArgumentException: Color parameter outside of expected range: Red Green Blue . Can you modify the loop so it runs fewer times and doesn‚Äôt run out of colors? Eventually, we will see how to avoid running out of colors but for now shorten your loop. ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/07/",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/07/"
  },"254": {
    "doc": "Loopy Colors",
    "title": "Loopy Colors",
    "content": "To get more interesting colors, you could write lots of color in a long list, and then keep changing the color of the turtle according to the color of the list. You can create arrays in Java, using square brackets [] and curly braces {}. Below is an example of a two-dimensional array of RGB colors: . int[][] colors = { {85, 211, 136}, {197, 196, 126}, {235, 233, 166}, {25, 135, 222}, {211, 64, 159}, {159, 165, 106}, {178, 160, 125}, {36, 192, 70}, {231, 184, 204}, {63, 203, 219} }; . This next bit gets a bit complicated. Have a look at the code below, then run it to see what happens. int[][] colors = { {85, 211, 136}, {197, 196, 126}, {235, 233, 166}, {25, 135, 222}, {211, 64, 159}, {159, 165, 106}, {178, 160, 125}, {36, 192, 70}, {231, 184, 204}, {63, 203, 219} }; for (int i = 0; i &lt; 10; i++) { setColor(colors[i][0], colors[i][1], colors[i][2]); moveAndDraw(50); } . The statement colors[i][0] is telling the program to choose the ‚Äúith‚Äù item in the list. Remember that i starts from 0 and goes up to 9. The [0] is getting the ‚Äú0th‚Äù number in the subarray, which we will use for the red value. What if you want a longer line? Try changing the number of loops in the for loop to i &lt; 20 and see what happens. Do you get an error? . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/08/",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/08/"
  },"255": {
    "doc": "Modulo to the Rescue",
    "title": "Modulo to the Rescue",
    "content": "In the previous example, you need a way to keep looping over the list items, so when i gets to 9, it will go back around and get the ‚Äú0th‚Äù item from the list again. This is where the modulo operator % can help you out. Look at the code below: run it somewhere in your act() method and see if you can figure out what is going on. You shoud get 0 to begin with. System.out.println(18 % 6); . Try changing the numbers in the print command. There are some examples to try below: . System.out.println(17 % 6); System.out.println(12 % 6); System.out.println(13 % 6); System.out.println(6 % 6); System.out.println(0 % 6); System.out.println(1 % 6); System.out.println(8 % 6); System.out.println(11 % 6); . Did you figure it out? The % operator prints out the remainder of a division. For example, 15 √∑ 6 is 2 with a remainder of 3. Therefore 15 % 6 would be 3. We can use this operator to help with the problem of running off the end of the list. If the for loop iterations go beyond the length of the list, you can just do a % of the length of the list. Have a look at the example below, and read through the code carefully to make sure you can see how the modulo operator is used. Try this for your for loop in the act() method. for (int i = 0; i &lt; 40; i++) { setColor(colors[i % colors.length][0], colors[i % colors.length][1], colors[i % colors.length][2]); moveAndDraw(i); turn(98); } . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/09/",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/09/"
  },"256": {
    "doc": "GitHub Pages with Jekyll",
    "title": "GitHub Pages with Jekyll",
    "content": "Want to create a site like this one? Follow these steps: . 1. Create a repository using the just-the-docs template . This site was created using just-the-docs. I have made a template version of just-the-docs that is easy to create a new repository from. Just visit this repository and select ‚ÄúUse this template.‚Äù . 2. Update config.yml . This file is where the settings for your Jekyll site are located. The baseurl should match your repository‚Äôs name and the url should have your GitHub username as the subdomain. Once each of the following settings match your repository, your GitHub pages site will be available at [https://.github.io/](https://.github.io/). title: Site Title description: Some docs for my class baseurl: \"/&lt;repo-name&gt;\" # the subpath of your site, e.g. /blog url: \"https://&lt;username&gt;.github.io\" # the base hostname &amp; protocol for your site, e.g. http://example.com . # Aux links for the upper right navigation aux_links: \"Site Title on GitHub\": - \"//github.com/&lt;username&gt;/&lt;repo-name&gt;\" . footer_content: 'Copyright &amp;copy; 2022 &lt;Your Name&gt;. Distributed by an &lt;a href=\"https://github.com/&lt;username&gt;/&lt;repo-name&gt;/tree/main/LICENSE.txt\"&gt;MIT license.&lt;/a&gt;' . 3. Change colors and fonts . Visit _sass/support/_variables.scss. Fonts . You can use Google Fonts by importing them. Set the $body-font-family and $mono-font-family variables. @import url(\"https://fonts.googleapis.com/css2?family=Inconsolata&amp;family=Kdam+Thmor+Pro&amp;display=swap\"); $body-font-family: \"Kdam Thmor Pro\", sans-serif !default; $mono-font-family: \"Inconsolata\", monospace !default; . Colors . The main colors to change are these: . $link-color: $blue-000 !default; $btn-primary-color: $blue-100 !default; . If you want to customize the purple, blue, green, yellow, or red color shades, I recommend using hsl color values to easily get different luminosities of the same hue. Example: . $yellow-000: hsl(50, 95%, 75%) !default; $yellow-100: hsl(50, 95%, 66%) !default; $yellow-200: hsl(50, 95%, 57%) !default; $yellow-300: hsl(50, 95%, 48%) !default; . 4. Add content . index.md is the home page of your site. Visit the docs folder to add and modify Markdown files. See the included example files for more. 5. Local development . Clone your repository. Ensure you have Ruby installed by running ruby -v in a terminal (if not, download Ruby here). Then, run jekyll serve to server your files. ",
    "url": "https://cs.dbuckley.dev/docs/git/10/",
    "relUrl": "/docs/git/10/"
  },"257": {
    "doc": "Enormous Lists",
    "title": "Enormous Lists",
    "content": "You can now have a go at creating a list of colours that‚Äôs a little longer than before. To do this you can use a while loop. Unlike a for loop, a while loop keeps running until a specific condition has been met. Look at the code below. The while loop is used to gradually increase the value of g until it reaches 255. Each time, the colours are added to the list. int r = 255; int g = 0; int b = 0; // When creating an array, we have to allocate its size. // 256 is the number of colors added with the loop below. // 3 allows for r, g, and b to be stored. int[][] colors = new int[256][3]; // Color Index int c = 0; while (g &lt; 256) { colors[c][0] = r; colors[c][1] = g; colors[c][2] = b; g += 1; c += 1; } for (int i = 0; i &lt; 2000; i++) { setColor(colors[i % colors.length][0], colors[i % colors.length][1], colors[i % colors.length][2]); moveAndDraw(i); turn(98); } . Result: . Can you add in two more while loops to add more colours? The next loop should gradually decrease r until it reaches 0. The final one should then increase b until it reaches 255. Good luck! . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/10/",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/10/"
  },"258": {
    "doc": "Beego Part 5 - Users and Admin Interface Part 1",
    "title": "Users and Admin Interface Part 1",
    "content": "Intro video: How are passwords cracked? Watch at least the first 7 minutes. ",
    "url": "https://cs.dbuckley.dev/docs/golang/admin/#users-and-admin-interface-part-1",
    "relUrl": "/docs/golang/admin/#users-and-admin-interface-part-1"
  },"259": {
    "doc": "Beego Part 5 - Users and Admin Interface Part 1",
    "title": "Password Crytography",
    "content": "It‚Äôs a bad idea to store passwords in plaintext [citation needed]. We will use bcrypt, a common and easy to implement hashing algorithm to encrypt user passwords. Hashing algorithms are one-way cryptography, meaning that you can‚Äôt undo the encryption. When users authenticate, their password input is hashed and compared with the hash stored on the database. New folder and file: utils/password.go. package utils import ( \"golang.org/x/crypto/bcrypt\" ) func HashPassword(password []byte) (string, error) { // Generate a hash hash, err := bcrypt.GenerateFromPassword(password, bcrypt.DefaultCost) if err != nil { return \"\", err } return string(hash), nil } /* * Returns true if validated. */ func CheckPassword(hashedPassword []byte, password []byte) bool { return bcrypt.CompareHashAndPassword(hashedPassword, password) == nil } . ",
    "url": "https://cs.dbuckley.dev/docs/golang/admin/#password-crytography",
    "relUrl": "/docs/golang/admin/#password-crytography"
  },"260": {
    "doc": "Beego Part 5 - Users and Admin Interface Part 1",
    "title": "User Model",
    "content": "We need to make a User model that can be saved to the database. models/default.go . type User struct { Id uint64 `orm:\"auto\"` // this automatically creates an integer primary key Name string `orm:\"size(100)\"` Email string `orm:\"size(255);unique\"` Password string `orm:\"size(255)\"` } . What does a more complex User model look like? Here is an example. type User struct { Id uint64 `orm:\"auto\"` // this automatically creates an integer primary key Name string `orm:\"size(100)\"` Email string `orm:\"size(255);unique\"` Password string `orm:\"size(255)\"` IsAdmin bool // separate admin users from regular users IsDeleted bool // some applications \"soft delete\" (keep data) CreatedAt time.Time `orm:\"auto_now_add;type(datetime)\"` UpdatedAt time.Time `orm:\"auto_now;type(datetime)\"` } . When initializing the database, you will need to add the User model. - orm.RegisterModel(new(ContactModel)) + orm.RegisterModel(new(ContactModel), new(User)) . ",
    "url": "https://cs.dbuckley.dev/docs/golang/admin/#user-model",
    "relUrl": "/docs/golang/admin/#user-model"
  },"261": {
    "doc": "Beego Part 5 - Users and Admin Interface Part 1",
    "title": "Create User Script",
    "content": "This application will not have public registration. Therefore, we can create users with a script. Let‚Äôs start by writing a utility function that ensures that the user password gets hashed on save to database. utils/user.go . package utils import ( \"errors\" \"queenbee/models\" ) type LoginReq struct { Email string `form:\"email\"` Password string `form:\"password\"` } func SaveUser(user *models.User) (*models.User, error) { hashed, err := HashPassword([]byte(user.Password)) if err != nil { return nil, err } user.Password = hashed id, err := models.O.Insert(user) if err != nil { return nil, err } user.Id = uint64(id) return user, nil } func GetUserByEmail(email string) (*models.User, error) { user := models.User{Email: email} err := models.O.Read(&amp;user, \"Email\") if err != nil { return nil, err } return &amp;user, nil } func Authenticate(login *LoginReq) (*models.User, error) { user, err := GetUserByEmail(login.Email) if err != nil { return nil, err } if CheckPassword([]byte(user.Password), []byte(login.Password)) { return user, nil } else { err = errors.New(\"password validation failed.\") return nil, err } } . Then, we can write a script to create a user on the command line. Here are a few concepts the script uses. | readName(): Uses a buffer from bufio.Reader to get user input from the command line. The reader includes the \\n (newline) character, so that gets trimmed on the following line with strings.TrimSpace. If there is an error, the programs exits with a code 1. In general, code 0 is ‚ÄúOK‚Äù and everything else greater than 0 is an error. | readEmail(): Regular expression matching: Ensures that user input matches a certain format. In this case, we are matching against a pattern for email to make sure it‚Äôs a real email. | readPassword(): Uses a hidden input function called term.ReadPassword to read the password and then does a check to make sure they entered it correctly and that the password is sufficiently long. | . scripts/create_user.go . package main import ( \"bufio\" \"fmt\" \"os\" \"queenbee/models\" \"queenbee/utils\" \"regexp\" \"strings\" \"golang.org/x/term\" ) func readName(reader *bufio.Reader) string { fmt.Print(\"Full Name: \") name, err := reader.ReadString('\\n') name = strings.TrimSpace(name) if err != nil { fmt.Println(\"Error reading input:\", err) os.Exit(1) } return name } func readEmail(reader *bufio.Reader) string { fmt.Print(\"Email: \") email, err := reader.ReadString('\\n') email = strings.TrimSpace(email) if err != nil { fmt.Println(\"Error reading input:\", err) os.Exit(1) } // Define a regex pattern (e.g., to match an email address) pattern := `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$` // Compile the regex regex := regexp.MustCompile(pattern) if !regex.MatchString(email) { fmt.Println(\"The input is NOT a valid email address.\") os.Exit(1) } return email } func readPassword() string { const PASSWORD_LENGTH = 8 fmt.Print(\"Password: \") passbyte, err := term.ReadPassword(int(os.Stdin.Fd())) if err != nil { fmt.Println(\"Error reading input:\", err) os.Exit(1) } fmt.Print(\"\\nConfirm Password: \") passbyte2, err := term.ReadPassword(int(os.Stdin.Fd())) if err != nil { fmt.Println(\"Error reading input:\", err) os.Exit(1) } password, password2 := string(passbyte), string(passbyte2) if password != password2 { fmt.Println(\"Passwords do not match.\") os.Exit(1) } if len(password) &lt; PASSWORD_LENGTH { fmt.Printf(\"Password must be %d characters or more in length.\\n\", PASSWORD_LENGTH) os.Exit(1) } return password } func main() { models.InitDB() fmt.Println(\"Create User\") reader := bufio.NewReader(os.Stdin) name := readName(reader) email := readEmail(reader) password := readPassword() // Create User user := models.User{ Email: email, Name: name, Password: password, } _, err := utils.SaveUser(&amp;user) if err != nil { fmt.Println(\"Error saving user: \" + err.Error()) os.Exit(1) } else { fmt.Println(\"User created successfully!\") } } . To execute the script, use go run scripts/create_user.go. ",
    "url": "https://cs.dbuckley.dev/docs/golang/admin/#create-user-script",
    "relUrl": "/docs/golang/admin/#create-user-script"
  },"262": {
    "doc": "Beego Part 5 - Users and Admin Interface Part 1",
    "title": "User Login and Session",
    "content": "Session authentication is how we can authorize logged-in users. When a user logs in, a session is created on the server and the ID is stored in a cookie and sent to the browser. On subsequent requests, the cookie is used to match with the user‚Äôs session and authorize the user. What is the difference between authentication and authorization? . | Authentication is when a user logs in, typically with a credential like a password. Happens one time. Provides the user with a session or token. | Authorization is when a user presents a session cookie or token header in a request and the server allows them access to their resources. | . In this application, we will use beego‚Äôs session module. In conf/app.conf, enable session and we will use file-based sessions in development. In production, we will use PostgreSQL. conf/app.conf . appname = queenbee httpport = 8080 runmode = dev # Session configuration sessionon = true sessionname = \"queenbeesessionid\" sessiongcmaxlifetime = 3600 sessionprovider = \"memory\" sessioncookielifetime = 3600 sessioncookiehttponly = true sessioncookiesecure = false sessiondomain = \"\" sessioncookiepath = \"/\" . Admin Layout and Templates . In a new layout file, we will display the logged in user in the navigation bar. views/admin/layout.tpl . &lt;!DOCTYPE html&gt; &lt;html data-theme=\"emerald\"&gt; &lt;head&gt; &lt;title&gt;{{ .Title }}&lt;/title&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt; &lt;link rel=\"stylesheet\" href=\"{{.BaseUrl}}/static/css/output.css\"&gt; {{ block \"css\" . }}{{ end }} &lt;/head&gt; &lt;body&gt; &lt;header class=\"navbar bg-base-100 shadow-lg mb-4\"&gt; &lt;div class=\"navbar-start\"&gt; &lt;div class=\"flex gap-2\"&gt; &lt;a class=\"link link-primary\" href=\"/\"&gt;Home&lt;/a&gt; &lt;a class=\"link link-primary\" href=\"/about\"&gt;About&lt;/a&gt; &lt;a class=\"link link-primary\" href=\"/contact\"&gt;Contact&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"navbar-end\"&gt; {{ if .IsLoggedIn }} &lt;div class=\"dropdown dropdown-end\"&gt; &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-ghost btn-circle avatar\"&gt; &lt;div class=\"w-10 h-10 rounded-full bg-primary text-primary-content\"&gt; {{ if .User }} &lt;span class=\"sr-only\"&gt;{{ .User.Email }}&lt;/span&gt; {{ end }} &lt;svg style=\"margin: 7px;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt; &lt;path d=\"M16 16c4.418 0 8-3.582 8-8S20.418 0 16 0 8 3.582 8 8s3.582 8 8 8z\"/&gt; &lt;path d=\"M4 32c0-6.627 5.373-12 12-12s12 5.373 12 12\"/&gt; &lt;/svg&gt; &lt;/div&gt; &lt;/div&gt; &lt;ul tabindex=\"0\" class=\"menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow\"&gt; &lt;li class=\"menu-title\"&gt; &lt;span&gt;Welcome, {{ .User.Name}}!&lt;/span&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=\"/profile\"&gt; &lt;svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-4 h-4\"&gt; &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z\" /&gt; &lt;/svg&gt; Profile &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"/admin/logout\" class=\"text-error\"&gt; &lt;svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-4 h-4\"&gt; &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15M12 9l-3 3m0 0l3 3m-3-3h12.75\" /&gt; &lt;/svg&gt; Logout &lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; {{ else }} &lt;div class=\"flex gap-2\"&gt; &lt;a href=\"/admin/login\" class=\"btn btn-ghost\"&gt;Login&lt;/a&gt; &lt;/div&gt; {{ end }} &lt;/div&gt; &lt;/header&gt; &lt;div class=\"container mx-auto px-4\"&gt; {{ block \"content\" . }}{{ end }} &lt;/div&gt; {{ block \"js\" . }}{{ end }} &lt;/body&gt; &lt;/html&gt; . Then, we will make a few templates. views/admin/index.tpl . {{ template \"admin/layout.tpl\" . }} {{ define \"content\" }} &lt;h1 class=\"text-4xl\"&gt;Admin&lt;/h1&gt; {{ end }} . views/admin/login.tpl . {{ template \"admin/layout.tpl\" . }} {{ define \"content\" }} &lt;h2 class=\"text-2xl font-bold mb-4\"&gt;Login&lt;/h2&gt; &lt;form method=\"POST\" action=\"/admin/login\"&gt; &lt;div class=\"form-control mb-4\"&gt; &lt;label class=\"label\"&gt; &lt;span class=\"label-text\"&gt;Email&lt;/span&gt; &lt;/label&gt; &lt;input type=\"email\" name=\"email\" placeholder=\"Your Email\" class=\"input input-bordered\" required /&gt; &lt;/div&gt; &lt;div class=\"form-control mb-4\"&gt; &lt;label class=\"label\"&gt; &lt;span class=\"label-text\"&gt;Password&lt;/span&gt; &lt;/label&gt; &lt;input type=\"password\" name=\"password\" class=\"input input-bordered\" required /&gt; &lt;/div&gt; &lt;div class=\"form-control\"&gt; &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Log In&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; {{ if .Result }} &lt;div role=\"alert\" class=\"alert mt-4 pe-8 w-fit\"&gt; &lt;svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-info h-6 w-6 shrink-0\"&gt; &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"&gt;&lt;/path&gt; &lt;/svg&gt; &lt;span&gt;{{ .Result }}&lt;/span&gt; &lt;/div&gt; {{ end }} {{ end }} . Admin Controllers . We will make a BaseAdminController and use inheritance to allow all children controllers to share user-related functionality. controllers/admin.go . package controllers import ( \"queenbee/models\" \"queenbee/utils\" beego \"github.com/beego/beego/v2/server/web\" ) type BaseAdminController struct { beego.Controller } // Prepare runs before every request func (c *BaseAdminController) Prepare() { // Set common template data c.setCommonData() } // Set common data for all templates func (c *BaseAdminController) setCommonData() { // Check if user is logged in and set template variables if c.IsLoggedIn() { user := c.GetCurrentUser() c.Data[\"IsLoggedIn\"] = true c.Data[\"User\"] = user } else { c.Data[\"IsLoggedIn\"] = false c.Data[\"User\"] = nil } } // Check if user is logged in func (c *BaseAdminController) IsLoggedIn() bool { user := c.GetSession(\"user\") return user != nil } // Get current user from session func (c *BaseAdminController) GetCurrentUser() *models.User { userSession := c.GetSession(\"user\") if userSession == nil { return nil } // Assuming you store user info in session if user, ok := userSession.(models.User); ok { return &amp;user } return nil } // RequireAuth middleware - add this to controllers that need authentication func (c *BaseAdminController) RequireAuth() { if !c.IsLoggedIn() { // Store the current URL for redirect after login c.SetSession(\"redirect_after_login\", c.Ctx.Request.URL.Path) c.Redirect(\"/admin/login\", 302) return } } . Here is the code for the AdminController and the LoginController. You can add this code in the same file (controllers/admin.go), below the RequireAuth function you just added. type AdminController struct { BaseAdminController } func (c *AdminController) Get() { c.RequireAuth() c.Data[\"Title\"] = \"Admin\" c.TplName = \"admin/index.tpl\" } type LogoutController struct { BaseAdminController } func (c *LogoutController) Get() { c.DestroySession() c.Redirect(\"/admin/login\", 302) } type LoginController struct { BaseAdminController } func (c *LoginController) Get() { c.Data[\"Title\"] = \"Login\" c.TplName = \"admin/login.tpl\" } func (c *LoginController) Post() { c.Data[\"Title\"] = \"Login\" c.TplName = \"admin/login.tpl\" loginreq := utils.LoginReq{} err := c.Ctx.BindForm(&amp;loginreq) if err != nil { c.Data[\"Result\"] = \"ERROR: \" + err.Error() } else if loginreq.Email == \"\" || loginreq.Password == \"\" { c.Data[\"Result\"] = \"ERROR: Please enter all values.\" } else { // authenticate user, err := utils.Authenticate(&amp;loginreq) if err != nil { c.Data[\"Result\"] = \"ERROR: \" + err.Error() } else { // create session c.SetSession(\"user\", *user) // redirect path := c.GetSession(\"redirect_after_login\") if path != nil { if path, ok := path.(string); ok { c.Redirect(path, 302) } } c.Redirect(\"/admin\", 302) } } } . User Profile . Let‚Äôs add a controller that allows users to see and edit their profile (name and email). The reason why we are using a Post handler for editing instead of the more idiomatic Put or Patch is because the HTML Form that we add later can only do GET or POST methods without JavaScript or other AJAX-style requests. type ProfileController struct { BaseAdminController } func (c *ProfileController) Get() { c.RequireAuth() c.Data[\"Title\"] = \"Profile\" c.TplName = \"profile.tpl\" } type EditProfile struct { Name string `form:\"name\"` Email string `form:\"email\"` } func (c *ProfileController) Post() { c.RequireAuth() c.Data[\"Title\"] = \"Profile\" c.TplName = \"profile.tpl\" ep := EditProfile{} err := c.Ctx.BindForm(&amp;ep) if err != nil { c.Data[\"Result\"] = \"ERROR: \" + err.Error() } else if ep.Email == \"\" || ep.Name == \"\" { c.Data[\"Result\"] = \"ERROR: Please enter all values.\" } else { user := c.GetCurrentUser() user.Name = ep.Name user.Email = ep.Email _, err := models.O.Update(user, \"Name\", \"Email\") if err != nil { c.Data[\"Result\"] = \"ERROR: \" + err.Error() } else { // update the user in the session c.SetSession(\"user\", *user) c.Data[\"Result\"] = \"Profile updated!\" } } } . Here‚Äôs an accompanying template file. views/profile.tpl . {{ template \"admin/layout.tpl\" . }} {{ define \"content\" }} &lt;h1 class=\"text-4xl mb-4\"&gt;Profile&lt;/h1&gt; &lt;form method=\"POST\" action=\"/profile\"&gt; &lt;div class=\"form-control mb-4\"&gt; &lt;label class=\"label\"&gt; &lt;span class=\"label-text\"&gt;Name&lt;/span&gt; &lt;/label&gt; &lt;input value=\"{{.User.Name}}\" type=\"text\" name=\"name\" class=\"input input-bordered\" required /&gt; &lt;/div&gt; &lt;div class=\"form-control mb-4\"&gt; &lt;label class=\"label\"&gt; &lt;span class=\"label-text\"&gt;Email&lt;/span&gt; &lt;/label&gt; &lt;input value=\"{{.User.Email}}\" type=\"email\" name=\"email\" class=\"input input-bordered\" required /&gt; &lt;/div&gt; &lt;div class=\"form-control\"&gt; &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Update Profile&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; {{ if .Result }} &lt;div role=\"alert\" class=\"alert mt-4 pe-8 w-fit\"&gt; &lt;svg xmlns=\"http://www.w4.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-info h-6 w-6 shrink-0\"&gt; &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"&gt;&lt;/path&gt; &lt;/svg&gt; &lt;span&gt;{{ .Result }}&lt;/span&gt; &lt;/div&gt; {{ end }} {{ end }} . Routes . Don‚Äôt forget to add routes and test everything. routers/router.go . package routers import ( \"queenbee/controllers\" beego \"github.com/beego/beego/v2/server/web\" ) func init() { beego.Router(\"/\", &amp;controllers.MainController{}) beego.Router(\"/about\", &amp;controllers.AboutController{}) beego.Router(\"/contact\", &amp;controllers.ContactController{}) beego.Router(\"/profile\", &amp;controllers.ProfileController{}) beego.Router(\"/admin\", &amp;controllers.AdminController{}) beego.Router(\"/admin/login\", &amp;controllers.LoginController{}) beego.Router(\"/admin/logout\", &amp;controllers.LogoutController{}) } . Remember, to create a user, run your script with go run scripts/create_user.go. ",
    "url": "https://cs.dbuckley.dev/docs/golang/admin/#user-login-and-session",
    "relUrl": "/docs/golang/admin/#user-login-and-session"
  },"263": {
    "doc": "Beego Part 5 - Users and Admin Interface Part 1",
    "title": "Beego Part 5 - Users and Admin Interface Part 1",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/golang/admin/",
    "relUrl": "/docs/golang/admin/"
  },"264": {
    "doc": "Beego Part 6 - Users and Admin Interface Part 2",
    "title": "Users and Admin Interface Part 2",
    "content": "In this section, we will create a CRUD interface to manage contacts. controllers/crud.go . package controllers import ( \"fmt\" \"queenbee/models\" \"reflect\" \"strconv\" ) type ContactListController struct { BaseAdminController } type ContactDetailController struct { BaseAdminController } // READ HELPERS type Item struct { Key string Value any // Using 'any' to allow any type for Value } // Function to convert struct to ordered data based on struct field order func structToOrderedData(v any) []Item { var orderedData []Item // Use reflection to get the value and type of the struct val := reflect.ValueOf(v) typ := val.Type() // Iterate over the struct fields in their defined order for i := 0; i &lt; val.NumField(); i++ { field := val.Field(i) fieldType := typ.Field(i) orderedData = append(orderedData, Item{Key: fieldType.Name, Value: field.Interface()}) } return orderedData } func read(c *BaseAdminController, createModel func(id uint64) any) any { idStr := c.Ctx.Input.Param(\":id\") id, err := strconv.ParseUint(idStr, 10, 64) if err != nil { c.Ctx.Output.SetStatus(400) // Bad Request c.Data[\"json\"] = map[string]string{\"error\": \"Invalid ID\"} c.ServeJSON() return nil } ptr := createModel(id) err = models.O.Read(ptr) if err != nil { c.Ctx.Output.SetStatus(404) c.Data[\"json\"] = map[string]string{\"error\": \"Not Found\"} c.ServeJSON() return nil } return ptr } // List func (c *ContactListController) Get() { c.RequireAuth() c.Data[\"Title\"] = \"Contacts\" c.TplName = \"admin/list.tpl\" q := models.O.QueryTable(\"contact_model\") var contacts []*models.ContactModel q.All(&amp;contacts) var l [][]Item for _, contact := range contacts { l = append(l, structToOrderedData(*contact)) } c.Data[\"List\"] = l c.Data[\"BaseHref\"] = \"/admin/contacts\" } // Create (NOT IMPLEMENTED) // func (c *ContactListController) Post() { // c.RequireAuth() // c.Data[\"Title\"] = \"Contacts\" // c.TplName = \"admin/create.tpl\" // } // Read func (c *ContactDetailController) Get() { c.RequireAuth() c.Data[\"Title\"] = \"Contacts\" c.TplName = \"admin/read.tpl\" contact := read(&amp;c.BaseAdminController, func(id uint64) any { contact := &amp;models.ContactModel{Id: id} return (any)(contact) }) if m, ok := contact.(*models.ContactModel); ok { val := structToOrderedData(*m) c.Data[\"Title\"] = fmt.Sprintf(\"Contact %d\", m.Id) c.Data[\"Item\"] = val c.Data[\"Id\"] = m.Id c.Data[\"BaseHref\"] = \"/admin/contacts\" } } // Update (NOT IMPLEMENTED) // func (c *ContactDetailController) Post() { // c.RequireAuth() // c.Data[\"Title\"] = \"Contacts\" // c.TplName = \"admin/update.tpl\" // } // Delete func (c *ContactDetailController) Delete() { c.RequireAuth() idStr := c.Ctx.Input.Param(\":id\") id, _ := strconv.ParseUint(idStr, 10, 64) contact := &amp;models.ContactModel{Id: id} _, err := models.O.Delete(contact) fmt.Println(err) c.Data[\"Title\"] = \"Contacts\" } . routers/router.go . Add these two routes. beego.Router(\"/admin/contacts/:id\", &amp;controllers.ContactDetailController{}) beego.Router(\"/admin/contacts\", &amp;controllers.ContactListController{}) . views/admin/read.tpl . {{ template \"admin/layout.tpl\" . }} {{ define \"content\" }} &lt;h1 class=\"text-4xl\"&gt;{{.Title}}&lt;/h1&gt; &lt;button class=\"btn btn-error\" onclick=\"fetch(window.location.href, {method:'DELETE'}).then(()=&gt;{window.location.href = {{.BaseHref}}})\"&gt;BALEETED!&lt;/button&gt; &lt;table class=\"table w-full mt-4\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class=\"bg-gray-200\"&gt;Key&lt;/th&gt; &lt;th class=\"bg-gray-200\"&gt;Value&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; {{range .Item}} &lt;tr&gt; &lt;td class=\"border px-4 py-2\"&gt;{{.Key}}&lt;/td&gt; &lt;td class=\"border px-4 py-2\"&gt;{{.Value}}&lt;/td&gt; &lt;/tr&gt; {{end}} &lt;/tbody&gt; &lt;/table&gt; {{ end }} . views/admin/list.tpl . {{ template \"admin/layout.tpl\" . }} {{ define \"content\" }} &lt;h1 class=\"text-4xl\"&gt;{{.Title}}&lt;/h1&gt; &lt;table class=\"table w-full\"&gt; {{if eq (len .List) 0}} &lt;tr&gt; &lt;td colspan=\"3\"&gt;No records&lt;/td&gt; &lt;/tr&gt; {{else}} &lt;thead&gt; &lt;tr&gt; {{range index .List 0}} &lt;th class=\"bg-gray-200\"&gt;{{.Key}}&lt;/th&gt; {{end}} &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; {{range .List}} &lt;tr&gt; {{range .}} {{if eq .Key \"Id\"}} &lt;td class=\"border px-4 py-2\"&gt; &lt;a href=\"{{$.BaseHref}}/{{.Value}}\"&gt; {{.Value}} &lt;/a&gt; &lt;/td&gt; &lt;/a&gt; {{else}} &lt;td class=\"border px-4 py-2\"&gt;{{.Value}}&lt;/td&gt; {{end}} {{end}} &lt;/tr&gt; &lt;/a&gt; {{end}} &lt;/tbody&gt; {{end}} &lt;/table&gt; {{ end }} . ",
    "url": "https://cs.dbuckley.dev/docs/golang/admin2/#users-and-admin-interface-part-2",
    "relUrl": "/docs/golang/admin2/#users-and-admin-interface-part-2"
  },"265": {
    "doc": "Beego Part 6 - Users and Admin Interface Part 2",
    "title": "Beego Part 6 - Users and Admin Interface Part 2",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/golang/admin2/",
    "relUrl": "/docs/golang/admin2/"
  },"266": {
    "doc": "Algorithms",
    "title": "Algorithms",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/algorithms/",
    "relUrl": "/docs/algorithms/"
  },"267": {
    "doc": "Animation Basics",
    "title": "Animation",
    "content": "First, create a spritesheet via a website like piskelapp.com. Export your project as a PNG spritesheet. 1. 2. Here‚Äôs the spritesheet for this character (they are slightly different circles in case you couldn‚Äôt tell): . Import your spritesheet to your assets. A popular method is dragging the image file from its folder to the asset window of Unity. Visit Unity‚Äôs Introduction to Sprite Animations Tutorial to continue. ",
    "url": "https://cs.dbuckley.dev/docs/unity-cs/animation-basics/#animation",
    "relUrl": "/docs/unity-cs/animation-basics/#animation"
  },"268": {
    "doc": "Animation Basics",
    "title": "Animation Basics",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-cs/animation-basics/",
    "relUrl": "/docs/unity-cs/animation-basics/"
  },"269": {
    "doc": "REST APIs with Express.js",
    "title": "REST APIs with Express.js",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/javascript/api/",
    "relUrl": "/docs/javascript/api/"
  },"270": {
    "doc": "JavaScript Basics",
    "title": "JavaScript Basics",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/",
    "relUrl": "/docs/javascript/basics/"
  },"271": {
    "doc": "Processing Basics",
    "title": "Programming Basics with Processing",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/#programming-basics-with-processing",
    "relUrl": "/docs/processing/basics/#programming-basics-with-processing"
  },"272": {
    "doc": "Processing Basics",
    "title": "Processing Basics",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/processing/basics/",
    "relUrl": "/docs/processing/basics/"
  },"273": {
    "doc": "CSS Basics",
    "title": "CSS Basics",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/css-basics/",
    "relUrl": "/docs/web-dev-basics/css-basics/"
  },"274": {
    "doc": "CSS Basics",
    "title": "Table of contents",
    "content": ". | Tutorials | Introductory Examples and Resources . | Selectors | Cascade | Conventions | . | . CSS is the styling language of websites and web applications. It styles the HTML markup of web pages and is nothing without HTML. It would be trying to do paint-by-numbers without a coloring book. Therefore, you do need to know at least a little bit of HTML before you learn any CSS. It is highly recommended that you learn HTML and CSS at the same time. It is highly recommended that you learn HTML and CSS at the same time. ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/css-basics/#table-of-contents",
    "relUrl": "/docs/web-dev-basics/css-basics/#table-of-contents"
  },"275": {
    "doc": "CSS Basics",
    "title": "Tutorials",
    "content": "The best websites to learn CSS are the following: . | w3schoolsA full CSS course for those who are new to web development looking for simple answersThe simplest tutorial site for an introduction to CSS and other languages. Has examples, code sandboxes, and practice questions, and is rather comprehensive. Highly recommended for beginners. | MDNFor those who are experienced coders looking for the right answersMDN (Mozilla Developer Network) is the standard documentation and examples for professional developers. Provides more detailed and accurate explanations than w3schools. | codecademyFor those who want to get a brief overview and learn by doingCodecademy has a great free mini course for learning CSS. It does require an account but teaches the basics quickly and effectively. | CodeHSFor those who want a comprehensive web design courseClick the link above to enroll in Merit Academy‚Äôs complete web design course which covers HTML, CSS, Bootstrap, and other skills related to making web sites. The course code (if you need it upon signing up) is F5D0E. | . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/css-basics/#tutorials",
    "relUrl": "/docs/web-dev-basics/css-basics/#tutorials"
  },"276": {
    "doc": "CSS Basics",
    "title": "Introductory Examples and Resources",
    "content": "There are a couple of essentials when it comes to CSS: . Selectors . CSS selectors allow you to style different parts of your HTML in an organized way. Here are the most important selectors to know from least specific to most specific. | Selector | Usage Example | HTML Example (below) | . | Element | Change the styling for all the paragraph tags | Paragraph 1 (black) | . | Class | Change the styling for most of the paragraph tags | Paragraphs 2 and 3 (red) | . | ID | Change the styling for one paragraph tag | Paragraph 4 (blue) | . | Inline style | Change the styling of a tag in HTML | Paragraph 5 (green) | . CSS . /* Element Selector */ p { color: black; } /* Class Selector */ .red { color: red; } /* ID Selector */ #blue { color: blue; } . HTML . &lt;html&gt; &lt;head&gt; &lt;link rel=\"stylesheet\" href=\"path/to/cssfile.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Paragraph 1&lt;/p&gt; &lt;p class=\"red\"&gt;Paragraph 2&lt;/p&gt; &lt;p class=\"red\"&gt;Paragraph 3&lt;/p&gt; &lt;p id=\"blue\"&gt;Paragraph 4&lt;/p&gt; &lt;!-- Inline style --&gt; &lt;p style=\"color: green;\"&gt;Paragraph 5&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; . Cascade . The ‚ÄúCascade‚Äù part of ‚ÄúCSS‚Äù refers to its loading behavior. CSS is loaded from top to bottom, thus bottom styles might override styles above them. CSS . p { color: blue; } /* This is the color that will be used because of the cascade */ p { color: red; } . HTML . &lt;html&gt; &lt;head&gt; &lt;link rel=\"stylesheet\" href=\"path/to/cssfile.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Red Text&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; . This behavior extends to multiple stylesheets loaded in the HTML document head, later stylesheets may override styles in previous stylesheets. In the example below, the styles from file2.css will be used instead of file1.css because of the order the stylesheets are linked in the HTML. file1.css . p { color: blue; } . file2.css . p { color: red; } . HTML . &lt;html&gt; &lt;head&gt; &lt;link rel=\"stylesheet\" href=\"file1.css\"&gt; &lt;link rel=\"stylesheet\" href=\"file2.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Red Text&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; . Conventions . If you‚Äôre unconvinced that following convention is important, visit this page. | You should name your CSS classes and IDs with kebab case (e.g. class-name), never uppercase. A few people like using camel case for IDs but we personally don‚Äôt recommend it. | Learn how to write utility classes. These are classes that have one job and are easy to reuse. For example, if you wanted for a few elements to have blue text, instead of repeating color: blue in each rule every time you wanted to use that color, simply make one class called .text-blue {} that could be used in your HTML whenever you need blue text.text-blue { color: blue; } . You can easily write way too many utility classes so use them for things like margin, padding, colors where you know you‚Äôll need to be flexible. | You should try to keep your CSS as organized and readable as possible. You will quickly discover that your CSS can get very lengthy very quickly and it can be hard to keep your code DRY. A simple way to section out your CSS is the following: . /* Imports */ @import googlefonts; @import otherstylesheet.css; /* General Styles */ body h1, h2, h3... p a, button, a:hover... /* Typography */ body { font-family: sans-serif; } code, pre { font-family: monospace; } /* Layout styles */ nav {} .row {} .column {} #site-footer {} /* Utility classes */ .text-blue {} .text-red {} /* Specific components */ .card {} #middle-content {} . The best way to order the selectors within a section is in the order they appear on the page (see the ‚ÄúSpecific Components‚Äù section above), this way cascade loads the CSS in the order that the elements appear on the page. Another way to order your selectors is from most specific to least specific (element selectors, then class selectors, then ID selectors, see the ‚ÄúLayout Styles‚Äù section above). | . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/css-basics/#introductory-examples-and-resources",
    "relUrl": "/docs/web-dev-basics/css-basics/#introductory-examples-and-resources"
  },"277": {
    "doc": "CSS Layouts",
    "title": "CSS Layouts and Frameworks",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/css-layouts/#css-layouts-and-frameworks",
    "relUrl": "/docs/web-dev-basics/css-layouts/#css-layouts-and-frameworks"
  },"278": {
    "doc": "CSS Layouts",
    "title": "Table of contents",
    "content": ". | TOC | . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/css-layouts/#table-of-contents",
    "relUrl": "/docs/web-dev-basics/css-layouts/#table-of-contents"
  },"279": {
    "doc": "CSS Layouts",
    "title": "Layouts",
    "content": "By default, web pages display HTML in a single vertical layout (i.e. each element is loaded directly beneath it). For more flexibility in your web design, you need to learn how to do layouts in CSS using CSS flexbox and CSS grid. In short, flexbox is used for horizontal or vertical aligning (like for a navigation bar) while grid is used for laying out entire pages. Both are important to know, but flexbox is probably a good place to start and is capable in its own right of laying out entire pages. | Beginner‚Äôs Guide to Choosing Between CSS Grid and FlexboxThis guide has some great resources for learning Grid and Flexbox. | Flexbox FroggyThis is a great game to practice Flexbox. | Grid GardenThis is a great game to practice Grid. | . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/css-layouts/#layouts",
    "relUrl": "/docs/web-dev-basics/css-layouts/#layouts"
  },"280": {
    "doc": "CSS Layouts",
    "title": "Frameworks",
    "content": "A general rule in coding is that someone has probably already made the thing you‚Äôre making or have run into the same problems that you have. Once you have a grasp on selectors and layouts, it is strongly recommended that you become comfortable with a framework or two. Frameworks eliminate the need for you to build an entire design ecosystem, rather, you can just use what the pros have made and tweak it to fit your needs. They provide you with layout classes, components, and utilities to help you design your site swiftly. There are two frameworks I recommend for beginners: . Bootstrap 4 . The most popular framework and the first one to learn is Bootstrap. It exclusively uses Flexbox for its layouts and has many built-in components and utility classes that help you avoid building your site from scratch. The drawback to Bootstrap compared other frameworks is that it‚Äôs fairly large and difficult to modify out of the box (in CSS, learn Sassy CSS if you want to modify Bootstrap extensively), so if you only want your framework to do a little bit for you, consider using something else like Skeleton. Introduction (Bootstrap Documentation) . If you find the above intimidating, w3schools provides a watered-down version of the documentation. However, some of their examples are outdated so transition to the official docs above as soon as possible. Bootstrap 4 (w3schools) . Skeleton CSS . If you‚Äôre looking for a lightweight system that does a few things like Grid layouts and button styling, check out Skeleton. It focuses on mobile-first responsive design and is an easy way to start building a small app or site. Unlike Bootstrap, it is easy to build on top of because the entire code base is less than 400 lines. Skeleton: Responsive CSS Boilerplate . Other Frameworks . This article outlines a few other frameworks for beginners in addition to the two above. I particularly like Foundation, which is taught in the Sassy CSS unit of Web Development Capstone because it‚Äôs particularly effective with Sass (which is CSS, but better! You should learn it once you feel comfortable with CSS). A Beginner‚Äôs Guide to CSS Frameworks . 20 CSS3 Libraries/Frameworks . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/css-layouts/#frameworks",
    "relUrl": "/docs/web-dev-basics/css-layouts/#frameworks"
  },"281": {
    "doc": "CSS Layouts",
    "title": "CSS Layouts",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/css-layouts/",
    "relUrl": "/docs/web-dev-basics/css-layouts/"
  },"282": {
    "doc": "Data Structures",
    "title": "Data Structures in JavaScript and Processing",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/#data-structures-in-javascript-and-processing",
    "relUrl": "/docs/processing/data-structures/#data-structures-in-javascript-and-processing"
  },"283": {
    "doc": "Data Structures",
    "title": "Data Structures",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/processing/data-structures/",
    "relUrl": "/docs/processing/data-structures/"
  },"284": {
    "doc": "Docker",
    "title": "Docker",
    "content": "So far, we have been running our services directly from our machine. This can be difficult to replicate across machines as operating systems and configurations can differ. As such, there is a system called ‚Äúcontainerization‚Äù that . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/docker/",
    "relUrl": "/docs/web-dev/docker/"
  },"285": {
    "doc": "Docker",
    "title": "Install",
    "content": "Here are instructions for installing Docker Desktop on Fedora. There are equivalent guides for other operating systems. https://docs.docker.com/desktop/setup/install/linux/fedora/ . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/docker/#install",
    "relUrl": "/docs/web-dev/docker/#install"
  },"286": {
    "doc": "Docker",
    "title": "Getting Started",
    "content": "Review Docker‚Äôs getting started modules for introductions on how to run applications with Docker. ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/docker/#getting-started",
    "relUrl": "/docs/web-dev/docker/#getting-started"
  },"287": {
    "doc": "For Teachers",
    "title": "JavaScript Basics Unit",
    "content": "This unit was created by David Buckley for his classes at Merit Academy (Springville, UT). Standards used in the scope and sequence are from the Computer Programming 1 Strands and Standards from the State of Utah. Standards 2.3, 3.1, 3.2, 4.1, and 4.2 are covered in their entirety. Contact Mr. Buckley: david.buckley@meritacademy.org . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/for-teachers/#javascript-basics-unit",
    "relUrl": "/docs/javascript/basics/for-teachers/#javascript-basics-unit"
  },"288": {
    "doc": "For Teachers",
    "title": "Scope and Sequence",
    "content": "1. Introduction: Variables and Functions . Standards . 2.3 - Identify the components of a programming language syntax. | Understand keywords, identifiers, operators, and operands. | Understand statements and expressions in a program. | Understand program components such as functions, methods, or procedures. | . 3.1 - Employ basic use of elements and data types of a programming language. | Declare, initialize, and assign values to constants and variables. | . 3.2 - Employ basic arithmetic expressions. | Use basic arithmetic operators (modulus, multiplication, division, addition, subtraction). | Understand order of operation of expressions. | . Concepts . | Declaring variables in JavaScript with let and const. | Declaring and calling functions in JavaScript. | Parameters | Return values | . | Basic math operators in JavaScript. | . 2. Data Types . Standards . 3.1 - Employ basic use of elements and data types of a programming language. | Declare and use variable types (primitives, reference, or object). | Identify proper data types for a specified application (boolean, integer, floatingpoint, strings). | . Concepts . | number, string, and object data types. | How to use the . operator to access object properties. | Object terminology: instance, field, method. | . 3. The document and window Objects . Concepts . | The Document Object Model (DOM). | Using document.querySelector() to select elements. | Using element.innerHTML, element.innerText, and element.setAttribute() to modify elements in the DOM. | Using the window object to get information about the viewport. | . Quiz 1-3 . At this point, I have students do a Kahoot related to projects 1-3. | Teacher Link | Single-Player Link | . 4. Logic and Control Flow . Standards . 3.1 - Employ basic use of elements and data types of a programming language. | Demonstrate the ability to use input and output commands. | . 4.1 - Demonstrate the ability to use relational and logical operators in programs. | Commpare values using relational operators (&lt;, &gt;, ==, &lt;=, &gt;=, etc.) | Form complex expressions using logical operators. | . 4.2 - Demonstrate the ability to use decisions in programs. | Employ simple IF structures. | Use IF-ELSE and nested IF-ELSE structures. | . Concepts . | Use window.alert() and window.prompt() for input/output. | Use conditional statements and boolean expressions for branching. | . 5. Events . Concepts . | Use element.addEventListener() to bind functions to events. | . 6. String, Number, and Array Methods . Standards . 3.2 - Employ basic arithmetic expressions. | Write expressions that mix floating-point and integer expressions. | . Concepts . | Use string and number methods to manipulate and format data. | Use arrays and array methods to manipulate collections from the DOM. | . Quiz 2 . At this point, I have students do a Kahoot related to projects 4-6. | Teacher Link | Single-Player Link | . Unit Project - To Do App . Assesses the students‚Äô ability to synthesize the above concepts and develop a program themselves. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/for-teachers/#scope-and-sequence",
    "relUrl": "/docs/javascript/basics/for-teachers/#scope-and-sequence"
  },"289": {
    "doc": "For Teachers",
    "title": "For Teachers",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/for-teachers/",
    "relUrl": "/docs/javascript/basics/for-teachers/"
  },"290": {
    "doc": "JavaScript Forms",
    "title": "HTML Forms with JavaScript",
    "content": "This will we the next unit in our JavaScript curriculum. It is currently under construction. Potential concepts: . | Submitting form data. | With action attribute. | With onsubmit event handler. | With input validation using input attributes and scripts. | . | Fetch API. | GET and POST. | Promises. | async/await. | . | Client-side storage including cookies, localStorage, and IndexedDB. | Final: Make a CRUD App. | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/forms/#html-forms-with-javascript",
    "relUrl": "/docs/javascript/forms/#html-forms-with-javascript"
  },"291": {
    "doc": "JavaScript Forms",
    "title": "JavaScript Forms",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/javascript/forms/",
    "relUrl": "/docs/javascript/forms/"
  },"292": {
    "doc": "JavaScript Games",
    "title": "Game Development with JavaScript",
    "content": "Because of the browser and the ease at which you can control visual components with JavaScript, it is fairly natural and intuitive to create games with JavaScript without a fancy game engine. Follow this tutorial from MDN for creating a 2D breakout game with JavaScript: . 2D Breakout Game in Pure JavaScript . List of concepts covered in the above tutorial . | How to use the JavaScript Canvas. | How to implement motion and collision. | How to use events to control the game. | How to use loops for drawing objects. | How to use intervals and timers to run aspects of the game. | . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/games/#game-development-with-javascript",
    "relUrl": "/docs/javascript/games/#game-development-with-javascript"
  },"293": {
    "doc": "JavaScript Games",
    "title": "JavaScript Games",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/javascript/games/",
    "relUrl": "/docs/javascript/games/"
  },"294": {
    "doc": "GitHub",
    "title": "Git, GitHub, and Agile Software Development",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/git/#git-github-and-agile-software-development",
    "relUrl": "/docs/git/#git-github-and-agile-software-development"
  },"295": {
    "doc": "GitHub",
    "title": "GitHub",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/git/",
    "relUrl": "/docs/git/"
  },"296": {
    "doc": "Golang",
    "title": "Go (Golang)",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/golang/#go-golang",
    "relUrl": "/docs/golang/#go-golang"
  },"297": {
    "doc": "Golang",
    "title": "Golang",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/golang/",
    "relUrl": "/docs/golang/"
  },"298": {
    "doc": "HTML",
    "title": "HTML",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/html/",
    "relUrl": "/docs/web-dev-basics/html/"
  },"299": {
    "doc": "HTML",
    "title": "Table of contents",
    "content": ". | Tutorials | Introductory Examples and Resources . | Tags | Conventions | . | . HTML is the markup language of websites and web applications. It‚Äôs the way that content (text, graphics, and other media) is defined and organized on a web page. HTML by itself does not look fantastic. To style the content defined by HTML (add fonts, colors, layouts, etc. to your web pages), you need to learn CSS. It is highly recommended that you learn HTML and CSS at the same time. ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/html/#table-of-contents",
    "relUrl": "/docs/web-dev-basics/html/#table-of-contents"
  },"300": {
    "doc": "HTML",
    "title": "Tutorials",
    "content": "The best websites to learn HTML are the following: . | w3schoolsA full HTML course for those who are new to web development looking for simple answersThe simplest tutorial site for an introduction to HTML and other languages. Has examples, code sandboxes, and practice questions, and is rather comprehensive. Highly recommended for beginners. | MDNFor those who are experienced coders looking for the right answersMDN (Mozilla Developer Network) is the standard documentation and examples for professional developers. Provides more detailed and accurate explanations than w3schools. | codecademyFor those who want to get a brief overview and learn by doingCodecademy has a great free mini course for learning HTML. It does require an account but teaches the basics quickly and effectively. | CodeHSFor those who want a comprehensive web design courseClick the link above to enroll in Merit Academy‚Äôs complete web design course which covers HTML, CSS, Bootstrap, and other skills related to making web sites. The course code (if you need it upon signing up) is F5D0E. | . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/html/#tutorials",
    "relUrl": "/docs/web-dev-basics/html/#tutorials"
  },"301": {
    "doc": "HTML",
    "title": "Introductory Examples and Resources",
    "content": "There are a few things to know that are essential for coding HTML: . Tags . Tags define the content on the page. There are distinct tags for headings (titles), paragraphs, images, links, etc. Most HTML elements have an opening and closing tag because they encapsulate text or other content. Fewer elements are singleton tags, like images. &lt;h1&gt;Heading 1&lt;/h1&gt; &lt;p&gt;Paragraph&lt;/p&gt; &lt;img src=\"link-to-image.jpg\"&gt; &lt;a href=\"link-to-page.html\"&gt;Link&lt;/a&gt; . Attributes are options that further define the content. For example, an image tag has a source attribute (src) that references the image file to be displayed (&lt;img src=\"filename.jpg\"&gt;). Conventions . If you‚Äôre unconvinced that following convention is important, visit this page. Tags should always be lowercase (&lt;h1&gt; not &lt;H1&gt;). Attributes should be lowercase and values should always be in quotes (width=\"200px\" not WIDTH=200px). When multiple elements are nested inside one another, it is good practice to match the indentation (horizontal spacing) of the elements. &lt;main&gt; &lt;section&gt; &lt;p&gt;Some text&lt;/p&gt; &lt;/section&gt; &lt;/main&gt; . File names should be kebab case (lowercase with dashes instead of spaces; file-name.html) or snake case (lowercase with underscores; file_name.html). Be consistent, pick either kebab case or snake case for your files and stick to it. ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/html/#introductory-examples-and-resources",
    "relUrl": "/docs/web-dev-basics/html/#introductory-examples-and-resources"
  },"302": {
    "doc": "HTTP and HTTPS",
    "title": "HTTP and HTTPS",
    "content": ". | How does the internet standardize data transfer? | How do websites establish a secure connection for data transfer? | . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/http-https/",
    "relUrl": "/docs/web-dev/http-https/"
  },"303": {
    "doc": "HTTP and HTTPS",
    "title": "Creating a Self-Signed Local TLS Certificate with openssl",
    "content": "This certificate will be self-signed, meaning that it has not been validated by a third-party on the internet. This is for cases where yor computer does not have port 80 exposed to the public internet or you are doing local development. Before running the following code, ensure you have openssl installed. which openssl . This code creates a public and private key for the HTTPS protocol to use when encrypting your data. sudo su - root cd /etc/pki mkdir -p nginx/private cd nginx # TODO: set this variable yourself to your hostname, like potato.potato HOSTNAME=localhost openssl req -x509 -out server.crt -keyout private/server.key \\ -newkey rsa:2048 -nodes -sha256 \\ -subj \"/CN=$HOSTNAME\" -extensions EXT -config &lt;( \\ printf \"[dn]\\nCN=$HOSTNAME\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:$HOSTNAME\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\") # exit root user exit . Uncomment these lines at the /etc/nginx/nginx.conf to enable SSL connection with your new certificate. server { listen 443 ssl; listen [::]:443 ssl; http2 on; server_name _; root /usr/share/nginx/html; ssl_certificate \"/etc/pki/nginx/server.crt\"; ssl_certificate_key \"/etc/pki/nginx/private/server.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers PROFILE=SYSTEM; ssl_prefer_server_ciphers on; # Load configuration files for the default server block. # include /etc/nginx/default.d/*.conf; } . Test the nginx configuration to see if it works and then apply changes by restarting. sudo nginx -t sudo systemctl restart nginx . You should be able to access https://localhost in the browser. You will have to ‚Äúaccept the risk‚Äù of a self-signed certificate and continue. You can then see that you have an encrypted connection by looking at the ‚ÄúMore Information‚Äù option in the browser. ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/http-https/#creating-a-self-signed-local-tls-certificate-with-openssl",
    "relUrl": "/docs/web-dev/http-https/#creating-a-self-signed-local-tls-certificate-with-openssl"
  },"304": {
    "doc": "HTTP and HTTPS",
    "title": "Creating a TLS Certificate with Certbot and Let‚Äôs Encrypt",
    "content": "If you have a website available on the public internet (on port 80) and a domain name on public DNS, you can use certbot to create an SSL certificate with a free authority called ‚ÄúLet‚Äôs Encrypt‚Äù. Don‚Äôt forget to open the right ports on the firewall. sudo firewall-cmd --add-port 80/tcp --permanent sudo firewall-cmd --add-port 443/tcp --permanent sudo firewall-cmd --reload . Here is a great article on setting up certbot with nginx: https://dev.to/yousufbasir/setting-up-nginx-with-certbot-for-https-on-your-web-application-n1i for a public website. ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/http-https/#creating-a-tls-certificate-with-certbot-and-lets-encrypt",
    "relUrl": "/docs/web-dev/http-https/#creating-a-tls-certificate-with-certbot-and-lets-encrypt"
  },"305": {
    "doc": "Beego Part 3 - HTTP Methods and Forms",
    "title": "HTTP Methods and Forms",
    "content": "In web applications, HTTP methods define different behaviors of HTTP requests. For example, getting data from a server has a different method than sending data or deleting data. Here are the common HTTP methods. Here‚Äôs a detailed markdown table that outlines common HTTP methods, their purposes, and typical use cases: . | HTTP Method | Purpose | Use Cases | . | GET | Retrieve data from a server | Fetching a webpage, retrieving user data | . | POST | Send data to a server to create a resource | Submitting a form, uploading a file | . | PUT | Update an existing resource or create if it doesn‚Äôt exist | Updating user information, replacing a resource | . | DELETE | Remove a resource from the server | Deleting a user account, removing a file | . | PATCH | Partially update a resource | Updating a single field in a user profile | . | HEAD | Retrieve headers only, without the body | Checking if a resource exists, getting metadata | . | OPTIONS | Describe the communication options for the target resource | Discovering allowed methods on a server | . You‚Äôve already worked with the GET HTTP method many times, perhaps without even realizing it. ",
    "url": "https://cs.dbuckley.dev/docs/golang/http-methods/#http-methods-and-forms",
    "relUrl": "/docs/golang/http-methods/#http-methods-and-forms"
  },"306": {
    "doc": "Beego Part 3 - HTTP Methods and Forms",
    "title": "Make a Contact Page",
    "content": "We will make a contact page that receives contact data, validates it, and returns a message to the user. In the next lesson, we will store this information in a database. Optionally, you can send emails on form submission. Which method do you think will be useful for receiving contact data via an HTML Form? Answer: POST is probably best for this use case. Make a contact page with an HTML Form that has the method=\"POST\" for a post request and the action=\"/contact\" attribute for sending that request to the /contact route and the ContactController (created below). views/contact.tpl . {{ template \"layout.tpl\" . }} {{ define \"content\" }} &lt;h2 class=\"text-2xl font-bold mb-4\"&gt;Contact Us&lt;/h2&gt; &lt;!-- notice the method=\"POST\" for a POST request and the action specificying what route to hit. --&gt; &lt;form method=\"POST\" action=\"/contact\"&gt; &lt;div class=\"form-control mb-4\"&gt; &lt;label class=\"label\"&gt; &lt;span class=\"label-text\"&gt;Name&lt;/span&gt; &lt;/label&gt; &lt;input type=\"text\" name=\"name\" placeholder=\"Your Name\" class=\"input input-bordered\" required /&gt; &lt;/div&gt; &lt;div class=\"form-control mb-4\"&gt; &lt;label class=\"label\"&gt; &lt;span class=\"label-text\"&gt;Email&lt;/span&gt; &lt;/label&gt; &lt;input type=\"email\" name=\"email\" placeholder=\"Your Email\" class=\"input input-bordered\" required /&gt; &lt;/div&gt; &lt;div class=\"form-control mb-4\"&gt; &lt;label class=\"label\"&gt; &lt;span class=\"label-text\"&gt;Message&lt;/span&gt; &lt;/label&gt; &lt;textarea name=\"message\" placeholder=\"Your Message\" class=\"textarea textarea-bordered\" required&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;div class=\"form-control\"&gt; &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Send Message&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; {{ if .Result }} &lt;div role=\"alert\" class=\"alert mt-4 pe-8 w-fit\"&gt; &lt;svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" class=\"stroke-info h-6 w-6 shrink-0\"&gt; &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"&gt;&lt;/path&gt; &lt;/svg&gt; &lt;span&gt;{{ .Result }}&lt;/span&gt; &lt;/div&gt; {{ end }} {{ end }} . Handling a different HTTP method other than GET is as simple as making a new handler in the controller. controllers/default.go . // add to the bottom of the file type ContactController struct { beego.Controller } func (c *ContactController) Get() { c.Data[\"Title\"] = \"Contact\" c.TplName = \"contact.tpl\" } // new: post handler func (c *ContactController) Post() { c.Data[\"Title\"] = \"Contact\" c.Data[\"Result\"] = \"Thank you for your submission!\" c.TplName = \"contact.tpl\" } . routers/router.go . // add to the init() function beego.Router(\"/contact\", &amp;controllers.ContactController{}) . Try submitting your form, you should see something like this: . ",
    "url": "https://cs.dbuckley.dev/docs/golang/http-methods/#make-a-contact-page",
    "relUrl": "/docs/golang/http-methods/#make-a-contact-page"
  },"307": {
    "doc": "Beego Part 3 - HTTP Methods and Forms",
    "title": "Handling Form Data on the Backend",
    "content": "Any form data that you send can match up with a struct that you define. Here is a struct that gets all the contact data. type Contact struct { Name string `form:\"name\"` // matches up with &lt;input name=\"name\" ...&gt; Email string `form:\"email\"` // matches up with &lt;input name=\"email\" ...&gt; Message string `form:\"message\"` // matches up with &lt;textarea name=\"message\" ...&gt; } func (c *ContactController) Post() { c.Data[\"Title\"] = \"Contact\" c.Data[\"Result\"] = \"Thank you for your submission!\" c.TplName = \"contact.tpl\" // handle form data contact := Contact{} err := c.Ctx.BindForm(&amp;contact) // Pass a pointer to the struct if err != nil { c.Data[\"Result\"] = \"ERROR: \" + err.Error() } else if contact.Message == \"\" || contact.Name == \"\" || contact.Email == \"\" { c.Data[\"Result\"] = \"ERROR: Please enter all values.\" } else { // for now we will just log to the console. log.Default().Println(contact) } } . ",
    "url": "https://cs.dbuckley.dev/docs/golang/http-methods/#handling-form-data-on-the-backend",
    "relUrl": "/docs/golang/http-methods/#handling-form-data-on-the-backend"
  },"308": {
    "doc": "Beego Part 3 - HTTP Methods and Forms",
    "title": "Extra: Form Validation",
    "content": "See https://beegodoc.com/en-US/v2.0.x/validation/#examples for some more in-depth examples of form validation using Beego‚Äôs validation package. ",
    "url": "https://cs.dbuckley.dev/docs/golang/http-methods/#extra-form-validation",
    "relUrl": "/docs/golang/http-methods/#extra-form-validation"
  },"309": {
    "doc": "Beego Part 3 - HTTP Methods and Forms",
    "title": "Extra: Send an Email on Form Submission",
    "content": "Using the net/smtp package, you can send email. If you want, you can set up your own Gmail account with SMTP capabilities by following this guide. Alternatively, you can ask Mr. Buckley for credentials for a class account. func (c *ContactController) Post() { c.Data[\"Title\"] = \"Contact\" c.Data[\"Result\"] = \"Thank you for your submission!\" c.TplName = \"contact.tpl\" // handle form data contact := Contact{} err := c.Ctx.BindForm(&amp;contact) // Pass a pointer to the struct if err != nil { c.Data[\"Result\"] = \"ERROR: \" + err.Error() } else if contact.Message == \"\" || contact.Name == \"\" || contact.Email == \"\" { c.Data[\"Result\"] = \"ERROR: Please enter all values.\" } else { // Send email err = sendEmail(contact) if err != nil { c.Data[\"Result\"] = \"ERROR: Could not send email. \" + err.Error() } else { c.Data[\"Result\"] = \"Email sent successfully!\" } log.Default().Println(contact) } } // sendEmail sends an email using SMTP func sendEmail(contact Contact) error { from := \"my-email@gmail.com\" // Replace with your email password := \"my-password\" // Replace with your email password toArr := [...]string{\"recip1@gmail.com\", \"recip2@gmail.com\"} // Replace with the recipient's email(s) // slice the array to := toArr[:] // Set up authentication information. auth := smtp.PlainAuth(\"\", from, password, \"smtp.gmail.com\") // Replace with your SMTP server // Compose the email message subject := \"New Contact Form Submission\" body := \"Name: \" + contact.Name + \"\\nEmail: \" + contact.Email + \"\\nMessage: \" + contact.Message message := []byte(\"To: \" + strings.Join(to[:], \",\") + \"\\r\\n\" + \"From: \" + from + \"\\r\\n\" + \"Subject: \" + subject + \"\\r\\n\" + \"\\r\\n\" + // This empty line separates the headers from the body body) // Send the email err := smtp.SendMail(\"smtp.gmail.com:587\", auth, from, to, message) // Replace with your SMTP server and port return err } . If you want your message to have HTML instead of plaintext, here is an example of the body and message variables. body := \"&lt;b&gt;Name: &lt;/b&gt;\" + contact.Name + \"&lt;br&gt;&lt;b&gt;Email: &lt;/b&gt;\" + contact.Email + \"&lt;br&gt;&lt;b&gt;Message: &lt;/b&gt;\" + contact.Message message := []byte(\"To: \" + strings.Join(to[:], \",\") + \"\\r\\n\" + \"From: \" + from + \"\\r\\n\" + . \"Subject: \" + subject + \"\\r\\n\" + \"MIME-Version: 1.0\\r\\n\" + \"Content-Type: text/html; charset=UTF-8\\r\\n\" + \"\\r\\n\" + // This empty line separates the headers from the body body) . ",
    "url": "https://cs.dbuckley.dev/docs/golang/http-methods/#extra-send-an-email-on-form-submission",
    "relUrl": "/docs/golang/http-methods/#extra-send-an-email-on-form-submission"
  },"310": {
    "doc": "Beego Part 3 - HTTP Methods and Forms",
    "title": "Beego Part 3 - HTTP Methods and Forms",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/golang/http-methods/",
    "relUrl": "/docs/golang/http-methods/"
  },"311": {
    "doc": "Home",
    "title": "Welcome!",
    "content": "Merit Academy Tech U is a place to learn programming. It provides direction to the resources you need to learn the fundamentals. ",
    "url": "https://cs.dbuckley.dev/#welcome",
    "relUrl": "/#welcome"
  },"312": {
    "doc": "Home",
    "title": "About the project",
    "content": "Merit Academy Tech U‚Äôs content is published by Merit Academy under a Creative Commons License. License . Merit Academy Tech U‚Äôs code is distributed by an MIT license. Contributing . When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Read more about becoming a contributor in our GitHub repo. Thank you to the contributors of Merit Academy Tech U! . Code of Conduct . Merit Academy Tech U is committed to fostering a welcoming community. View our Code of Conduct on our GitHub repository. ",
    "url": "https://cs.dbuckley.dev/#about-the-project",
    "relUrl": "/#about-the-project"
  },"313": {
    "doc": "Home",
    "title": "About our school",
    "content": "Merit Academy is a 7-12 charter school in Springville, Utah. We offer both online and in-person courses. Click here to see the CS Courses we offer. If you‚Äôd like to know more about the school, including enrollment, visit https://meritprepacademy.org. ",
    "url": "https://cs.dbuckley.dev/#about-our-school",
    "relUrl": "/#about-our-school"
  },"314": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "https://cs.dbuckley.dev/",
    "relUrl": "/"
  },"315": {
    "doc": "Intro to Go",
    "title": "Intro to Go",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/golang/intro/",
    "relUrl": "/docs/golang/intro/"
  },"316": {
    "doc": "Intro to Go",
    "title": "Some Examples",
    "content": "Examples taken from https://gobyexample.com/. Here are a few key examples linked below. | Variables | Functions | Pointers | Structs | Errors | . Here‚Äôs a table that outlines common data types in Go, along with their descriptions and examples: . | Data Type | Description | Example | . | int | A signed integer type. | var x int = 42 | . | float64 | A double-precision floating-point type. | var y float64 = 3.14 | . | string | A sequence of characters. | var name string = \"Alice\" | . | bool | A boolean type, can be true or false. | var isActive bool = true | . | byte | An alias for uint8, represents a byte. | var b byte = 'A' | . | rune | An alias for int32, represents a Unicode code point. | var r rune = 'A' | . | array | A fixed-size sequence of elements of the same type. | var arr [3]int = [3]int{1, 2, 3} | . | slice | A dynamically-sized sequence of elements of the same type. | var s []int = []int{1, 2, 3} | . | map | A collection of key-value pairs. | var m map[string]int = map[string]int{\"one\": 1, \"two\": 2} | . | struct | A composite data type that groups together variables. | type Person struct { Name string; Age int } | . This table provides a clear overview of the fundamental data types in Go, along with examples to illustrate their usage. If you have any specific questions about these data types or need further details, feel free to ask! . ",
    "url": "https://cs.dbuckley.dev/docs/golang/intro/#some-examples",
    "relUrl": "/docs/golang/intro/#some-examples"
  },"317": {
    "doc": "Intro to Go",
    "title": "Some Resources",
    "content": "Create Module Tutorial . ",
    "url": "https://cs.dbuckley.dev/docs/golang/intro/#some-resources",
    "relUrl": "/docs/golang/intro/#some-resources"
  },"318": {
    "doc": "Java with Greenfoot",
    "title": "Java with Greenfoot",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/",
    "relUrl": "/docs/java-greenfoot/"
  },"319": {
    "doc": "Java with Greenfoot",
    "title": "Introduction",
    "content": "These are lessons designed to help beginning programmers learn the Java language in a visual way using the Greenfoot environment. It is recommended that these lessons be done in order but they can be completed individually. ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/#introduction",
    "relUrl": "/docs/java-greenfoot/#introduction"
  },"320": {
    "doc": "Java with Greenfoot",
    "title": "Attribution and Licensing",
    "content": "These lessons are adapted from several of Raspberry Pi‚Äôs Python Projects for the Java language. The content therein is licensed under Creative Commons CC BY-SA 4.0. ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/#attribution-and-licensing",
    "relUrl": "/docs/java-greenfoot/#attribution-and-licensing"
  },"321": {
    "doc": "JavaScript",
    "title": "JavaScript",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/javascript/",
    "relUrl": "/docs/javascript/"
  },"322": {
    "doc": "JavaScript",
    "title": "What is JavaScript?",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/javascript/#what-is-javascript",
    "relUrl": "/docs/javascript/#what-is-javascript"
  },"323": {
    "doc": "JavaScript",
    "title": "Why JavaScript?",
    "content": "There is no ‚Äúbest‚Äù general-purpose programming language. Each language has a niche. C is used for operating systems. C# is used for games and Windows apps. JavaScript is used for web-based software. On GitHub, the world‚Äôs largest code repository, JavaScript is the #1 most used language and TypeScript, its cousin, is #5 (https://madnight.github.io/githut/#/pull_requests/2021/3). You can build apps, games, pretty much anything with JavaScript. While there is no ‚Äúbest‚Äù language, JavaScript certainly makes a strong case to be considered. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/#why-javascript",
    "relUrl": "/docs/javascript/#why-javascript"
  },"324": {
    "doc": "Markdown",
    "title": "Markdown",
    "content": "Coders are writers of code and technical documentation. They need to be able to share content and communicate quickly. These tools will help you do that. Navigate to the option below, depending on which coding platform you are using. ",
    "url": "https://cs.dbuckley.dev/docs/git/markdown/",
    "relUrl": "/docs/git/markdown/"
  },"325": {
    "doc": "Mobile Apps",
    "title": "Mobile Apps",
    "content": "Smart mobile devices are a relatively new development target and the way we build for them is still rapidly changing. There are two ways to develop for mobile devices: write native apps or write cross-platform apps. | Native apps compile to executables that can be run on one operating system (i.e. Native Android Apps, .apk files, are written in Java or Kotlin; Native iOS Apps, .ipa files, are written in Swift). | Cross-platform apps are written in a language that can either be run in a mobile browser (Progressive Web Apps) or hybridly compiled and installed to multiple devices (i.e. React Native JavaScript Apps, Flutter Dart Apps, Xamarin C# Apps). | . Image Source and More Information: https://www.simform.com/blog/native-vs-cross-platform-development/. ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/",
    "relUrl": "/docs/mobile-apps/"
  },"326": {
    "doc": "Mobile Apps",
    "title": "What You Will Be Building",
    "content": "Those of you in AP CS Principles will be building a Progressive Web App (PWA), which is essentially a website that you can download and run on a phone. Those of you in AP CS A will be building a native Android App using Android Studio and Java. This video explains a little about what a progressive web app is and touches a little on the difference between it and a mobile app. ",
    "url": "https://cs.dbuckley.dev/docs/mobile-apps/#what-you-will-be-building",
    "relUrl": "/docs/mobile-apps/#what-you-will-be-building"
  },"327": {
    "doc": "Beego Part 4 - Models and SQL Databases",
    "title": "Models and SQL Databases",
    "content": "Databases are key to saving persistent (long-term) data in an application. We will save all contacts that submit the form to a SQL Database, where records are identified by a primary key (usually called id) and can have any number of column values. You can think of it a little bit like a spreadsheet. We will use a SQLite file database to store our data. If anything with your database goes wrong in development or you change your data models, you can simply delete your database file. Note that your server must be stopped while you delete your database file. In the MVC pattern, models represent data. Beego has a built-in Object-Relational Mapper (ORM), where a Go struct (model) can match what is in a database table. This abstracts away any SQL that we would potentially need to write for now; we will learn to use SQL in a different unit. If you are interested, check out w3schools for some examples on how SQL works. models/default.go . package models import ( \"log\" \"github.com/beego/beego/v2/adapter/orm\" _ \"github.com/mattn/go-sqlite3\" ) type ContactModel struct { Id uint64 `orm:\"auto\"` // this automatically creates an integer primary key Name string `orm:\"size(100)\"` // 100 characters max Email string `orm:\"size(255)\"` // 255 characters max Message string `form:\"type(text)\"` // any size string } var O orm.Ormer func InitDB() { orm.RegisterDriver(\"sqlite3\", orm.DRSqlite) orm.RegisterDataBase(\"default\", \"sqlite3\", \"./queenbee.db\") // this function can take a list, e.g. orm.RegisterModel(new(M1), new(M2), ...) orm.RegisterModel(new(ContactModel)) O = orm.NewOrm() err := orm.RunSyncdb(\"default\", false, true) if err != nil { log.Fatalf(\"Failed to sync database: %v\", err) } } . main.go . package main import ( \"queenbee/models\" _ \"queenbee/routers\" beego \"github.com/beego/beego/v2/server/web\" ) func main() { models.InitDB() beego.Run() } . ",
    "url": "https://cs.dbuckley.dev/docs/golang/model-db/#models-and-sql-databases",
    "relUrl": "/docs/golang/model-db/#models-and-sql-databases"
  },"328": {
    "doc": "Beego Part 4 - Models and SQL Databases",
    "title": "View Your Database",
    "content": "Our database is saved in a file called queenbee.db. To access your SQL database with a GUI, you can use a VSCode extension like SQLite Viewer or an application like DB Browser for SQLite. Viewing the SQL database looks something like this, where you have a table called contact_model with no rows (yet). ",
    "url": "https://cs.dbuckley.dev/docs/golang/model-db/#view-your-database",
    "relUrl": "/docs/golang/model-db/#view-your-database"
  },"329": {
    "doc": "Beego Part 4 - Models and SQL Databases",
    "title": "Save Contact to Database",
    "content": "We can edit the POST handler on our controller to save to the database. func (c *ContactController) Post() { c.Data[\"Title\"] = \"Contact\" c.Data[\"Result\"] = \"Thank you for your submission!\" c.TplName = \"contact.tpl\" contact := Contact{} err := c.Ctx.BindForm(&amp;contact) if err != nil { c.Data[\"Result\"] = \"ERROR: \" + err.Error() } else if contact.Message == \"\" || contact.Name == \"\" || contact.Email == \"\" { c.Data[\"Result\"] = \"ERROR: Please enter all values.\" } else { err = sendEmail(contact) if err != nil { c.Data[\"Result\"] = \"ERROR: Could not send email. \" + err.Error() } else { c.Data[\"Result\"] = \"Email sent successfully!\" } log.Default().Println(contact) // NEW: Save to database contactDb := models.ContactModel{ Name: contact.Name, Email: contact.Email, Message: contact.Message, } _, err := models.O.Insert(&amp;contactDb) if err != nil { c.Data[\"Result\"] = \"ERROR: Could not save to database. \" + err.Error() } else { c.Data[\"Result\"] = \"Contact form received!\" } } } . Once you submit your contact form again, you should see an entry created in the database. ",
    "url": "https://cs.dbuckley.dev/docs/golang/model-db/#save-contact-to-database",
    "relUrl": "/docs/golang/model-db/#save-contact-to-database"
  },"330": {
    "doc": "Beego Part 4 - Models and SQL Databases",
    "title": "Beego Part 4 - Models and SQL Databases",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/golang/model-db/",
    "relUrl": "/docs/golang/model-db/"
  },"331": {
    "doc": "Beego Part 1 - MVC Web Development",
    "title": "Beego Part 1 - MVC Web Development",
    "content": "One common use case for Go is web development. Typically, web development is done with a framework. Frameworks build some abstractions and tooling on top of base Go modules like net/http and html/template. | Framework | Description | Key Features | Performance | Use Cases | . | Gin | A lightweight web framework for building APIs. | Fast, middleware support, JSON validation, routing | High | RESTful APIs, microservices | . | Fiber | An Express-inspired web framework for Go. | Fast, minimalistic, middleware support, easy to use | Very High | Web applications, APIs, real-time apps | . | Echo | A high-performance, extensible web framework. | Middleware support, data binding, validation | High | RESTful APIs, web applications | . | Beego | An MVC framework for rapid development. | Built-in ORM, RESTful support, admin interface | Moderate | Full-stack applications, APIs | . | Chi | A lightweight, idiomatic router for Go. | Middleware support, composable routing | High | Microservices, modular applications | . ",
    "url": "https://cs.dbuckley.dev/docs/golang/mvc/",
    "relUrl": "/docs/golang/mvc/"
  },"332": {
    "doc": "Beego Part 1 - MVC Web Development",
    "title": "What is the MVC pattern?",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/golang/mvc/#what-is-the-mvc-pattern",
    "relUrl": "/docs/golang/mvc/#what-is-the-mvc-pattern"
  },"333": {
    "doc": "Beego Part 1 - MVC Web Development",
    "title": "Setup an MVC application with Beego",
    "content": "1. Installing Beego and Creating a Project . https://beegodoc.com/en-US/developing/#quick-start . Bee is a CLI for creating Beego applications. go install github.com/beego/bee/v2@latest # see if it worked bee version . Create a project. # create a project called \"queenbee\", it can be whatever name bee new queenbee cd queenbee # this is the magic \"make sure packages are installed\" command go mod tidy . 2. Understanding the Project Structure . ‚îú‚îÄ‚îÄ conf ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ app.conf ‚îú‚îÄ‚îÄ controllers ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ default.go ‚îú‚îÄ‚îÄ go.mod ‚îú‚îÄ‚îÄ go.sum ‚îú‚îÄ‚îÄ main.go ‚îú‚îÄ‚îÄ models ‚îú‚îÄ‚îÄ routers ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ router.go ‚îú‚îÄ‚îÄ static ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ css ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ img ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ js ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ reload.min.js ‚îú‚îÄ‚îÄ tests ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ default_test.go ‚îî‚îÄ‚îÄ views ‚îî‚îÄ‚îÄ index.tpl 11 directories, 9 files . Notice that Beego follows the MVC pattern, there are directories for models, views, and controllers. There is also a directory for the routers, which connect controllers and views to routes (paths in the URL). Run the application with bee run. Navigate the code structure to find where the HTML is coming from. Questions to answer: . | Where is the HTML? | What ensures that file is served at the index path /? | . ",
    "url": "https://cs.dbuckley.dev/docs/golang/mvc/#setup-an-mvc-application-with-beego",
    "relUrl": "/docs/golang/mvc/#setup-an-mvc-application-with-beego"
  },"334": {
    "doc": "Beego Part 1 - MVC Web Development",
    "title": "Add a Layout and Use Templates",
    "content": "We are going to take advantage of templating to make a layout that all pages can use. This will make sure they all have the same navbar, etc./views/layout.tpl . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;{{ .Title }}&lt;/title&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt; &lt;link rel=\"stylesheet\" href=\"{{.BaseUrl}}/static/css/output.css\"&gt; {{ block \"css\" . }}{{ end }} &lt;/head&gt; &lt;body&gt; &lt;header&gt; &lt;a href=\"/\"&gt;Home&lt;/a&gt; &lt;a href=\"/about\"&gt;About&lt;/a&gt; &lt;a href=\"/contact\"&gt;Contact&lt;/a&gt; &lt;/header&gt; &lt;div&gt; {{ block \"content\" . }}{{ end }} &lt;/div&gt; {{ block \"js\" . }}{{ end }} &lt;/body&gt; &lt;/html&gt; ./views/index.tpl - Change the file to have just this content. {{ template \"layout.tpl\" . }} {{ define \"content\" }} &lt;h2&gt;{{ .Title }}&lt;/h2&gt; &lt;p&gt;Welcome to the Home Page!&lt;/p&gt; {{ end }} . Notice that the layout template has a block \"content\" section that will be later defined by each page that uses that template. We also have a variable .Title that is expected from the server. With server-side rendering templates (common across many languages, not just Go), you can send data to the template from the controller./controllers/default.go . package controllers import ( beego \"github.com/beego/beego/v2/server/web\" ) type MainController struct { beego.Controller } // TODO: modify the Get() http handler to render the \"Title\" func (c *MainController) Get() { // matches with {{ .Title }} in index.tpl and layout.tpl c.Data[\"Title\"] = \"Home\" c.TplName = \"index.tpl\" } . ",
    "url": "https://cs.dbuckley.dev/docs/golang/mvc/#add-a-layout-and-use-templates",
    "relUrl": "/docs/golang/mvc/#add-a-layout-and-use-templates"
  },"335": {
    "doc": "Beego Part 1 - MVC Web Development",
    "title": "Adding Another Page",
    "content": "Challenge: How would you add an ‚ÄúAbout Page‚Äù at /about? . Show Answer (Controller) Here is a possible solution./controllers/default.go . package controllers import ( beego \"github.com/beego/beego/v2/server/web\" ) type MainController struct { beego.Controller } func (c *MainController) Get() { c.Data[\"Title\"] = \"Home\" c.TplName = \"index.tpl\" } type AboutController struct { beego.Controller } func (c *AboutController) Get() { c.Data[\"Title\"] = \"About\" c.TplName = \"about.tpl\" } . Show Answer (View) Here is a possible solution./views/about.tpl . {{ template \"layout.tpl\" . }} {{ define \"content\" }} &lt;h2&gt;{{ .Title }}&lt;/h2&gt; &lt;p&gt;Welcome to the About Page!&lt;/p&gt; {{ end }} . Show Answer (Router) Here is a possible solution./routers/router.go . package routers import ( \"queenbee/controllers\" beego \"github.com/beego/beego/v2/server/web\" ) func init() { beego.Router(\"/\", &amp;controllers.MainController{}) beego.Router(\"/about\", &amp;controllers.AboutController{}) } . ",
    "url": "https://cs.dbuckley.dev/docs/golang/mvc/#adding-another-page",
    "relUrl": "/docs/golang/mvc/#adding-another-page"
  },"336": {
    "doc": "Next.js Blog Tutorial",
    "title": "Blog Tutorial",
    "content": "This is an introductory Next.js tutorial for App &amp; Web Development at Merit Academy. This tutorial only requires basic HTML and CSS knowledge, no previous JavaScript or React skills needed. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial#blog-tutorial",
    "relUrl": "/docs/react-js/next-blog-tutorial#blog-tutorial"
  },"337": {
    "doc": "Next.js Blog Tutorial",
    "title": "Scope and Learning Targets",
    "content": "Based on Utah CTE‚Äôs Web Development 1 Standards (2021-2022). Standard 2.2 . | File structure and naming. | . Standard 3.3 . | Implement an id selector to modify a single element on the page. | Implement selectors a:link, a:visited, a:active, a:hover. | . Standard 3.4 . | Use absolute and static to position elements. | . Standard 4.2 . | Input Controls: Dropdown Lists. | Navigational Components. | . Standard 4.6 . | Specify page description, keywords, viewport, and author using meta tags. | Declare encoding using meta tags. | Understand principles of search engine optimization. | . ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial#scope-and-learning-targets",
    "relUrl": "/docs/react-js/next-blog-tutorial#scope-and-learning-targets"
  },"338": {
    "doc": "Next.js Blog Tutorial",
    "title": "Next.js Blog Tutorial",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/react-js/next-blog-tutorial",
    "relUrl": "/docs/react-js/next-blog-tutorial"
  },"339": {
    "doc": "Objects in Python",
    "title": "Objects in Python",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/python/objects/",
    "relUrl": "/docs/python/objects/"
  },"340": {
    "doc": "Objects in Python",
    "title": "Intro to Objects",
    "content": "A object is a data structure that can encapsulate variables and functions into a single entity. For example, strings are objects in Python. Here‚Äôs a simplified look at it. name = \"Jeff\" # The dot operator (.) allows you to access variables and functions from the object. name.lower() # jeff name.upper() # JEFF . ",
    "url": "https://cs.dbuckley.dev/docs/python/objects/#intro-to-objects",
    "relUrl": "/docs/python/objects/#intro-to-objects"
  },"341": {
    "doc": "Objects in Python",
    "title": "Constructors",
    "content": "Many objects are created by calling a special function called a constructor. For example, when using Python‚Äôs turtle library, the constructor Turtle() creates a Turtle object that you can store in a variable. In below code, three Turtle objects are instantiated. Each has a different color and gets displaced a different amount. import turtle t1 = turtle.Turtle() t2 = turtle.Turtle() t3 = turtle.Turtle() t1.color(\"red\") t1.goto(30, 0) t2.color(\"green\") t2.goto(20, 0) t3.color(\"blue\") t3.goto(10, 0) . ",
    "url": "https://cs.dbuckley.dev/docs/python/objects/#constructors",
    "relUrl": "/docs/python/objects/#constructors"
  },"342": {
    "doc": "Objects in Python",
    "title": "Write a Shape Class",
    "content": "Classes contain the logic for instantiating (creating) objects. Here‚Äôs an example of a Shape class that draws a dot at x, y. import turtle class Shape: def __init__(self, x, y): self.x = x self.y = y self.t = turtle.Turtle() self.t.hideturtle() self.t.penup() self.t.speed(0) self.t.setpos(self.x, self.y) def draw(self): self.t.dot() # Make a Shape at x=50, y=10 s1 = Shape(50, 10) s1.draw() # Make as many shapes as you want s2 = Shape(-30, 10) s2.draw() . | The __init__ function is the constructor definition and is what gets called with Shape(x, y). | The self property holds all of the variables of the object. The first parameter of every function in a class should have self as the first parameter. | . Try instantiating different shapes and calling their draw() functions. ",
    "url": "https://cs.dbuckley.dev/docs/python/objects/#write-a-shape-class",
    "relUrl": "/docs/python/objects/#write-a-shape-class"
  },"343": {
    "doc": "Objects in Python",
    "title": "Triangle Class",
    "content": "One useful feature of classes is that they can share implementations through inheritance. A Triangle is a Shape in that it has a Turtle (self.t) and an x, y position. Triangles also have a size, which is the side length of one of their segments. Inheritance . To inherit from a class, the following pattern is used: . class ChildClass(ParentClass): pass # Triangle is a child of Shape, and inherits Shape's functionality class Triangle(Shape): pass . Child Constructors and super() . In the constructor for the Triangle class (__init__), calling the super() function accesses the parent class (Shape), which you can initialize with super().__init__(x, y). class Triangle(Shape): def __init__(self, x, y, size): # Calls the Shape constructor super().__init__(x, y) # Set the size of the triangle self.size = size . By calling super(), a Triangle now has the following members: self.t, self.x, and self.y in addition to its own self.size variable. It also moves the turtle into position at based on self.x and self.y. Full Triangle Code . Now, let‚Äôs override the draw() function to draw a triangle based on the self.size. class Triangle(Shape): def __init__(self, x, y, size): super().__init__(x, y) self.size = size def draw(self): self.t.pendown() self.t.forward(self.size) self.t.right(120) self.t.forward(self.size) self.t.right(120) self.t.forward(self.size) t1 = Triangle(-10, -10, 30) t1.draw() t2 = Triangle(0, 50, 30) t2.draw() . ",
    "url": "https://cs.dbuckley.dev/docs/python/objects/#triangle-class",
    "relUrl": "/docs/python/objects/#triangle-class"
  },"344": {
    "doc": "Objects in Python",
    "title": "Composite Class with Multiple Shapes (Draw a Monster)",
    "content": "We can use these classes like building blocks to create small images. This Monster (pictured below) is made up of two Shapes (dots) and four Triangles. Here‚Äôs the implementation. Notice that the monster does not need to inherit from Shape because it has lots of Shapes in it that can draw themselves. class Monster(): def __init__(self, x, y, size): self.teeth = [ Triangle(x, y, size), Triangle(x+size, y, size), Triangle(x+size*2, y, size), Triangle(x+size*3, y, size), ] self.eyes = [ Shape(x+size, y+size), Shape(x+size*3, y+size), ] def draw(self): for tooth in self.teeth: tooth.draw() for eye in self.eyes: eye.draw() m = Monster(-200, 0, 20) m.draw() . ",
    "url": "https://cs.dbuckley.dev/docs/python/objects/#composite-class-with-multiple-shapes-draw-a-monster",
    "relUrl": "/docs/python/objects/#composite-class-with-multiple-shapes-draw-a-monster"
  },"345": {
    "doc": "Objects in Python",
    "title": "Challenge",
    "content": "Create your own Shape child class (i.e. Square, Circle, etc.) and your own Composite Class (i.e. JackOLantern, SmileyFace, etc.) . Turtle docs . ",
    "url": "https://cs.dbuckley.dev/docs/python/objects/#challenge",
    "relUrl": "/docs/python/objects/#challenge"
  },"346": {
    "doc": "Platformer Basics",
    "title": "Platformer Basics",
    "content": "Visit each page below to learn the basics of making a platformer. We will not be adding our own graphics to this platformer, we are just going to learn the nuts and bolts of how to have a player that can run and jump in an environment. ",
    "url": "https://cs.dbuckley.dev/docs/unity-cs/platformer-basics/",
    "relUrl": "/docs/unity-cs/platformer-basics/"
  },"347": {
    "doc": "Processing - Intro to CS",
    "title": "Processing - Intro to Computer Science",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/processing/#processing---intro-to-computer-science",
    "relUrl": "/docs/processing/#processing---intro-to-computer-science"
  },"348": {
    "doc": "Processing - Intro to CS",
    "title": "Introduction",
    "content": "These are lessons designed to help beginners learn programming in a visual way using Processing. Depending on the class you are in at Merit or your personal taste, you can create these programs in Java, Python, or JavaScript. ",
    "url": "https://cs.dbuckley.dev/docs/processing/#introduction",
    "relUrl": "/docs/processing/#introduction"
  },"349": {
    "doc": "Processing - Intro to CS",
    "title": "Processing - Intro to CS",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/processing/",
    "relUrl": "/docs/processing/"
  },"350": {
    "doc": "Python Projects",
    "title": "Python Projects",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/python/projects",
    "relUrl": "/docs/python/projects"
  },"351": {
    "doc": "Learn Python",
    "title": "Python",
    "content": "Much of the content below is taken from https://www.raspberrypi.org/documentation/usage/python/. ",
    "url": "https://cs.dbuckley.dev/docs/python/#python",
    "relUrl": "/docs/python/#python"
  },"352": {
    "doc": "Learn Python",
    "title": "Basic Python usage",
    "content": "Hello world in Python: . print(\"Hello world\") . Simple as that! . ",
    "url": "https://cs.dbuckley.dev/docs/python/#basic-python-usage",
    "relUrl": "/docs/python/#basic-python-usage"
  },"353": {
    "doc": "Learn Python",
    "title": "Indentation",
    "content": "Some languages use curly braces { and } to wrap around lines of code which belong together, and leave it to the writer to indent these lines to appear visually nested. However, Python does not use curly braces but instead requires indentation for nesting. For example a for loop in Python: . for i in range(10): print(\"Hello\") . The indentation is necessary here. A second line indented would be a part of the loop, and a second line not indented would be outside of the loop. For example: . for i in range(2): print(\"A\") print(\"B\") . would print: . A B A B . whereas the following: . for i in range(2): print(\"A\") print(\"B\") . would print: . A A B . ",
    "url": "https://cs.dbuckley.dev/docs/python/#indentation",
    "relUrl": "/docs/python/#indentation"
  },"354": {
    "doc": "Learn Python",
    "title": "Variables",
    "content": "To save a value to a variable, assign it like so: . name = \"Bob\" age = 15 . Note that data types were not specified with these variables, as types are inferred, and can be changed later. age = 15 age += 1 # increment age by 1 print(age) . This time I used comments beside the increment command. ",
    "url": "https://cs.dbuckley.dev/docs/python/#variables",
    "relUrl": "/docs/python/#variables"
  },"355": {
    "doc": "Learn Python",
    "title": "Comments",
    "content": "Comments are ignored in the program but there for you to leave notes, and are denoted by the hash # symbol. Multi-line comments use triple quotes like so: . \"\"\" This is a very simple Python program that prints \"Hello\". That's all it does. \"\"\" print(\"Hello\") . ",
    "url": "https://cs.dbuckley.dev/docs/python/#comments",
    "relUrl": "/docs/python/#comments"
  },"356": {
    "doc": "Learn Python",
    "title": "Lists",
    "content": "Python also has lists (called arrays in some languages) which are collections of data of any type: . numbers = [1, 2, 3] . Lists are denoted by the use of square brackets [] and each item is separated by a comma. ",
    "url": "https://cs.dbuckley.dev/docs/python/#lists",
    "relUrl": "/docs/python/#lists"
  },"357": {
    "doc": "Learn Python",
    "title": "Iteration",
    "content": "Some data types are iterable, which means you can loop over the values they contain. For example a list: . numbers = [1, 2, 3] for number in numbers: print(number) . This takes each item in the list numbers and prints out the item: . 1 2 3 . Note I used the word number to denote each item. This is merely the word I chose for this - it‚Äôs recommended you choose descriptive words for variables - using plurals for lists, and singular for each item makes sense. It makes it easier to understand when reading. Other data types are iterable, for example the string: . dog_name = \"BINGO\" for char in dog_name: print(char) . This loops over each character and prints them out: . B I N G O . ",
    "url": "https://cs.dbuckley.dev/docs/python/#iteration",
    "relUrl": "/docs/python/#iteration"
  },"358": {
    "doc": "Learn Python",
    "title": "Range",
    "content": "The integer data type is not iterable and trying to iterate over it will produce an error. For example: . for i in 3: print(i) . will produce: . TypeError: 'int' object is not iterable Python error . However you can make an iterable object using the range function: . for i in range(3): print(i) . range(5) contains the numbers 0, 1, 2, 3 and 4 (five numbers in total). To get the numbers 1 to 5 (inclusive) use range(1, 6). ",
    "url": "https://cs.dbuckley.dev/docs/python/#range",
    "relUrl": "/docs/python/#range"
  },"359": {
    "doc": "Learn Python",
    "title": "Length",
    "content": "You can use functions like len to find the length of a string or a list: . name = \"Jamie\" print(len(name)) # 5 names = [\"Bob\", \"Jane\", \"James\", \"Alice\"] print(len(names)) # 4 . ",
    "url": "https://cs.dbuckley.dev/docs/python/#length",
    "relUrl": "/docs/python/#length"
  },"360": {
    "doc": "Learn Python",
    "title": "If statements",
    "content": "You can use if statements for control flow: . name = \"Joe\" if len(name) &gt; 3: print(\"Nice name,\") print(name) else: print(\"That's a short name,\") print(name) . ",
    "url": "https://cs.dbuckley.dev/docs/python/#if-statements",
    "relUrl": "/docs/python/#if-statements"
  },"361": {
    "doc": "Learn Python",
    "title": "Learn Python",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/python/",
    "relUrl": "/docs/python/"
  },"362": {
    "doc": "Learn Pyxel",
    "title": "Learn Pyxel",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/python/pyxel",
    "relUrl": "/docs/python/pyxel"
  },"363": {
    "doc": "React.js Basics",
    "title": "React.js Basics",
    "content": "Many web applications have to manage a lot of information on the client‚Äôs side. This could include authentication creditentials, information from third party APIs such as Google, a shopping cart in an eCommerce site, etc. Keeping track of all that data can be cumbersome, especially when multiple user events need access to similar information. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics",
    "relUrl": "/docs/react-js/basics"
  },"364": {
    "doc": "React.js Basics",
    "title": "Single Page Application Philosophy",
    "content": "A single page application (SPA) is a design philosophy where the user is only sent one HTML page for the app they request. The DOM is then modified as needed and application state is stored in memory with JavaScript. This was done in the To Do App assignment, and you should complete the entire JavaScript Basics module before continuing here. SPAs are typically built with opinionated frameworks (Angular, React, Vue, Svelte, etc.) that provide structure to DOM modification and state management. They abstract away the nuts and bolts in order to give the developer a safe and streamlined experience. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics#single-page-application-philosophy",
    "relUrl": "/docs/react-js/basics#single-page-application-philosophy"
  },"365": {
    "doc": "React.js Basics",
    "title": "SPA with React.js",
    "content": "With that said, dive into the tutorial below to create your first few React.js apps. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/basics#spa-with-reactjs",
    "relUrl": "/docs/react-js/basics#spa-with-reactjs"
  },"366": {
    "doc": "React.js",
    "title": "React.js",
    "content": "React.js is a frontend framework used to build reactive, stateful web applications. Before diving in to any of these tutorials, I suggest that you visit React‚Äôs official tutorial to get a high-level overview of the technology. ",
    "url": "https://cs.dbuckley.dev/docs/react-js/",
    "relUrl": "/docs/react-js/"
  },"367": {
    "doc": "Extra Resources",
    "title": "Extra Resources",
    "content": "AI Follow Tutorial . How to Manage Global Variables . Check out the README file in this GitHub repository: https://github.com/buckldav/StaticScoreExample . How to Load Scene on Button Press . https://blog.insane.engineer/post/unity_button_load_scene/ . ",
    "url": "https://cs.dbuckley.dev/docs/unity-cs/extra-resources/",
    "relUrl": "/docs/unity-cs/extra-resources/"
  },"368": {
    "doc": "State Machines",
    "title": "State Machines",
    "content": "Here‚Äôs a video outlining the utility of state machines in video game development. | What is a finite state machine? | What is a benefit of using a state machine? | In programming, what is an enumerator? | . ",
    "url": "https://cs.dbuckley.dev/docs/unity-cs/state-machines/",
    "relUrl": "/docs/unity-cs/state-machines/"
  },"369": {
    "doc": "systemd and FTP",
    "title": "systemd and FTP",
    "content": "For the last piece of this unit about an introduction to web services, we will talk about the program that manages all services (systemd) and the file transfer protocol (FTP). ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/systemd-ftp/",
    "relUrl": "/docs/web-dev/systemd-ftp/"
  },"370": {
    "doc": "systemd and FTP",
    "title": "systemd",
    "content": "If you are familiar with Windows, you may have seen the ‚ÄúTask Manager‚Äù service. That service manages all processes on the computer including background ones. On most Linux devices, systemd is the equivalent, but it only focuses on background processes. The d in systemd stands for ‚Äúdaemon‚Äù (pronounced ‚Äúdemon‚Äù) which means it runs in the background. To control these services, we have been using systemctl e.g. sudo systemctl status nginx . To see everything that systemd is managing, you can list the services. sudo systemctl -l . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/systemd-ftp/#systemd",
    "relUrl": "/docs/web-dev/systemd-ftp/#systemd"
  },"371": {
    "doc": "systemd and FTP",
    "title": "ssh config",
    "content": "When you have many servers that you are connecting to over ssh, you can define a list of them in a config file so that you don‚Äôt have to remember a bunch of IP addresses. # make the .ssh directory if it doesn't exist yet mkdir -p ~/.ssh vi ~/.ssh/config . Host yourhostname # anything you want User yourusername Hostname 0.0.0.0 # insert correct ip Port 2112 # 22 by default but Mr. Buckley's server uses this. Then you can connect using the Host. ssh yourhostname . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/systemd-ftp/#ssh-config",
    "relUrl": "/docs/web-dev/systemd-ftp/#ssh-config"
  },"372": {
    "doc": "systemd and FTP",
    "title": "ftp",
    "content": "ftp or ‚Äúfile transfer protocol‚Äù is a way to connect to a remote computer and transfer files easily. It runs on port 20 or 21. The secure version, sftp connects over ssh on port 22 by default. # if configed in ssh conf sftp hostname # or sftp username@hostname:port . Note that ftp uses absolute paths and behaves kind of like a minimal shell.` . sftp&gt; ls sftp&gt; cd directory sftp&gt; put /path/to/file.txt # from you to the server sftp&gt; get /path/to/remote/file.txt # from the server to you . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/systemd-ftp/#ftp",
    "relUrl": "/docs/web-dev/systemd-ftp/#ftp"
  },"373": {
    "doc": "Beego Part 2 - Styling with Tailwind",
    "title": "Beego Part 2 - Styling with Tailwind",
    "content": "This guide assumes that you are familiar with CSS. We are going to use a more common and modern approach to writing CSS. Tailwind CSS is an approach to styling where atomic utility classes are used as building blocks. Here is an example utility class.text-white { color: white; } . This approach is in contrast to having robust CSS classes that are not as reusable or maintainable.heading-white { color: white; margin: 1rem 0; font-size: 1.5rem; } .heading-blue { color: blue; margin: 1rem 0; font-size: 1.5rem; } . If you wanted the margins to be the same on each class above and change both of them to be 1.25rem 0, you would have to remember to change it in two spots. ",
    "url": "https://cs.dbuckley.dev/docs/golang/tailwind/",
    "relUrl": "/docs/golang/tailwind/"
  },"374": {
    "doc": "Beego Part 2 - Styling with Tailwind",
    "title": "Set Up Tailwind with DaisyUI",
    "content": "To set up our Beego project with Tailwind and a component library called DaisyUI, you will need to have NodeJS and NPM installed. DaisyUI provides some useful component class names like navbar, link, btn, etc. so you don‚Äôt have to use just utility classes. # initialize project npm init # install dependencies npm i -D @tailwindcss/cli tailwindcss daisyui . Create a file called tailwind.config.js. Here, we tell Tailwind to look in our *.tpl files for the classes used. /** @type {import(\"tailwindcss\").Config} */ module.exports = { content: [\"./views/**/*.{html,tpl,tmpl}\", \"./static/**/*.{html,js}\"], }; . Create a CSS file called styles/main.css where Tailwind and DaisyUI can be imported. Here is an example file. It includes a Google Font and uses the @apply Tailwind directive take some of the existing utility classes and apply their styles to elements. It also includes a DaisyUI theme. @import url(\"https://fonts.googleapis.com/css2?family=Cabin:ital,wght@0,400..700;1,400..700&amp;display=swap\"); @import \"tailwindcss\"; @plugin \"daisyui\" { themes: emerald --default, dark --prefersdark; } @theme { /* Sets the default font for the website, see */ --font-sans: \"Cabin\", sans-serif; } button { @apply btn btn-primary; } h1 { @apply text-4xl mb-4 font-bold; } h2 { @apply text-3xl mb-4 font-bold; } h3 { @apply text-2xl mb-4 font-bold; } h4 { @apply text-xl mb-4 font-bold; } h5 { @apply text-lg mb-4 font-bold; } h6 { @apply text-base mb-4 font-bold; } p { @apply mb-4; } .container { @apply max-w-5xl mx-auto block p-4; } . Then, modify package.json to include two commands for compiling your CSS into something that can be served to the browser. { \"name\": \"queenbee\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { - \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" + \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\", + \"build:css\": \"tailwindcss -i ./styles/main.css -o ./static/css/output.css --minify\", + \"watch:css\": \"tailwindcss -i ./styles/main.css -o ./static/css/output.css --minify --watch\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"packageManager\": \"pnpm@10.11.0\", \"devDependencies\": { \"@tailwindcss/cli\": \"^4.1.12\", \"daisyui\": \"^5.1.5\", \"tailwindcss\": \"^4.1.12\" } } . npm run build:css will compile the CSS once, npm run watch:css is a long-running process that will recompile the CSS whenever there is a change. ",
    "url": "https://cs.dbuckley.dev/docs/golang/tailwind/#set-up-tailwind-with-daisyui",
    "relUrl": "/docs/golang/tailwind/#set-up-tailwind-with-daisyui"
  },"375": {
    "doc": "Beego Part 2 - Styling with Tailwind",
    "title": "Add CSS Classes to Markup",
    "content": "You can modify the layout.tpl template to include the theme that you are using. &lt;html data-theme=\"emerald\"&gt; . Try adding some CSS classes. navbar and link link-primary are from DaisyUI, container is defined by us in main.css and flex gap-2 mb-4 are each Tailwind utility classes. &lt;header class=\"navbar flex gap-2 mb-4\"&gt; &lt;a class=\"link link-primary\" href=\"/\"&gt;Home&lt;/a&gt; &lt;a class=\"link link-primary\" href=\"/about\"&gt;About&lt;/a&gt; &lt;a class=\"link link-primary\" href=\"/contact\"&gt;Contact&lt;/a&gt; &lt;/header&gt; &lt;div class=\"container\"&gt; {{ block \"content\" . }}{{ end }} &lt;/div&gt; . ",
    "url": "https://cs.dbuckley.dev/docs/golang/tailwind/#add-css-classes-to-markup",
    "relUrl": "/docs/golang/tailwind/#add-css-classes-to-markup"
  },"376": {
    "doc": "The Internet",
    "title": "The Internet",
    "content": "Here are some vocabulary words and demonstrations having to do with the internet. ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/the-internet/",
    "relUrl": "/docs/web-dev-basics/the-internet/"
  },"377": {
    "doc": "The Internet",
    "title": "Vocabulary",
    "content": "Source . | A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. Bandwidth is usually measured in bits per second. | A protocol is an agreed-upon set of rules that specify the behavior of a system. The protocols used in the Internet are open, which allows users to easily connect additional computing devices to the Internet. Example protocols: IP, HTTP(S), TCP, FTP, UDP. | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | Information is passed through the Internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Redundancy is the inclusion of extra components that can be used to mitigate failure of a system if other components fail. | When a system can support failures and still continue to function, it is called fault-tolerant. | . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/the-internet/#vocabulary",
    "relUrl": "/docs/web-dev-basics/the-internet/#vocabulary"
  },"378": {
    "doc": "The Internet",
    "title": "Internet Game",
    "content": "Try to connect all the cities to make a fault-tolerant network with the least amount of cost. Game Permalink: https://NetworkGame.buckldav.repl.co . Start Game . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/the-internet/#internet-game",
    "relUrl": "/docs/web-dev-basics/the-internet/#internet-game"
  },"379": {
    "doc": "Top Down Game",
    "title": "Top Down Game",
    "content": "Visit each page to learn about how to make a game similar to Zelda I. This includes multiple scenes, collectibles, doors, and a score. ",
    "url": "https://cs.dbuckley.dev/docs/unity-cs/top-down-game/",
    "relUrl": "/docs/unity-cs/top-down-game/"
  },"380": {
    "doc": "Turtle Snowflakes",
    "title": "Turtle Snowflakes",
    "content": "import greenfoot.*; // (World, Actor, GreenfootImage, Greenfoot and MouseInfo) /** * Write a description of class snowflake here. * * @author (your name) * @version (a version number or a date) */ public class snowflake extends Actor { private void moveAndDraw(int distance) { //getWorld().getBackground().setColor(Color.GREEN); final int X_VECTOR = (int)(getX() + distance * Math.cos(Math.toRadians(getRotation()))); final int Y_VECTOR = (int)(getY() + distance * Math.sin(Math.toRadians(getRotation()))); getWorld().getBackground().drawLine(getX(), getY(), X_VECTOR, Y_VECTOR); move(distance); } private void setColor(int r, int g, int b) { getWorld().getBackground().setColor(new Color(r, g, b)); } private void branch(int distance){ for (int a = 0; a &lt; 3; a++) { for (int b = 0; b &lt; 3; b++) { moveAndDraw(distance); moveAndDraw(-distance); turn(45); } turn(-90); moveAndDraw(-distance); turn(-45); } turn(90); moveAndDraw(distance * 3); } public void act() { int r = 1; int g = 100; int b = 5; int[][] colors = { {85, 211, 136}, {197, 196, 126}, {235, 233, 166}, {25, 135, 222}, {211, 64, 159}, {159, 165, 106}, {178, 160, 125}, {36, 192, 70}, {231, 184, 204}, {63, 203, 219} }; setColor(0,0,0); int randSize = (int)(Math.random()*25) + 5; for (int i = 0; i &lt; 8; i++) { branch(randSize); turn(-45); } } } . ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtle-snowflakes/",
    "relUrl": "/docs/java-greenfoot/turtle-snowflakes/"
  },"381": {
    "doc": "Turtley Amazing",
    "title": "Turtley Amazing",
    "content": "Adapted from https://projects.raspberrypi.org/en/projects/turtley-amazing for the Java language. Turtley Amazing by the Raspberry Pi Foundation is licensed under a Creative Commons Attribution 4.0 International License. ",
    "url": "https://cs.dbuckley.dev/docs/java-greenfoot/turtley-amazing/",
    "relUrl": "/docs/java-greenfoot/turtley-amazing/"
  },"382": {
    "doc": "Unit Project - To Do App",
    "title": "Unit Project - To Do App",
    "content": "Objective: Make a To Do App where a user can add tasks to a table and remove an individual task when it‚Äôs completed. For an example, click here. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/unit-project/",
    "relUrl": "/docs/javascript/basics/unit-project/"
  },"383": {
    "doc": "Unit Project - To Do App",
    "title": "Requirements",
    "content": ". | Use an array to keep track of tasks. (3 pts) | Use at least one event handler. (3 pts) | Use at least one function. (3 pts) | In HTML, use a table or list to display tasks. (3 pts) | Modify the DOM when tasks are added or removed. | Be able to add a task based on user input. (3 pts) | Be able to remove a specific task. (3 pts) | . | Code Style (2 pts) . | Have logical names for your variables and functions. | Use const for variables that don‚Äôt need to be reassigned. | Have good indentation blocks of code (functions, conditionals). | . | . Starting HTML . If you‚Äôd like some starting HTML, visit https://replit.com/@buckldav/TodoApp0#index.html. ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/unit-project/#requirements",
    "relUrl": "/docs/javascript/basics/unit-project/#requirements"
  },"384": {
    "doc": "Unit Project - To Do App",
    "title": "Example",
    "content": "Here‚Äôs a working example (link): . ",
    "url": "https://cs.dbuckley.dev/docs/javascript/basics/unit-project/#example",
    "relUrl": "/docs/javascript/basics/unit-project/#example"
  },"385": {
    "doc": "Unity and C#",
    "title": "Beginning in Unity",
    "content": "Welcome to this quick start to Unity! . Unity is a free to use, game engine that supports both 3D and 2D game developement. This is software that is used professionally for game and app developement. List of games made in Unity (If you want examples) . You may choose between 2D or 3D games for the project you want to work on. Each has their own pros and cons to work with. Unity was built for 3D games and the coding seems to be mostly built for 3D. For 3D, you probably won‚Äôt be making your own models which means you will have to use premade models from other people. For 2D games, it‚Äôs easy to get the assets you may need but harder to code them to do what you want. For this tutorial we will be following a simple Unity 3D tutorial that will help you understand how Unity works. Follow along with the whole tutorial(or at least watch it) and you should be set to work on your own game! . Remember! Google is a really good resource when you get stuck. Try to do what you need without Google and if you can‚Äôt get it, then use Google. (If you still need help you can ask someone in the room) . ",
    "url": "https://cs.dbuckley.dev/docs/unity-cs/#beginning-in-unity",
    "relUrl": "/docs/unity-cs/#beginning-in-unity"
  },"386": {
    "doc": "Unity and C#",
    "title": "Learn C#",
    "content": "Visit Microsoft‚Äôs Official Tutorials to learn C#: https://dotnet.microsoft.com/en-us/learn/csharp. ",
    "url": "https://cs.dbuckley.dev/docs/unity-cs/#learn-c",
    "relUrl": "/docs/unity-cs/#learn-c"
  },"387": {
    "doc": "Unity and C#",
    "title": "Unity and C#",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/unity-cs/",
    "relUrl": "/docs/unity-cs/"
  },"388": {
    "doc": "Web Dev Basics",
    "title": "Web Development Basics",
    "content": "Learn to create a multi-page website with HTML and CSS. Visit each of the following pages below to create the full project. To begin, fork this repl project: https://replit.com/@buckldav/MultiPageSite0#index.html. ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/#web-development-basics",
    "relUrl": "/docs/web-dev-basics/#web-development-basics"
  },"389": {
    "doc": "Web Dev Basics",
    "title": "Web Dev Basics",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/",
    "relUrl": "/docs/web-dev-basics/"
  },"390": {
    "doc": "Web Dev Advanced",
    "title": "Web Development Advanced",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-advanced/#web-development-advanced",
    "relUrl": "/docs/web-dev-advanced/#web-development-advanced"
  },"391": {
    "doc": "Web Dev Advanced",
    "title": "Web Dev Advanced",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-advanced/",
    "relUrl": "/docs/web-dev-advanced/"
  },"392": {
    "doc": "Intro to Web Services",
    "title": "Web Services",
    "content": "A service is a long-running program. It can be a website, a database, an application, an email server, etc. This page documents the following: . | Basic Linux commands | Ports | NGINX | . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/web-services/#web-services",
    "relUrl": "/docs/web-dev/web-services/#web-services"
  },"393": {
    "doc": "Intro to Web Services",
    "title": "Basic Linux",
    "content": "This class is taught in person with computers that have Fedora Linux on them. cd ls pwd mkdir . Vim . vi filename.txt . i - Enter \"insert mode\" to type ESC - Exit \"insert mode\" :w - Write changes :q - Quit y - Copy (Yank) p - Paste -- alternatively -- Ctrl+Shift+C - Copy Ctrl+Shift+V - Paste dG - Delete to the end of the file . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/web-services/#basic-linux",
    "relUrl": "/docs/web-dev/web-services/#basic-linux"
  },"394": {
    "doc": "Intro to Web Services",
    "title": "Ports",
    "content": ". | A service can (and usually is) bound to a numbered port. The port is where users can connect to the service. For example, a website running on port 3000 can be accessed locally at http://localhost:3000. | Ports less than 1024 are ‚Äúprivileged‚Äù (only accessible by services running as root). Further reading from W3. | There are various reserved default ports for common services. Here are just a few. | . | port | service / protocol | . | 21 | ftp | . | 22 | ssh | . | 80 | http | . | 443 | https | . | 587 | smtp (email) | . You can run services on an unprivileged port as a common user. # run an http server use the node package \"serve\" npx serve # running on http://localhost:3000 (default) . You cannot run this server on the privileged port 80 (http) as a normal user. npx serve -p 80 Error: Failed to serve: Error: listen EACCES: permission denied 0.0.0.0:80 . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/web-services/#ports",
    "relUrl": "/docs/web-dev/web-services/#ports"
  },"395": {
    "doc": "Intro to Web Services",
    "title": "NGINX",
    "content": "The solution to the privileged port problem is to have a service running as root use port 80 to serve a website. A common service is NGINX. It can be managed by systemd via the systemctl tool. # see if nginx is installed, things you install end up in /usr/bin which nginx # install if needed (red hat linux like fedora) sudo dnf install nginx -y # enable the service and start sudo systemctl enable nginx sudo systemctl start nginx # view the status sudo systemctl status nginx # restart the nginx service after config changes sudo systemctl restart nginx . Here is where the configuration file is for the website. You can edit the file as root. sudo vi /etc/nginx/nginx.conf . The file tells us that there is a server ready at port 80. It serves files in /usr/share/nginx/html. server { listen 80; listen [::]:80; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; } . You can visit http://localhost or http://localhost:80 in your browser (it‚Äôs equivalent). You should see a test page. To edit the index.html file, you can use vim. # put whatever html you want here and refresh http://localhost in your browser sudo vi /usr/share/nginx/html/index.html . It‚Äôs a bad idea to put all of your website files in one config under the root user, we are just doing it here for convenience and so we don‚Äôt have to write our own NGINX configs yet. ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/web-services/#nginx",
    "relUrl": "/docs/web-dev/web-services/#nginx"
  },"396": {
    "doc": "Intro to Web Services",
    "title": "Local DNS",
    "content": "DNS (domain name servers) match domain names with IP Addresses. For example, on your computer, there is an entry for localhost pointing to your computer. # 127.0.0.1 is your local ip address 127.0.0.1 localhost . The file where these entries are located is /etc/hosts. You can edit it to add your own entries. For example, if I want to visit my website at http://potato, and http://potato.potato: . sudo vi /etc/hosts . # add as many entries as you'd like 127.0.0.1 localhost potato potato.potato . You can also visit other sites on the local network. 172.22.4.200 myneighborssite.com . Extra: Block a website . If you want to never go to google.com on your computer, point that domain name to some other IP. 0.0.0.0 google.com . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/web-services/#local-dns",
    "relUrl": "/docs/web-dev/web-services/#local-dns"
  },"397": {
    "doc": "Intro to Web Services",
    "title": "Firewall and Local Network",
    "content": "To open port 80 on your computer to the local network, you need to create an entry in the firewall config. sudo firewall-cmd --add-port 80/tcp --permanent sudo firewall-cmd --reload . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/web-services/#firewall-and-local-network",
    "relUrl": "/docs/web-dev/web-services/#firewall-and-local-network"
  },"398": {
    "doc": "Intro to Web Services",
    "title": "Intro to Web Services",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/web-dev/web-services/",
    "relUrl": "/docs/web-dev/web-services/"
  },"399": {
    "doc": "Well-Formed Websites",
    "title": "Well-Formed Websites",
    "content": " ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/well-formed/",
    "relUrl": "/docs/web-dev-basics/well-formed/"
  },"400": {
    "doc": "Well-Formed Websites",
    "title": "Strand 2 - Fundamentals of HTML5",
    "content": "Standard 1 . Demonstrate knowledge required to develop an HTML document. | Code the foundation for a webpage. Include the element tags DOCTYPE, html, head, title, and body. | Structure the page using semantic and structural elements such as: header, nav, main, section, article, aside, footer, div, etc. | . Standard 2 . Explain appropriate file structure and naming conventions. | Use logical file structure to build websites. | Incorporate appropriate naming conventions for website files. | . Standard 3 . Use the DOCTYPE Declaration. | Develop pages using the DOCTYPE declaration. | . Standard 4 . Develop ‚Äúwell formed‚Äù webpages with appropriate HTML structure and according to W3C standards that can be validated. | Demonstrate best practice by consistently using lowercase text for all element. | Properly nest elements. | Use quotes on attribute values. | . Standard 5 . Demonstrate the use of input elements and attributes. | Create pages with tags and attributes at the block level. (html, head, body, style, header, nav, main, section, footer, div). | Create pages with tags and attributes at the inline level. (DOCTYPE, title, h1, h2, h6, p, br, meta, etc.) | Create webpages with text formatting, links, images, lists, tables (tabular data), etc. | Relative links are relative to the directory of the website. (images/photo.jpg). | Absolute links are the exact location on the internet and contain a protocol. (http, https, ftp). | Code special characters such as: &amp;nbsp;, &amp;copy;, &amp;quot;, &amp;lt;, &amp;gt;, &amp;amp;, &amp;mdash;. | Demonstrate the use of form, fieldsets, legend, buttons, text fields, checkboxes, radio buttons, and dropdown lists. | . Standard 6 . Use meta tags for page documentation and search engine optimization (SEO). | Specify page description, keywords, viewport, and author using meta tags. | Declare encoding using meta tags. | Understand principles of search engine optimization. | . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/well-formed/#strand-2---fundamentals-of-html5",
    "relUrl": "/docs/web-dev-basics/well-formed/#strand-2---fundamentals-of-html5"
  },"401": {
    "doc": "Well-Formed Websites",
    "title": "Strand 4 - Site Planning",
    "content": "Standard 1 . Analyze project requirements. | Identify the purpose and audience for a website. | Identify basic principles of website usability, readability, and accessibility. | Usability: Cross browser compatibility. | Readability: Contrast, size, font, and color. | Accessibility standards that address the needs of people with visual and motor impairments, such as using alt tags, strong instead of bold, etc. | . | Identify and follow steps in the website planning and development process. | . Standard 2 . Users are the focus of all design. | Design elements are easy to access, understand, and use. | Keep the interface simple, create consistency, use common UI elements, placement in page layout, strategically use color and texture, use typography to help increase scannability, legibility and readability, and inform your users of location, actions, or errors. | Plan a website by using sketches, wireframes, and site maps. | . ",
    "url": "https://cs.dbuckley.dev/docs/web-dev-basics/well-formed/#strand-4---site-planning",
    "relUrl": "/docs/web-dev-basics/well-formed/#strand-4---site-planning"
  }
}
